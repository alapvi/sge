{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Presentaci\u00f3n En este espacio se presentan algunos apuntes del m\u00f3dulo de Sistemas de Gesti\u00f3n Empresarial para el ciclo de Desarrollo de Aplicaciones Multiplataforma que se imparte en el I.E.S. Lluis Simarro de X\u00e0tiva . Elaboraci\u00f3n : Alberto Aparicio Vila Dpto. Inform\u00e1tica I.E.S. Dr. Llu\u00eds Simarro Lacabra X\u00e0tiva","title":"Presentaci\u00f3n"},{"location":"#presentacion","text":"En este espacio se presentan algunos apuntes del m\u00f3dulo de Sistemas de Gesti\u00f3n Empresarial para el ciclo de Desarrollo de Aplicaciones Multiplataforma que se imparte en el I.E.S. Lluis Simarro de X\u00e0tiva . Elaboraci\u00f3n : Alberto Aparicio Vila Dpto. Inform\u00e1tica I.E.S. Dr. Llu\u00eds Simarro Lacabra X\u00e0tiva","title":"Presentaci\u00f3n"},{"location":"apps/accesslist/","text":"A\u00f1adir accesos en ir.model.access.csv para task_model y verificar vistas por defecto En este paso daremos permisos de acceso al modelo task_model para que los usuarios internos puedan ver y gestionar registros desde los men\u00fas creados en el paso 2. Despu\u00e9s actualizaremos el m\u00f3dulo y comprobaremos que Odoo genera vistas por defecto ( list y form ) aunque no hayamos definido vistas personalizadas. Crear la carpeta security/ y el archivo ir.model.access.csv Estructura esperada del m\u00f3dulo: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u251c\u2500 models/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 task_model.py \u251c\u2500 views/ \u2502 \u2514\u2500 task_menus_actions.xml \u2514\u2500 security/ \u2514\u2500 ir.model.access.csv Crea el archivo task_app/security/ir.model.access.csv con el contenido m\u00ednimo: id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink access_task_app_task_model_user,task_app_task_model,model_task_app_task_model,base.group_user,1,1,1,1 Explicaci\u00f3n de columnas: model_task_app_task_model : es el External ID que Odoo genera autom\u00e1ticamente para el modelo task_model (patr\u00f3n: model_ + nombre del modelo con . \u2192 _ ). base.group_user : grupo Usuarios Internos . perm_read/write/create/unlink : permisos CRUD (1 = permitido, 0 = denegado). Si quisieras dar acceso solo lectura: 1,0,0,0 . Para restringir por filas (dominios), usa Reglas de registro ( ir.rule ) en otro XML (no es necesario en este paso). A\u00f1adir el access.csv al __manifest__.py Edita task_app/__manifest__.py y aseg\u00farate de que security/ir.model.access.csv aparece antes que las vistas/men\u00fas en data : \"data\": [ \"security/ir.model.access.csv\", \"views/task_menus_actions.xml\", ], El orden importa : primero seguridad, luego vistas/acciones/men\u00fas. Actualizar el m\u00f3dulo Desde la interfaz Ajustes \u2192 Activar modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar el m\u00f3dulo task_app . Con Docker (CLI) Usando dos contenedores ( web y db ), ejecuta (ajusta nombres/base/credenciales): docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' --stop-after-init evita conflictos con el puerto 8069 si el servidor ya est\u00e1 corriendo en el contenedor. Verificar que podemos acceder a los men\u00fas y al modelo En la UI, abre Task App \u2192 Tasks . Ahora, como usuario interno , deber\u00edas: Ver la lista de registros de task_model (vista list por defecto). Crear un registro (bot\u00f3n Nuevo ). Editar y Eliminar registros (seg\u00fan los permisos definidos). ![\"Acceso a task_model\"](images/accesslist_01.png){width=\"100%\" } Acceso a task_model Si Odoo no muestra la vista, revisa que est\u00e9s usando un usuario con grupo Usuarios internos y que el CSV tenga la l\u00ednea con base.group_user correctamente escrita. Confirmar que las vistas por defecto existen (sin haber creado vistas propias) Aunque no definiste vistas <list> / <form> , Odoo 18 renderiza vistas por defecto . Puedes comprobar: Ajustes \u2192 T\u00e9cnico \u2192 Vistas \u2192 filtra por Modelo = task.model . Lo habitual es que no haya vistas personalizadas listadas a\u00fan. Abre un registro desde el men\u00fa Task App \u2192 Tasks : ver\u00e1s una lista y al abrir un elemento, un formulario b\u00e1sicos. Estos layouts \u201cpor defecto\u201d los genera Odoo en tiempo de ejecuci\u00f3n si no encuentra vistas espec\u00edficas para el modelo. \ud83d\udcdd Actividad !!! Question \"A\u00f1adir permisos\" 1. A\u00f1ade los permisos al modelo task_model 2. Comprueba que puedas acceder","title":"A\u00f1adir accesos en ir.model.access.csv para task_model y verificar vistas por defecto"},{"location":"apps/accesslist/#anadir-accesos-en-irmodelaccesscsv-para-task_model-y-verificar-vistas-por-defecto","text":"En este paso daremos permisos de acceso al modelo task_model para que los usuarios internos puedan ver y gestionar registros desde los men\u00fas creados en el paso 2. Despu\u00e9s actualizaremos el m\u00f3dulo y comprobaremos que Odoo genera vistas por defecto ( list y form ) aunque no hayamos definido vistas personalizadas.","title":"A\u00f1adir accesos en ir.model.access.csv para task_model y verificar vistas por defecto"},{"location":"apps/accesslist/#crear-la-carpeta-security-y-el-archivo-irmodelaccesscsv","text":"Estructura esperada del m\u00f3dulo: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u251c\u2500 models/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 task_model.py \u251c\u2500 views/ \u2502 \u2514\u2500 task_menus_actions.xml \u2514\u2500 security/ \u2514\u2500 ir.model.access.csv Crea el archivo task_app/security/ir.model.access.csv con el contenido m\u00ednimo: id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink access_task_app_task_model_user,task_app_task_model,model_task_app_task_model,base.group_user,1,1,1,1 Explicaci\u00f3n de columnas: model_task_app_task_model : es el External ID que Odoo genera autom\u00e1ticamente para el modelo task_model (patr\u00f3n: model_ + nombre del modelo con . \u2192 _ ). base.group_user : grupo Usuarios Internos . perm_read/write/create/unlink : permisos CRUD (1 = permitido, 0 = denegado). Si quisieras dar acceso solo lectura: 1,0,0,0 . Para restringir por filas (dominios), usa Reglas de registro ( ir.rule ) en otro XML (no es necesario en este paso).","title":"Crear la carpeta security/ y el archivo ir.model.access.csv"},{"location":"apps/accesslist/#anadir-el-accesscsv-al-__manifest__py","text":"Edita task_app/__manifest__.py y aseg\u00farate de que security/ir.model.access.csv aparece antes que las vistas/men\u00fas en data : \"data\": [ \"security/ir.model.access.csv\", \"views/task_menus_actions.xml\", ], El orden importa : primero seguridad, luego vistas/acciones/men\u00fas.","title":"A\u00f1adir el access.csv al __manifest__.py"},{"location":"apps/accesslist/#actualizar-el-modulo","text":"","title":"Actualizar el m\u00f3dulo"},{"location":"apps/accesslist/#desde-la-interfaz","text":"Ajustes \u2192 Activar modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar el m\u00f3dulo task_app .","title":"Desde la interfaz"},{"location":"apps/accesslist/#con-docker-cli","text":"Usando dos contenedores ( web y db ), ejecuta (ajusta nombres/base/credenciales): docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' --stop-after-init evita conflictos con el puerto 8069 si el servidor ya est\u00e1 corriendo en el contenedor.","title":"Con Docker (CLI)"},{"location":"apps/accesslist/#verificar-que-podemos-acceder-a-los-menus-y-al-modelo","text":"En la UI, abre Task App \u2192 Tasks . Ahora, como usuario interno , deber\u00edas: Ver la lista de registros de task_model (vista list por defecto). Crear un registro (bot\u00f3n Nuevo ). Editar y Eliminar registros (seg\u00fan los permisos definidos). ![\"Acceso a task_model\"](images/accesslist_01.png){width=\"100%\" } Acceso a task_model Si Odoo no muestra la vista, revisa que est\u00e9s usando un usuario con grupo Usuarios internos y que el CSV tenga la l\u00ednea con base.group_user correctamente escrita.","title":"Verificar que podemos acceder a los men\u00fas y al modelo"},{"location":"apps/accesslist/#confirmar-que-las-vistas-por-defecto-existen-sin-haber-creado-vistas-propias","text":"Aunque no definiste vistas <list> / <form> , Odoo 18 renderiza vistas por defecto . Puedes comprobar: Ajustes \u2192 T\u00e9cnico \u2192 Vistas \u2192 filtra por Modelo = task.model . Lo habitual es que no haya vistas personalizadas listadas a\u00fan. Abre un registro desde el men\u00fa Task App \u2192 Tasks : ver\u00e1s una lista y al abrir un elemento, un formulario b\u00e1sicos. Estos layouts \u201cpor defecto\u201d los genera Odoo en tiempo de ejecuci\u00f3n si no encuentra vistas espec\u00edficas para el modelo.","title":"Confirmar que las vistas por defecto existen (sin haber creado vistas propias)"},{"location":"apps/accesslist/#actividad","text":"!!! Question \"A\u00f1adir permisos\" 1. A\u00f1ade los permisos al modelo task_model 2. Comprueba que puedas acceder","title":"\ud83d\udcdd Actividad"},{"location":"apps/addicon/","text":"\ud83c\udfa8 A\u00f1adir un icono a tu app Prepara el icono Formato: PNG (mejor con fondo transparente). Tama\u00f1o recomendado: cuadrado, 512\u00d7512 px o 1024\u00d71024 px. Nombre y ubicaci\u00f3n: static/description/icon.png . Estructura: task_app/ \u251c\u2500 __manifest__.py \u2514\u2500 static/ \u2514\u2500 description/ \u251c\u2500 icon.png <-- icono que ver\u00e1 Odoo en Apps \u251c\u2500 banner.png <-- (opcional) imagen grande de portada \u251c\u2500 screenshot1.png <-- (opcional) capturas \u2514\u2500 index.html <-- (opcional) landing de la app Odoo detecta autom\u00e1ticamente static/description/icon.png para el icono del mosaico en Apps . No necesitas declarar el icono en el manifest. ![\"Icono\"](images/taskappico.png){width=\"40%\" } Icono para la app (Opcional) Landing y galer\u00eda Landing: crea static/description/index.html (aparece al abrir la ficha de la app). Galer\u00eda de im\u00e1genes: puedes referenciarlas desde el manifest con la clave images . Ejemplo m\u00ednimo de index.html : <!doctype html> <html> <head><meta charset=\"utf-8\"><title>Task App</title></head> <body style=\"font-family:system-ui;line-height:1.5\"> <h1>Task App</h1> <p>Gesti\u00f3n simple de tareas con categor\u00edas y vistas list/form/search.</p> <img src=\"banner.png\" alt=\"Banner\" style=\"max-width:100%;height:auto\"> <ul> <li>Modelo: <code>task_app.task_model</code></li> <li>Categor\u00edas: <code>task_app.category_model</code></li> </ul> </body> </html> Manifest con galer\u00eda: # __manifest__.py { \"name\": \"Task App\", \"version\": \"18.0.1.0.0\", \"depends\": [\"base\"], \"data\": [ \"security/ir.model.access.csv\", \"views/task_menus_actions.xml\", \"views/task_views.xml\", \"views/task_search.xml\", ], \"images\": [ # (opcional) se muestran en la ficha de la app \"static/description/banner.png\" ], \"application\": True, } Recargar para verlo en Odoo Desde la interfaz 1) Ajustes \u2192 Activar modo desarrollador 2) Apps \u2192 Actualizar lista de aplicaciones 3) Busca tu m\u00f3dulo y abre la ficha: ver\u00e1s el icono y, si lo a\u00f1adiste, la landing e im\u00e1genes . Con Docker (CLI) docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' ![\"Icono\"](images/addicon_01.png){width=\"80%\" } Task App ![\"Icono\"](images/addicon_02.png){width=\"80%\" } Detalle de informaci\u00f3n de Task App Si no ves el cambio: limpia cach\u00e9 del navegador o recarga con Ctrl+F5. Verifica que el archivo est\u00e9 en la ruta correcta del contenedor: docker exec -it odoo18_web_1 ls -la /mnt/extra-addons/task_app/static/description/ Consejos de dise\u00f1o Fondo transparente y bordes suaves para integrarse con el tema. Evita mucho texto dentro del icono; prioriza una silueta clara. Mant\u00e9n el archivo ligero (\u2264 200 KB si puedes). \ud83d\udcdd Actividad !!! Question \"Darle un toque profesional...\" 1. A\u00f1ade un icono y genera un archivo .html con la descripci\u00f3n de la app","title":"\ud83c\udfa8 A\u00f1adir un icono a tu app"},{"location":"apps/addicon/#anadir-un-icono-a-tu-app","text":"","title":"\ud83c\udfa8 A\u00f1adir un icono a tu app"},{"location":"apps/addicon/#prepara-el-icono","text":"Formato: PNG (mejor con fondo transparente). Tama\u00f1o recomendado: cuadrado, 512\u00d7512 px o 1024\u00d71024 px. Nombre y ubicaci\u00f3n: static/description/icon.png . Estructura: task_app/ \u251c\u2500 __manifest__.py \u2514\u2500 static/ \u2514\u2500 description/ \u251c\u2500 icon.png <-- icono que ver\u00e1 Odoo en Apps \u251c\u2500 banner.png <-- (opcional) imagen grande de portada \u251c\u2500 screenshot1.png <-- (opcional) capturas \u2514\u2500 index.html <-- (opcional) landing de la app Odoo detecta autom\u00e1ticamente static/description/icon.png para el icono del mosaico en Apps . No necesitas declarar el icono en el manifest. ![\"Icono\"](images/taskappico.png){width=\"40%\" } Icono para la app","title":"Prepara el icono"},{"location":"apps/addicon/#opcional-landing-y-galeria","text":"Landing: crea static/description/index.html (aparece al abrir la ficha de la app). Galer\u00eda de im\u00e1genes: puedes referenciarlas desde el manifest con la clave images . Ejemplo m\u00ednimo de index.html : <!doctype html> <html> <head><meta charset=\"utf-8\"><title>Task App</title></head> <body style=\"font-family:system-ui;line-height:1.5\"> <h1>Task App</h1> <p>Gesti\u00f3n simple de tareas con categor\u00edas y vistas list/form/search.</p> <img src=\"banner.png\" alt=\"Banner\" style=\"max-width:100%;height:auto\"> <ul> <li>Modelo: <code>task_app.task_model</code></li> <li>Categor\u00edas: <code>task_app.category_model</code></li> </ul> </body> </html> Manifest con galer\u00eda: # __manifest__.py { \"name\": \"Task App\", \"version\": \"18.0.1.0.0\", \"depends\": [\"base\"], \"data\": [ \"security/ir.model.access.csv\", \"views/task_menus_actions.xml\", \"views/task_views.xml\", \"views/task_search.xml\", ], \"images\": [ # (opcional) se muestran en la ficha de la app \"static/description/banner.png\" ], \"application\": True, }","title":"(Opcional) Landing y galer\u00eda"},{"location":"apps/addicon/#recargar-para-verlo-en-odoo","text":"","title":"Recargar para verlo en Odoo"},{"location":"apps/addicon/#desde-la-interfaz","text":"1) Ajustes \u2192 Activar modo desarrollador 2) Apps \u2192 Actualizar lista de aplicaciones 3) Busca tu m\u00f3dulo y abre la ficha: ver\u00e1s el icono y, si lo a\u00f1adiste, la landing e im\u00e1genes .","title":"Desde la interfaz"},{"location":"apps/addicon/#con-docker-cli","text":"docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' ![\"Icono\"](images/addicon_01.png){width=\"80%\" } Task App ![\"Icono\"](images/addicon_02.png){width=\"80%\" } Detalle de informaci\u00f3n de Task App Si no ves el cambio: limpia cach\u00e9 del navegador o recarga con Ctrl+F5. Verifica que el archivo est\u00e9 en la ruta correcta del contenedor: docker exec -it odoo18_web_1 ls -la /mnt/extra-addons/task_app/static/description/","title":"Con Docker (CLI)"},{"location":"apps/addicon/#consejos-de-diseno","text":"Fondo transparente y bordes suaves para integrarse con el tema. Evita mucho texto dentro del icono; prioriza una silueta clara. Mant\u00e9n el archivo ligero (\u2264 200 KB si puedes).","title":"Consejos de dise\u00f1o"},{"location":"apps/addicon/#actividad","text":"!!! Question \"Darle un toque profesional...\" 1. A\u00f1ade un icono y genera un archivo .html con la descripci\u00f3n de la app","title":"\ud83d\udcdd Actividad"},{"location":"apps/addlogic/","text":"L\u00f3gica de negocio Odoo tiene un campo booleano especial llamado active que se usa para archivar o desarchivar registros. Cuando active=False , el registro sigue existiendo en la base de datos pero no aparece en las vistas por defecto. \ud83d\udcda Referencia oficial : - Documentaci\u00f3n Odoo \u2014 Campo active - Documentaci\u00f3n Odoo \u2014 Botones en vistas Modificar el modelo task_model Ruta: task_app/models/task_model.py from odoo import fields, models class TaskModel(models.Model): _name = \"task.model\" _description = \"Task (basic model)\" name = fields.Char(string=\"Name\", required=True, index=True) description = fields.Text(string=\"Description\") is_done = fields.Boolean(string=\"Done\", default=False) category_id = fields.Many2one( comodel_name=\"category.model\", string=\"Category\", ondelete=\"set null\", index=True, ) # Campo especial para activar/desactivar (archivar) active = fields.Boolean(default=True) # M\u00e9todo para mover tareas realizadas a hist\u00f3rico def action_archive_done_tasks(self): done_tasks = self.search([('is_done', '=', True), ('active', '=', True),('create_uid', '=', self.env.user.id)]) done_tasks.write({'active': False}) return True # M\u00e9todo para eliminar todas las tareas del hist\u00f3rico def action_delete_archived_tasks(self): archived_tasks = self.search([('active', '=', False),('create_uid', '=', self.env.user.id)]) archived_tasks.unlink() return True \ud83d\udccc Notas : search devuelve un recordset sobre el que podemos hacer write o unlink . active=False significa que el registro est\u00e1 archivado, pero no eliminado. A\u00f1adir botones a la vista Ruta: task_app/views/task_views.xml <odoo> <record id=\"view_task_model_form\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_form</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <form string=\"Task\"> <header> <!-- Bot\u00f3n para archivar todas las tareas realizadas --> <button name=\"action_archive_done_tasks\" string=\"Mover realizadas a hist\u00f3rico\" type=\"object\" class=\"btn-primary\" confirm=\"\u00bfEst\u00e1s seguro de que quieres mover tus tareas realizadas al hist\u00f3rico?\"/> <!-- Bot\u00f3n para eliminar todas las tareas archivadas --> <button name=\"action_delete_archived_tasks\" string=\"Eliminar hist\u00f3rico\" type=\"object\" class=\"btn-danger\" confirm=\"\u26a0\ufe0f Esta acci\u00f3n eliminar\u00e1 todas tus tareas archivadas. \u00bfDeseas continuar?\"/> </header> <sheet> <group> <group> <field name=\"name\"/> <field name=\"category_id\"/> <field name=\"is_done\"/> <field name=\"active\"/> </group> <group> <field name=\"description\"/> </group> </group> </sheet> </form> </field> </record> </odoo> \ud83d\udccc Explicaci\u00f3n de atributos : name=\"action_archive_done_tasks\" \u2192 nombre del m\u00e9todo Python que se ejecuta. type=\"object\" \u2192 indica que se llama a un m\u00e9todo del modelo (no es una acci\u00f3n est\u00e1ndar). class=\"btn-primary\" / btn-danger \u2192 estilos de color para el bot\u00f3n. Actualizar el m\u00f3dulo docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' Probar en la interfaz Crear varias tareas con is_done=True y is_done=False . Abrir cualquier tarea y pulsar \"Mover realizadas a hist\u00f3rico\" . Comprobar que las realizadas desaparecen de la vista (porque active=False ). Pulsar \"Eliminar hist\u00f3rico\" para borrarlas de la base de datos. ![\"Botones\"](images/addlogic_01.png){width=\"80%\" } Botones !!! tip \" Tip \" Si quieres permitir ver tambi\u00e9n las tareas archivadas, activa el filtro \"Incluye archivadas\" en la vista lista (Odoo lo a\u00f1ade autom\u00e1ticamente si existe el campo active ). \ud83d\udcdd Actividad !!! Question \"Crear botones\" 1. A\u00f1ade los botones para mover tareas realizadas al hist\u00f3rico y eliminar del hist\u00f3rico.","title":"L\u00f3gica de negocio"},{"location":"apps/addlogic/#logica-de-negocio","text":"Odoo tiene un campo booleano especial llamado active que se usa para archivar o desarchivar registros. Cuando active=False , el registro sigue existiendo en la base de datos pero no aparece en las vistas por defecto. \ud83d\udcda Referencia oficial : - Documentaci\u00f3n Odoo \u2014 Campo active - Documentaci\u00f3n Odoo \u2014 Botones en vistas","title":"L\u00f3gica de negocio"},{"location":"apps/addlogic/#modificar-el-modelo-task_model","text":"Ruta: task_app/models/task_model.py from odoo import fields, models class TaskModel(models.Model): _name = \"task.model\" _description = \"Task (basic model)\" name = fields.Char(string=\"Name\", required=True, index=True) description = fields.Text(string=\"Description\") is_done = fields.Boolean(string=\"Done\", default=False) category_id = fields.Many2one( comodel_name=\"category.model\", string=\"Category\", ondelete=\"set null\", index=True, ) # Campo especial para activar/desactivar (archivar) active = fields.Boolean(default=True) # M\u00e9todo para mover tareas realizadas a hist\u00f3rico def action_archive_done_tasks(self): done_tasks = self.search([('is_done', '=', True), ('active', '=', True),('create_uid', '=', self.env.user.id)]) done_tasks.write({'active': False}) return True # M\u00e9todo para eliminar todas las tareas del hist\u00f3rico def action_delete_archived_tasks(self): archived_tasks = self.search([('active', '=', False),('create_uid', '=', self.env.user.id)]) archived_tasks.unlink() return True \ud83d\udccc Notas : search devuelve un recordset sobre el que podemos hacer write o unlink . active=False significa que el registro est\u00e1 archivado, pero no eliminado.","title":"Modificar el modelo task_model"},{"location":"apps/addlogic/#anadir-botones-a-la-vista","text":"Ruta: task_app/views/task_views.xml <odoo> <record id=\"view_task_model_form\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_form</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <form string=\"Task\"> <header> <!-- Bot\u00f3n para archivar todas las tareas realizadas --> <button name=\"action_archive_done_tasks\" string=\"Mover realizadas a hist\u00f3rico\" type=\"object\" class=\"btn-primary\" confirm=\"\u00bfEst\u00e1s seguro de que quieres mover tus tareas realizadas al hist\u00f3rico?\"/> <!-- Bot\u00f3n para eliminar todas las tareas archivadas --> <button name=\"action_delete_archived_tasks\" string=\"Eliminar hist\u00f3rico\" type=\"object\" class=\"btn-danger\" confirm=\"\u26a0\ufe0f Esta acci\u00f3n eliminar\u00e1 todas tus tareas archivadas. \u00bfDeseas continuar?\"/> </header> <sheet> <group> <group> <field name=\"name\"/> <field name=\"category_id\"/> <field name=\"is_done\"/> <field name=\"active\"/> </group> <group> <field name=\"description\"/> </group> </group> </sheet> </form> </field> </record> </odoo> \ud83d\udccc Explicaci\u00f3n de atributos : name=\"action_archive_done_tasks\" \u2192 nombre del m\u00e9todo Python que se ejecuta. type=\"object\" \u2192 indica que se llama a un m\u00e9todo del modelo (no es una acci\u00f3n est\u00e1ndar). class=\"btn-primary\" / btn-danger \u2192 estilos de color para el bot\u00f3n.","title":"A\u00f1adir botones a la vista"},{"location":"apps/addlogic/#actualizar-el-modulo","text":"docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init '","title":"Actualizar el m\u00f3dulo"},{"location":"apps/addlogic/#probar-en-la-interfaz","text":"Crear varias tareas con is_done=True y is_done=False . Abrir cualquier tarea y pulsar \"Mover realizadas a hist\u00f3rico\" . Comprobar que las realizadas desaparecen de la vista (porque active=False ). Pulsar \"Eliminar hist\u00f3rico\" para borrarlas de la base de datos. ![\"Botones\"](images/addlogic_01.png){width=\"80%\" } Botones !!! tip \" Tip \" Si quieres permitir ver tambi\u00e9n las tareas archivadas, activa el filtro \"Incluye archivadas\" en la vista lista (Odoo lo a\u00f1ade autom\u00e1ticamente si existe el campo active ).","title":"Probar en la interfaz"},{"location":"apps/addlogic/#actividad","text":"!!! Question \"Crear botones\" 1. A\u00f1ade los botones para mover tareas realizadas al hist\u00f3rico y eliminar del hist\u00f3rico.","title":"\ud83d\udcdd Actividad"},{"location":"apps/addmenu/","text":"A\u00f1adir acci\u00f3n de ventana y men\u00fas para task_model (sin vistas a\u00fan) En este paso vamos a abrir el modelo desde la UI creando: - una acci\u00f3n de ventana ( ir.actions.act_window ) que apunte a task_model , y - dos men\u00fas (uno ra\u00edz y otro hijo) que disparen esa acci\u00f3n. Nota: No definiremos todav\u00eda vistas <list> ni <form> . Odoo es capaz de generar vistas b\u00e1sicas por defecto cuando no existen vistas espec\u00edficas para un modelo. En el siguiente paso crearemos nuestras vistas personalizadas. Prerrequisitos M\u00f3dulo task_app instalado o visible en Apps . Modelo del paso anterior creado e importado: Modelo: task_model con campos name , description , is_done . Estructura m\u00ednima: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u251c\u2500 models/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 task_model.py \u2514\u2500 views/ Crea la carpeta views/ si no existe. Crear men\u00fas Archivo: task_app/views/task_menus_action.xml <odoo> <!-- Acci\u00f3n de ventana: abre el modelo task_app.task_model --> <record id=\"action_task_model\" model=\"ir.actions.act_window\"> <field name=\"name\">Tasks</field> <field name=\"res_model\">task_app.task_model</field> <!-- Importante en Odoo 18: usar list/form (no tree) --> <field name=\"view_mode\">list,form</field> <!-- Opcional: ayuda cuando no hay registros a\u00fan --> <field name=\"help\" type=\"html\"> <p class=\"o_view_nocontent_smiling_face\"> Crea tu primera tarea </p> </field> </record> <!-- Men\u00fa ra\u00edz de la app (puedes renombrar a tu gusto) --> <menuitem id=\"menu_task_root\" name=\"Task App\" sequence=\"10\"/> <!-- Men\u00fa que dispara la acci\u00f3n --> <menuitem id=\"menu_task_model\" name=\"Tasks\" parent=\"menu_task_root\" action=\"action_task_model\" sequence=\"10\"/> </odoo> Consejo: usa IDs claros y estables ( action_task_model , menu_task_root , menu_task_model ) para facilitar futuras herencias/extensiones. A\u00f1adir el XML al __manifest__.py Edita task_app/__manifest__.py y a\u00f1ade el archivo en la clave data (mant\u00e9n primero seguridad cuando la tengas): \"data\": [ # \"security/ir.model.access.csv\", # (lo a\u00f1adiremos en un paso posterior) \"views/task_menus_actions.xml\", ], Si ya ten\u00edas data: [] , simplemente inserta la ruta tal cual. Evita listar ficheros que no existan . Actualizar el m\u00f3dulo Opci\u00f3n A \u2014 Interfaz Ajustes \u2192 Activar Modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar (o Instalar ) el m\u00f3dulo task_app . Opci\u00f3n B \u2014 Docker (CLI) Con contenedores web (Odoo) y db (PostgreSQL), ejecuta: docker exec -it odoo18_web_1 sh -lc ' odoo \\ --db_host=db \\ --db_port=5432 \\ --db_user=odoo \\ --db_password=\"$(cat /run/secrets/postgresql_password)\" \\ --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons \\ -d odoodb -u task_app --stop-after-init ' Usa --stop-after-init para evitar el error \u201cPort 8069 in use\u201d si el servidor ya est\u00e1 activo en el contenedor. Verificar desde la UI Abre Task App \u2192 Tasks (el men\u00fa que acabamos de crear). Deber\u00edas poder entrar y ver una lista generada por defecto (Odoo 18) y, al abrir un registro, un formulario b\u00e1sico . Si no ves el men\u00fa: Comprueba que el m\u00f3dulo est\u00e1 actualizado sin errores. Activa Modo desarrollador y revisa en Ajustes \u2192 T\u00e9cnico \u2192 Acciones de Ventana que existe action_task_model (res_model = task_model ). Revisa en Ajustes \u2192 T\u00e9cnico \u2192 Men\u00fas que existen menu_task_root y menu_task_model . Permisos: si no eres Administrador , podr\u00edas necesitar accesos en security/ir.model.access.csv para que los usuarios internos creen/lean tareas. Lo a\u00f1adiremos m\u00e1s adelante. \ud83d\udcdd Actividad !!! Question \"Crear men\u00fas\" 1. Crea un men\u00fa para acceder al modelo task_model","title":"A\u00f1adir acci\u00f3n de ventana y men\u00fas para task_model (sin vistas a\u00fan)"},{"location":"apps/addmenu/#anadir-accion-de-ventana-y-menus-para-task_model-sin-vistas-aun","text":"En este paso vamos a abrir el modelo desde la UI creando: - una acci\u00f3n de ventana ( ir.actions.act_window ) que apunte a task_model , y - dos men\u00fas (uno ra\u00edz y otro hijo) que disparen esa acci\u00f3n. Nota: No definiremos todav\u00eda vistas <list> ni <form> . Odoo es capaz de generar vistas b\u00e1sicas por defecto cuando no existen vistas espec\u00edficas para un modelo. En el siguiente paso crearemos nuestras vistas personalizadas.","title":"A\u00f1adir acci\u00f3n de ventana y men\u00fas para task_model (sin vistas a\u00fan)"},{"location":"apps/addmenu/#prerrequisitos","text":"M\u00f3dulo task_app instalado o visible en Apps . Modelo del paso anterior creado e importado: Modelo: task_model con campos name , description , is_done . Estructura m\u00ednima: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u251c\u2500 models/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 task_model.py \u2514\u2500 views/ Crea la carpeta views/ si no existe.","title":"Prerrequisitos"},{"location":"apps/addmenu/#crear-menus","text":"Archivo: task_app/views/task_menus_action.xml <odoo> <!-- Acci\u00f3n de ventana: abre el modelo task_app.task_model --> <record id=\"action_task_model\" model=\"ir.actions.act_window\"> <field name=\"name\">Tasks</field> <field name=\"res_model\">task_app.task_model</field> <!-- Importante en Odoo 18: usar list/form (no tree) --> <field name=\"view_mode\">list,form</field> <!-- Opcional: ayuda cuando no hay registros a\u00fan --> <field name=\"help\" type=\"html\"> <p class=\"o_view_nocontent_smiling_face\"> Crea tu primera tarea </p> </field> </record> <!-- Men\u00fa ra\u00edz de la app (puedes renombrar a tu gusto) --> <menuitem id=\"menu_task_root\" name=\"Task App\" sequence=\"10\"/> <!-- Men\u00fa que dispara la acci\u00f3n --> <menuitem id=\"menu_task_model\" name=\"Tasks\" parent=\"menu_task_root\" action=\"action_task_model\" sequence=\"10\"/> </odoo> Consejo: usa IDs claros y estables ( action_task_model , menu_task_root , menu_task_model ) para facilitar futuras herencias/extensiones.","title":"Crear men\u00fas"},{"location":"apps/addmenu/#anadir-el-xml-al-__manifest__py","text":"Edita task_app/__manifest__.py y a\u00f1ade el archivo en la clave data (mant\u00e9n primero seguridad cuando la tengas): \"data\": [ # \"security/ir.model.access.csv\", # (lo a\u00f1adiremos en un paso posterior) \"views/task_menus_actions.xml\", ], Si ya ten\u00edas data: [] , simplemente inserta la ruta tal cual. Evita listar ficheros que no existan .","title":"A\u00f1adir el XML al __manifest__.py"},{"location":"apps/addmenu/#actualizar-el-modulo","text":"","title":"Actualizar el m\u00f3dulo"},{"location":"apps/addmenu/#opcion-a-interfaz","text":"Ajustes \u2192 Activar Modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar (o Instalar ) el m\u00f3dulo task_app .","title":"Opci\u00f3n A \u2014 Interfaz"},{"location":"apps/addmenu/#opcion-b-docker-cli","text":"Con contenedores web (Odoo) y db (PostgreSQL), ejecuta: docker exec -it odoo18_web_1 sh -lc ' odoo \\ --db_host=db \\ --db_port=5432 \\ --db_user=odoo \\ --db_password=\"$(cat /run/secrets/postgresql_password)\" \\ --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons \\ -d odoodb -u task_app --stop-after-init ' Usa --stop-after-init para evitar el error \u201cPort 8069 in use\u201d si el servidor ya est\u00e1 activo en el contenedor.","title":"Opci\u00f3n B \u2014 Docker (CLI)"},{"location":"apps/addmenu/#verificar-desde-la-ui","text":"Abre Task App \u2192 Tasks (el men\u00fa que acabamos de crear). Deber\u00edas poder entrar y ver una lista generada por defecto (Odoo 18) y, al abrir un registro, un formulario b\u00e1sico . Si no ves el men\u00fa: Comprueba que el m\u00f3dulo est\u00e1 actualizado sin errores. Activa Modo desarrollador y revisa en Ajustes \u2192 T\u00e9cnico \u2192 Acciones de Ventana que existe action_task_model (res_model = task_model ). Revisa en Ajustes \u2192 T\u00e9cnico \u2192 Men\u00fas que existen menu_task_root y menu_task_model . Permisos: si no eres Administrador , podr\u00edas necesitar accesos en security/ir.model.access.csv para que los usuarios internos creen/lean tareas. Lo a\u00f1adiremos m\u00e1s adelante.","title":"Verificar desde la UI"},{"location":"apps/addmenu/#actividad","text":"!!! Question \"Crear men\u00fas\" 1. Crea un men\u00fa para acceder al modelo task_model","title":"\ud83d\udcdd Actividad"},{"location":"apps/createmodel/","text":"Crear un modelo nuevo task_model en Odoo Este tutorial crea un modelo ORM llamado task.model con tres campos: - name (Char) \u2014 nombre de la tarea - description (Text) \u2014 descripci\u00f3n - is_done (Boolean) \u2014 si la tarea est\u00e1 realizada Objetivo: que el modelo quede registrado en Odoo y podamos verlo desde el Men\u00fa t\u00e9cnico (modo desarrollador), sin a\u00f1adir todav\u00eda vistas ni men\u00fas de la app. Estructura previa del m\u00f3dulo Suponemos que ya tienes un m\u00f3dulo (p. ej. task_app ) visible en Odoo con el manifest m\u00ednimo. La estructura deber\u00eda incluir al menos: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u2514\u2500 models/ \u2514\u2500 __init__.py Si no existe models/ o alguno de los __init__ , cr\u00e9alos ahora (vac\u00edos). Crear el archivo del modelo Crea el fichero task_app/models/task_model.py con el siguiente contenido: # task_app/models/task_model.py from odoo import fields, models class TaskModel(models.Model): _name = \"task_app.task_model\" _description = \"Task (basic model)\" name = fields.Char(string=\"Name\", required=True, index=True) description = fields.Text(string=\"Description\") is_done = fields.Boolean(string=\"Done\", default=False) Notas: - _name es el nombre t\u00e9cnico del modelo ( task_app.task.model ) \u2192 en PostgreSQL la tabla ser\u00e1 task_app_task_model . - Hemos marcado name como obligatorio y con \u00edndice para b\u00fasquedas \u00e1giles. - Este modelo a\u00fan no tendr\u00e1 vistas ni accesos para usuarios finales; solo lo veremos por el Men\u00fa t\u00e9cnico . Importar el modelo en los __init__ Aseg\u00farate de importar el paquete models en el __init__.py de la ra\u00edz del m\u00f3dulo, y de importar el archivo task_model en el __init__.py de la carpeta models/ . task_app/models/__init__.py from . import task_model Si ya exist\u00edan estas l\u00edneas, no hace falta cambiarlas. Actualizar la app (registrar el nuevo modelo) 4.1. Desde la interfaz Entra a Odoo y activa el Modo desarrollador (Ajustes \u2192 Activar modo desarrollador). Ve a Apps \u2192 Actualizar lista de aplicaciones . Busca tu m\u00f3dulo (p. ej., task_app ) y pulsa Actualizar (o Instalar si a\u00fan no estaba instalado). 4.2. Con Docker (CLI) Si usas dos contenedores ( web con Odoo y db con PostgreSQL), ejecuta (ajusta nombres/base/credenciales a tu entorno): docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' -u task_app actualiza el m\u00f3dulo para que Odoo registre el nuevo modelo. --stop-after-init evita conflictos si el servidor web ya est\u00e1 corriendo en el contenedor. Comprobar el modelo y sus campos en el Men\u00fa t\u00e9cnico Con Modo desarrollador activo, ve a: Ajustes \u2192 T\u00e9cnico \u2192 Modelos y busca task.model . \u00c1brelo y revisa la pesta\u00f1a Campos . Deber\u00edas ver: name (Char, requerido, index) description (Text) is_done (Boolean, por defecto False ) (Opcional) En Ajustes \u2192 T\u00e9cnico \u2192 Modelos \u2192 Campos , filtra por Modelo = task.model para listar sus campos. ![\"Modelo task_model\"](images/createmodel_01.png){width=\"100%\" } ![\"Modelo task_model (campos)\"](images/createmodel_02.png){width=\"100%\" } Modelo task_model Importante: a\u00fan no ver\u00e1s este modelo en men\u00fas de la app ni podr\u00e1s trabajar con \u00e9l desde la UI est\u00e1ndar hasta que creemos vistas (list/form) y acciones/men\u00fas , y definamos accesos en security/ir.model.access.csv . Verificar en PostgreSQL Si tienes acceso a la BD, comprueba que la tabla existe (el nombre lo genera Odoo a partir del modelo, reemplazando . por _ ): -- Tabla esperada: task_app_task_model SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'task_app_task_model' ORDER BY ordinal_position; \ud83d\udcdd Actividades !!! Question \"Crear un modelo\" 1. Crea el modelo task_model con los campos descritos anteriormente","title":"Crear un modelo nuevo task_model en Odoo"},{"location":"apps/createmodel/#crear-un-modelo-nuevo-task_model-en-odoo","text":"Este tutorial crea un modelo ORM llamado task.model con tres campos: - name (Char) \u2014 nombre de la tarea - description (Text) \u2014 descripci\u00f3n - is_done (Boolean) \u2014 si la tarea est\u00e1 realizada Objetivo: que el modelo quede registrado en Odoo y podamos verlo desde el Men\u00fa t\u00e9cnico (modo desarrollador), sin a\u00f1adir todav\u00eda vistas ni men\u00fas de la app.","title":"Crear un modelo nuevo task_model en Odoo"},{"location":"apps/createmodel/#estructura-previa-del-modulo","text":"Suponemos que ya tienes un m\u00f3dulo (p. ej. task_app ) visible en Odoo con el manifest m\u00ednimo. La estructura deber\u00eda incluir al menos: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u2514\u2500 models/ \u2514\u2500 __init__.py Si no existe models/ o alguno de los __init__ , cr\u00e9alos ahora (vac\u00edos).","title":"Estructura previa del m\u00f3dulo"},{"location":"apps/createmodel/#crear-el-archivo-del-modelo","text":"Crea el fichero task_app/models/task_model.py con el siguiente contenido: # task_app/models/task_model.py from odoo import fields, models class TaskModel(models.Model): _name = \"task_app.task_model\" _description = \"Task (basic model)\" name = fields.Char(string=\"Name\", required=True, index=True) description = fields.Text(string=\"Description\") is_done = fields.Boolean(string=\"Done\", default=False) Notas: - _name es el nombre t\u00e9cnico del modelo ( task_app.task.model ) \u2192 en PostgreSQL la tabla ser\u00e1 task_app_task_model . - Hemos marcado name como obligatorio y con \u00edndice para b\u00fasquedas \u00e1giles. - Este modelo a\u00fan no tendr\u00e1 vistas ni accesos para usuarios finales; solo lo veremos por el Men\u00fa t\u00e9cnico .","title":"Crear el archivo del modelo"},{"location":"apps/createmodel/#importar-el-modelo-en-los-__init__","text":"Aseg\u00farate de importar el paquete models en el __init__.py de la ra\u00edz del m\u00f3dulo, y de importar el archivo task_model en el __init__.py de la carpeta models/ . task_app/models/__init__.py from . import task_model Si ya exist\u00edan estas l\u00edneas, no hace falta cambiarlas.","title":"Importar el modelo en los __init__"},{"location":"apps/createmodel/#actualizar-la-app-registrar-el-nuevo-modelo","text":"","title":"Actualizar la app (registrar el nuevo modelo)"},{"location":"apps/createmodel/#41-desde-la-interfaz","text":"Entra a Odoo y activa el Modo desarrollador (Ajustes \u2192 Activar modo desarrollador). Ve a Apps \u2192 Actualizar lista de aplicaciones . Busca tu m\u00f3dulo (p. ej., task_app ) y pulsa Actualizar (o Instalar si a\u00fan no estaba instalado).","title":"4.1. Desde la interfaz"},{"location":"apps/createmodel/#42-con-docker-cli","text":"Si usas dos contenedores ( web con Odoo y db con PostgreSQL), ejecuta (ajusta nombres/base/credenciales a tu entorno): docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' -u task_app actualiza el m\u00f3dulo para que Odoo registre el nuevo modelo. --stop-after-init evita conflictos si el servidor web ya est\u00e1 corriendo en el contenedor.","title":"4.2. Con Docker (CLI)"},{"location":"apps/createmodel/#comprobar-el-modelo-y-sus-campos-en-el-menu-tecnico","text":"Con Modo desarrollador activo, ve a: Ajustes \u2192 T\u00e9cnico \u2192 Modelos y busca task.model . \u00c1brelo y revisa la pesta\u00f1a Campos . Deber\u00edas ver: name (Char, requerido, index) description (Text) is_done (Boolean, por defecto False ) (Opcional) En Ajustes \u2192 T\u00e9cnico \u2192 Modelos \u2192 Campos , filtra por Modelo = task.model para listar sus campos. ![\"Modelo task_model\"](images/createmodel_01.png){width=\"100%\" } ![\"Modelo task_model (campos)\"](images/createmodel_02.png){width=\"100%\" } Modelo task_model Importante: a\u00fan no ver\u00e1s este modelo en men\u00fas de la app ni podr\u00e1s trabajar con \u00e9l desde la UI est\u00e1ndar hasta que creemos vistas (list/form) y acciones/men\u00fas , y definamos accesos en security/ir.model.access.csv .","title":"Comprobar el modelo y sus campos en el Men\u00fa t\u00e9cnico"},{"location":"apps/createmodel/#verificar-en-postgresql","text":"Si tienes acceso a la BD, comprueba que la tabla existe (el nombre lo genera Odoo a partir del modelo, reemplazando . por _ ): -- Tabla esperada: task_app_task_model SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'task_app_task_model' ORDER BY ordinal_position;","title":"Verificar en PostgreSQL"},{"location":"apps/createmodel/#actividades","text":"!!! Question \"Crear un modelo\" 1. Crea el modelo task_model con los campos descritos anteriormente","title":"\ud83d\udcdd Actividades"},{"location":"apps/createviews/","text":"Redefinir las vistas <list> y <form> de task.model (archivo separado) En este paso creamos un archivo de vistas independiente del archivo de men\u00fas/acciones para mantener la estructura limpia: Archivo de men\u00fas/acci\u00f3n : views/task_menus_actions.xml (ya creado en el paso 2). Nuevo archivo de vistas del modelo: views/task_views.xml (lo creamos ahora). Recuerda: en Odoo 18 la vista de lista usa <list> (no <tree> ). Crear views/task_views.xml con las vistas list y form Ruta: task_app/views/task_views.xml <odoo> <!-- Vista LIST para task_model --> <record id=\"view_task_model_list\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_list</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <list string=\"Tasks\" default_order=\"is_done asc, name asc\"> <field name=\"name\"/> <field name=\"is_done\"/> </list> </field> </record> <!-- Vista FORM para task_model --> <record id=\"view_task_model_form\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_form</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <form string=\"Task\"> <sheet> <group> <group> <field name=\"name\"/> <field name=\"is_done\"/> </group> <group> <field name=\"description\"/> </group> </group> </sheet> </form> </field> </record> </odoo> Notas r\u00e1pidas - default_order en <list> ordena primero por is_done y luego por name . - En el <form> usamos dos grupos para separar datos principales y descripci\u00f3n . A\u00f1adir el archivo de vistas al __manifest__.py Edita task_app/__manifest__.py y mant\u00e9n el orden : primero seguridad, luego acciones/men\u00fas y despu\u00e9s (o tambi\u00e9n) las vistas. Puedes poner las vistas al final. \"data\": [ \"security/ir.model.access.csv\", \"views/task_menus_actions.xml\", # acci\u00f3n y men\u00fas (ya creado) \"views/task_views.xml\", # <-- NUEVO: vistas list y form ], Si ten\u00edas data: [] , a\u00f1ade ambas rutas. No listes archivos que no existan. Actualizar el m\u00f3dulo Desde la interfaz Ajustes \u2192 Activar Modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar el m\u00f3dulo task_app . Con Docker (CLI) docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' Verificar que las vistas se han redefinido Abrir men\u00fa : Task App \u2192 Tasks . Ver\u00e1s la lista con columnas name e is_done y el formulario con name , is_done y description en dos grupos. Modo desarrollador \u2192 T\u00e9cnico \u2192 Vistas : Filtra por Modelo = task_model y comprueba que existen: view_task_model_list (tipo list ) view_task_model_form (tipo form ) (Opcional) En T\u00e9cnico \u2192 Acciones de Ventana abre action_task_model y en la pesta\u00f1a Vistas verifica el orden si a\u00f1adiste los enlaces ir.actions.act_window.view . ![\"Vista list/form task_model\"](images/createviews_01.png){width=\"100%\" } Vista list/form `task_model` \ud83d\udcdd Actividad !!! Question \"Crear vistas list/form\" 1. Crea una vista para list y otra para form al modelo task_model 2. Crea otro modelo category_model para que podamos categorizar las tareas. En este modelo tendremos un nombre de categor\u00eda, una descripci\u00f3n y una imagen que represente la categor\u00eda. 3. A\u00f1adir un nuevo campo en el modelo task_model llamado category_id que haga referencia al modelo de categor\u00edas mediante una relaci\u00f3n Many2one . 4. A\u00f1ade los men\u00fas y las vistas que creas necesarias para que se pueda consultar la informaci\u00f3n. ![\"Modelo de categor\u00edas (campos)\"](images/createmodel_03.png){width=\"100%\" } Modelo de Categor\u00edas ![\"Modelo de tareas con el campo Many2one (campos)\"](images/createviews_02.png){width=\"100%\" } Modelo de tareas con el campo Many2one","title":"Redefinir las vistas &lt;list&gt; y &lt;form&gt; de task.model (archivo separado)"},{"location":"apps/createviews/#redefinir-las-vistas-list-y-form-de-taskmodel-archivo-separado","text":"En este paso creamos un archivo de vistas independiente del archivo de men\u00fas/acciones para mantener la estructura limpia: Archivo de men\u00fas/acci\u00f3n : views/task_menus_actions.xml (ya creado en el paso 2). Nuevo archivo de vistas del modelo: views/task_views.xml (lo creamos ahora). Recuerda: en Odoo 18 la vista de lista usa <list> (no <tree> ).","title":"Redefinir las vistas &lt;list&gt; y &lt;form&gt; de task.model (archivo separado)"},{"location":"apps/createviews/#crear-viewstask_viewsxml-con-las-vistas-list-y-form","text":"Ruta: task_app/views/task_views.xml <odoo> <!-- Vista LIST para task_model --> <record id=\"view_task_model_list\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_list</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <list string=\"Tasks\" default_order=\"is_done asc, name asc\"> <field name=\"name\"/> <field name=\"is_done\"/> </list> </field> </record> <!-- Vista FORM para task_model --> <record id=\"view_task_model_form\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_form</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <form string=\"Task\"> <sheet> <group> <group> <field name=\"name\"/> <field name=\"is_done\"/> </group> <group> <field name=\"description\"/> </group> </group> </sheet> </form> </field> </record> </odoo> Notas r\u00e1pidas - default_order en <list> ordena primero por is_done y luego por name . - En el <form> usamos dos grupos para separar datos principales y descripci\u00f3n .","title":"Crear views/task_views.xml con las vistas list y form"},{"location":"apps/createviews/#anadir-el-archivo-de-vistas-al-__manifest__py","text":"Edita task_app/__manifest__.py y mant\u00e9n el orden : primero seguridad, luego acciones/men\u00fas y despu\u00e9s (o tambi\u00e9n) las vistas. Puedes poner las vistas al final. \"data\": [ \"security/ir.model.access.csv\", \"views/task_menus_actions.xml\", # acci\u00f3n y men\u00fas (ya creado) \"views/task_views.xml\", # <-- NUEVO: vistas list y form ], Si ten\u00edas data: [] , a\u00f1ade ambas rutas. No listes archivos que no existan.","title":"A\u00f1adir el archivo de vistas al __manifest__.py"},{"location":"apps/createviews/#actualizar-el-modulo","text":"","title":"Actualizar el m\u00f3dulo"},{"location":"apps/createviews/#desde-la-interfaz","text":"Ajustes \u2192 Activar Modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar el m\u00f3dulo task_app .","title":"Desde la interfaz"},{"location":"apps/createviews/#con-docker-cli","text":"docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init '","title":"Con Docker (CLI)"},{"location":"apps/createviews/#verificar-que-las-vistas-se-han-redefinido","text":"Abrir men\u00fa : Task App \u2192 Tasks . Ver\u00e1s la lista con columnas name e is_done y el formulario con name , is_done y description en dos grupos. Modo desarrollador \u2192 T\u00e9cnico \u2192 Vistas : Filtra por Modelo = task_model y comprueba que existen: view_task_model_list (tipo list ) view_task_model_form (tipo form ) (Opcional) En T\u00e9cnico \u2192 Acciones de Ventana abre action_task_model y en la pesta\u00f1a Vistas verifica el orden si a\u00f1adiste los enlaces ir.actions.act_window.view . ![\"Vista list/form task_model\"](images/createviews_01.png){width=\"100%\" } Vista list/form `task_model`","title":"Verificar que las vistas se han redefinido"},{"location":"apps/createviews/#actividad","text":"!!! Question \"Crear vistas list/form\" 1. Crea una vista para list y otra para form al modelo task_model 2. Crea otro modelo category_model para que podamos categorizar las tareas. En este modelo tendremos un nombre de categor\u00eda, una descripci\u00f3n y una imagen que represente la categor\u00eda. 3. A\u00f1adir un nuevo campo en el modelo task_model llamado category_id que haga referencia al modelo de categor\u00edas mediante una relaci\u00f3n Many2one . 4. A\u00f1ade los men\u00fas y las vistas que creas necesarias para que se pueda consultar la informaci\u00f3n. ![\"Modelo de categor\u00edas (campos)\"](images/createmodel_03.png){width=\"100%\" } Modelo de Categor\u00edas ![\"Modelo de tareas con el campo Many2one (campos)\"](images/createviews_02.png){width=\"100%\" } Modelo de tareas con el campo Many2one","title":"\ud83d\udcdd Actividad"},{"location":"apps/firstapp/","text":"Mi primera app en Odoo Comenzaremos a crear paso a paso un m\u00f3dulo para Odoo usando scaffold , explicando cada carpeta/archivo , c\u00f3mo se conectan entre s\u00ed y buenas pr\u00e1cticas . Tomaremos como hilo conductor una app sencilla de gesti\u00f3n de tareas ( task_app ) inspirada en el manifiesto del repo: Referencia: https://github.com/alapvi/task_app/blob/master/ manifest .py \ud83d\udcda Documentaci\u00f3n oficial Odoo 18 (enlaces clave): - Estructura de m\u00f3dulos y manifiesto: https://www.odoo.com/documentation/18.0/developer/tutorials/getting_started.html#module-structure - ORM / Modelos / Campos / Relaciones: https://www.odoo.com/documentation/18.0/developer/reference/backend/orm.html - Vistas (XML): https://www.odoo.com/documentation/18.0/developer/reference/backend/views.html - Acciones y men\u00fas: https://www.odoo.com/documentation/18.0/developer/reference/backend/actions.html - Seguridad (accesos y reglas): https://www.odoo.com/documentation/18.0/developer/reference/backend/security.html - Datos (XML/CSV, carga de registros): https://www.odoo.com/documentation/18.0/developer/reference/backend/data.html Generar el esqueleto con scaffold (qu\u00e9 crea y por qu\u00e9) cd /opt/odoo18/addons docker exec -it odoo18_web_1 odoo scaffold task_app /mnt/extra-addons Qu\u00e9 genera (estructura m\u00ednima): task_app/ \u251c\u2500 __init__.py # inicializa el paquete Python \u251c\u2500 __manifest__.py # manifiesto del m\u00f3dulo (metadatos) \u251c\u2500 controllers/ # rutas web (HTTP) opcionales \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 controllers.py \u251c\u2500 models/ # modelos ORM (tablas, l\u00f3gica de negocio) \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 models.py \u251c\u2500 views/ # vistas XML (UI) \u2502 \u2514\u2500 templates.xml \u2514\u2500 static/description/ # icono y landing de la app en el lanzador \u251c\u2500 icon.png \u2514\u2500 index.html Por qu\u00e9 esta estructura: Odoo detecta m\u00f3dulos por carpetas Python con __manifest__.py . Separar models/ , views/ , controllers/ refleja el MVC . \ud83d\udd0e Tip: crea carpetas adicionales cuando aporten valor : security/ , data/ , report/ , wizard/ , static/src/ (JS/CSS), i18n/ , tests/ \u2026 Fichero __manifest__.py Archivo obligatorio que describe tu m\u00f3dulo y c\u00f3mo se carga . # -*- coding: utf-8 -*- { 'name': \"task_app\", 'summary': \"Short (1 phrase/line) summary of the module's purpose\", 'description': \"\"\" Long description of module's purpose \"\"\", 'author': \"My Company\", 'website': \"https://www.yourcompany.com\", # Categories can be used to filter modules in modules listing # Check https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml # for the full list 'category': 'Uncategorized', 'version': '0.1', # any module necessary for this one to work correctly 'depends': ['base'], # always loaded 'data': [ # 'security/ir.model.access.csv', 'views/views.xml', 'views/templates.xml', ], # only loaded in demonstration mode 'demo': [ 'demo/demo.xml', ], 'application': True, 'installable': True } Claves: depends : garantiza que los modelos/recursos de otros m\u00f3dulos est\u00e9n disponibles antes de cargar el tuyo. data : orden importa (primero seguridad, luego vistas/men\u00fas/acciones). Versionado recomendado MAJOR.MINOR.PATCH alineado con versi\u00f3n de Odoo. Cambiamos el summary a\u00f1adiendo una breve descripci\u00f3n A\u00f1adimos una descripci\u00f3n m\u00e1s amplia Modificamos el author A\u00f1adimos application y installable Recargar para comprobar que la app aparece Desde la interfaz Entra en Odoo \u2192 Ajustes y activa Modo desarrollador . Ve a Apps \u2192 Actualizar lista de aplicaciones . Quita el filtro \u201cApps\u201d si no la ves y busca Task App . ![\"Instalar app en Odoo\"](images/firstapp_01.png){width=\"90%\" } Instalar app en Odoo Con Docker (CLI) Actualizar lista + instalar (si ya tienes BD creada): docker exec -it odoo18_web_1 sh -lc ' odoo \\ --db_host=db --db_port=5432 \\ --db_user=odoo --db_password=xxxxxxxx \\ --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons \\ -d odoodb -i task_app --stop-after-init ' Solo actualizar el m\u00f3dulo (cuando ya existe): docker exec -it odoo18_web_1 sh -lc ' odoo \\ --db_host=db --db_port=5432 \\ --db_user=odoo --db_password=xxxxxxxx \\ --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons \\ -d odoodb -u task_app --stop-after-init ' \ud83d\udcdd Actividad !!! Question \"Crear una app\" 1. Crea una app llamada task_model y haz su intalaci\u00f3n","title":"Mi primera app en Odoo"},{"location":"apps/firstapp/#mi-primera-app-en-odoo","text":"Comenzaremos a crear paso a paso un m\u00f3dulo para Odoo usando scaffold , explicando cada carpeta/archivo , c\u00f3mo se conectan entre s\u00ed y buenas pr\u00e1cticas . Tomaremos como hilo conductor una app sencilla de gesti\u00f3n de tareas ( task_app ) inspirada en el manifiesto del repo: Referencia: https://github.com/alapvi/task_app/blob/master/ manifest .py \ud83d\udcda Documentaci\u00f3n oficial Odoo 18 (enlaces clave): - Estructura de m\u00f3dulos y manifiesto: https://www.odoo.com/documentation/18.0/developer/tutorials/getting_started.html#module-structure - ORM / Modelos / Campos / Relaciones: https://www.odoo.com/documentation/18.0/developer/reference/backend/orm.html - Vistas (XML): https://www.odoo.com/documentation/18.0/developer/reference/backend/views.html - Acciones y men\u00fas: https://www.odoo.com/documentation/18.0/developer/reference/backend/actions.html - Seguridad (accesos y reglas): https://www.odoo.com/documentation/18.0/developer/reference/backend/security.html - Datos (XML/CSV, carga de registros): https://www.odoo.com/documentation/18.0/developer/reference/backend/data.html","title":"Mi primera app en Odoo"},{"location":"apps/firstapp/#generar-el-esqueleto-con-scaffold-que-crea-y-por-que","text":"cd /opt/odoo18/addons docker exec -it odoo18_web_1 odoo scaffold task_app /mnt/extra-addons Qu\u00e9 genera (estructura m\u00ednima): task_app/ \u251c\u2500 __init__.py # inicializa el paquete Python \u251c\u2500 __manifest__.py # manifiesto del m\u00f3dulo (metadatos) \u251c\u2500 controllers/ # rutas web (HTTP) opcionales \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 controllers.py \u251c\u2500 models/ # modelos ORM (tablas, l\u00f3gica de negocio) \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 models.py \u251c\u2500 views/ # vistas XML (UI) \u2502 \u2514\u2500 templates.xml \u2514\u2500 static/description/ # icono y landing de la app en el lanzador \u251c\u2500 icon.png \u2514\u2500 index.html Por qu\u00e9 esta estructura: Odoo detecta m\u00f3dulos por carpetas Python con __manifest__.py . Separar models/ , views/ , controllers/ refleja el MVC . \ud83d\udd0e Tip: crea carpetas adicionales cuando aporten valor : security/ , data/ , report/ , wizard/ , static/src/ (JS/CSS), i18n/ , tests/ \u2026","title":"Generar el esqueleto con scaffold (qu\u00e9 crea y por qu\u00e9)"},{"location":"apps/firstapp/#fichero-__manifest__py","text":"Archivo obligatorio que describe tu m\u00f3dulo y c\u00f3mo se carga . # -*- coding: utf-8 -*- { 'name': \"task_app\", 'summary': \"Short (1 phrase/line) summary of the module's purpose\", 'description': \"\"\" Long description of module's purpose \"\"\", 'author': \"My Company\", 'website': \"https://www.yourcompany.com\", # Categories can be used to filter modules in modules listing # Check https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml # for the full list 'category': 'Uncategorized', 'version': '0.1', # any module necessary for this one to work correctly 'depends': ['base'], # always loaded 'data': [ # 'security/ir.model.access.csv', 'views/views.xml', 'views/templates.xml', ], # only loaded in demonstration mode 'demo': [ 'demo/demo.xml', ], 'application': True, 'installable': True } Claves: depends : garantiza que los modelos/recursos de otros m\u00f3dulos est\u00e9n disponibles antes de cargar el tuyo. data : orden importa (primero seguridad, luego vistas/men\u00fas/acciones). Versionado recomendado MAJOR.MINOR.PATCH alineado con versi\u00f3n de Odoo. Cambiamos el summary a\u00f1adiendo una breve descripci\u00f3n A\u00f1adimos una descripci\u00f3n m\u00e1s amplia Modificamos el author A\u00f1adimos application y installable","title":"Fichero __manifest__.py"},{"location":"apps/firstapp/#recargar-para-comprobar-que-la-app-aparece","text":"","title":"Recargar para comprobar que la app aparece"},{"location":"apps/firstapp/#desde-la-interfaz","text":"Entra en Odoo \u2192 Ajustes y activa Modo desarrollador . Ve a Apps \u2192 Actualizar lista de aplicaciones . Quita el filtro \u201cApps\u201d si no la ves y busca Task App . ![\"Instalar app en Odoo\"](images/firstapp_01.png){width=\"90%\" } Instalar app en Odoo","title":"Desde la interfaz"},{"location":"apps/firstapp/#con-docker-cli","text":"Actualizar lista + instalar (si ya tienes BD creada): docker exec -it odoo18_web_1 sh -lc ' odoo \\ --db_host=db --db_port=5432 \\ --db_user=odoo --db_password=xxxxxxxx \\ --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons \\ -d odoodb -i task_app --stop-after-init ' Solo actualizar el m\u00f3dulo (cuando ya existe): docker exec -it odoo18_web_1 sh -lc ' odoo \\ --db_host=db --db_port=5432 \\ --db_user=odoo --db_password=xxxxxxxx \\ --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons \\ -d odoodb -u task_app --stop-after-init '","title":"Con Docker (CLI)"},{"location":"apps/firstapp/#actividad","text":"!!! Question \"Crear una app\" 1. Crea una app llamada task_model y haz su intalaci\u00f3n","title":"\ud83d\udcdd Actividad"},{"location":"apps/searchviews/","text":"Crear vista <search> para task_model con filtros \u00fatiles En este paso a\u00f1adiremos una vista de tipo search para task_model con filtros r\u00e1pidos: - Mis tareas : tareas cuyo campo create_uid sea el usuario actual. - Pendientes : tareas con is_done = False . \u2139\ufe0f \u00bfQu\u00e9 es un domain en Odoo? Un domain en Odoo es una lista de condiciones que se utilizan para filtrar registros de un modelo. Su sintaxis b\u00e1sica es: [('campo', 'operador', 'valor')] \ud83d\udccc Referencias oficiales : - Documentaci\u00f3n Odoo \u2014 Dominios - Vista Search y filtros en Odoo Operadores m\u00e1s comunes: Operador Significado = Igual a != Distinto de > < Mayor / Menor >= <= Mayor/menor o igual ilike Contiene (no sensible a may\u00fasculas) in Est\u00e1 en una lista not in No est\u00e1 en una lista Ejemplo simple: [('is_done', '=', False)] Devuelve registros donde is_done es False . Ejemplo con m\u00faltiples condiciones (AND): [('is_done', '=', False), ('create_uid', '=', uid)] Devuelve tareas no realizadas y creadas por el usuario actual. Ejemplo con OR: ['|', ('is_done', '=', False), ('create_uid', '=', uid)] Devuelve tareas pendientes o creadas por el usuario actual . A\u00f1adimos los filtros a views/task_views.xml Ruta: task_app/views/task_views.xml <record id=\"view_task_model_search\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_search</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <search string=\"Search Tasks\"> <!-- Campo por el que se puede buscar --> <field name=\"name\"/> <!-- Filtro: Mis tareas --> <filter name=\"my_tasks\" string=\"Mis tareas\" domain=\"[('create_uid', '=', uid)]\"/> <!-- Filtro: Pendientes --> <filter name=\"pending_tasks\" string=\"Pendientes\" domain=\"[('is_done', '=', False)]\"/> <!-- Agrupaci\u00f3n opcional --> <group expand=\"0\" string=\"Group By\"> <filter name=\"group_by_done\" string=\"Estado\" context=\"{'group_by':'is_done'}\"/> <filter name=\"group_by_creator\" string=\"Creador\" context=\"{'group_by':'create_uid'}\"/> </group> </search> </field> </record> Actualizar el m\u00f3dulo Desde la interfaz Ajustes \u2192 Activar Modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar el m\u00f3dulo task_app . Con Docker (CLI) docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init ' Verificar en la interfaz Abre el men\u00fa Task App \u2192 Tasks . En la barra de b\u00fasqueda ver\u00e1s: Un campo para buscar por nombre. El filtro Mis tareas . El filtro Pendientes . Opciones de agrupaci\u00f3n por Estado y Creador . Prueba combinarlos para filtrar y agrupar la informaci\u00f3n. ![\"Filtros personalizados\"](images/searchviews_01.png){width=\"100%\" } Filtros personalizados Notas uid en el dominio representa el ID del usuario conectado. Los filtros y agrupaciones de <search> son acumulativos con otros filtros aplicados. Puedes a\u00f1adir m\u00e1s filtros espec\u00edficos (por ejemplo, tareas creadas hoy, tareas completadas, etc.). \ud83d\udcdd Actividad !!! Question \"Filtros personalizados\" 1. Crea los filtros personalizados que se han visto anteriormente en el modelo task_model","title":"Crear vista &lt;search&gt; para task_model con filtros \u00fatiles"},{"location":"apps/searchviews/#crear-vista-search-para-task_model-con-filtros-utiles","text":"En este paso a\u00f1adiremos una vista de tipo search para task_model con filtros r\u00e1pidos: - Mis tareas : tareas cuyo campo create_uid sea el usuario actual. - Pendientes : tareas con is_done = False .","title":"Crear vista &lt;search&gt; para task_model con filtros \u00fatiles"},{"location":"apps/searchviews/#i-que-es-un-domain-en-odoo","text":"Un domain en Odoo es una lista de condiciones que se utilizan para filtrar registros de un modelo. Su sintaxis b\u00e1sica es: [('campo', 'operador', 'valor')] \ud83d\udccc Referencias oficiales : - Documentaci\u00f3n Odoo \u2014 Dominios - Vista Search y filtros en Odoo","title":"\u2139\ufe0f \u00bfQu\u00e9 es un domain en Odoo?"},{"location":"apps/searchviews/#operadores-mas-comunes","text":"Operador Significado = Igual a != Distinto de > < Mayor / Menor >= <= Mayor/menor o igual ilike Contiene (no sensible a may\u00fasculas) in Est\u00e1 en una lista not in No est\u00e1 en una lista","title":"Operadores m\u00e1s comunes:"},{"location":"apps/searchviews/#ejemplo-simple","text":"[('is_done', '=', False)] Devuelve registros donde is_done es False .","title":"Ejemplo simple:"},{"location":"apps/searchviews/#ejemplo-con-multiples-condiciones-and","text":"[('is_done', '=', False), ('create_uid', '=', uid)] Devuelve tareas no realizadas y creadas por el usuario actual.","title":"Ejemplo con m\u00faltiples condiciones (AND):"},{"location":"apps/searchviews/#ejemplo-con-or","text":"['|', ('is_done', '=', False), ('create_uid', '=', uid)] Devuelve tareas pendientes o creadas por el usuario actual .","title":"Ejemplo con OR:"},{"location":"apps/searchviews/#anadimos-los-filtros-a-viewstask_viewsxml","text":"Ruta: task_app/views/task_views.xml <record id=\"view_task_model_search\" model=\"ir.ui.view\"> <field name=\"name\">task_app.task_model_search</field> <field name=\"model\">task_app.task_model</field> <field name=\"arch\" type=\"xml\"> <search string=\"Search Tasks\"> <!-- Campo por el que se puede buscar --> <field name=\"name\"/> <!-- Filtro: Mis tareas --> <filter name=\"my_tasks\" string=\"Mis tareas\" domain=\"[('create_uid', '=', uid)]\"/> <!-- Filtro: Pendientes --> <filter name=\"pending_tasks\" string=\"Pendientes\" domain=\"[('is_done', '=', False)]\"/> <!-- Agrupaci\u00f3n opcional --> <group expand=\"0\" string=\"Group By\"> <filter name=\"group_by_done\" string=\"Estado\" context=\"{'group_by':'is_done'}\"/> <filter name=\"group_by_creator\" string=\"Creador\" context=\"{'group_by':'create_uid'}\"/> </group> </search> </field> </record>","title":"A\u00f1adimos los filtros a views/task_views.xml"},{"location":"apps/searchviews/#actualizar-el-modulo","text":"","title":"Actualizar el m\u00f3dulo"},{"location":"apps/searchviews/#desde-la-interfaz","text":"Ajustes \u2192 Activar Modo desarrollador . Apps \u2192 Actualizar lista de aplicaciones . Actualizar el m\u00f3dulo task_app .","title":"Desde la interfaz"},{"location":"apps/searchviews/#con-docker-cli","text":"docker exec -it odoo18_web_1 sh -lc ' odoo --db_host=db --db_port=5432 --db_user=odoo --db_password=\"$(cat /run/secrets/postgresql_password)\" --addons-path=/usr/lib/python3/dist-packages/odoo/addons,/mnt/extra-addons -d odoodb -u task_app --stop-after-init '","title":"Con Docker (CLI)"},{"location":"apps/searchviews/#verificar-en-la-interfaz","text":"Abre el men\u00fa Task App \u2192 Tasks . En la barra de b\u00fasqueda ver\u00e1s: Un campo para buscar por nombre. El filtro Mis tareas . El filtro Pendientes . Opciones de agrupaci\u00f3n por Estado y Creador . Prueba combinarlos para filtrar y agrupar la informaci\u00f3n. ![\"Filtros personalizados\"](images/searchviews_01.png){width=\"100%\" } Filtros personalizados","title":"Verificar en la interfaz"},{"location":"apps/searchviews/#notas","text":"uid en el dominio representa el ID del usuario conectado. Los filtros y agrupaciones de <search> son acumulativos con otros filtros aplicados. Puedes a\u00f1adir m\u00e1s filtros espec\u00edficos (por ejemplo, tareas creadas hoy, tareas completadas, etc.).","title":"Notas"},{"location":"apps/searchviews/#actividad","text":"!!! Question \"Filtros personalizados\" 1. Crea los filtros personalizados que se han visto anteriormente en el modelo task_model","title":"\ud83d\udcdd Actividad"},{"location":"infodatos/accesopsql/","text":"\ud83d\udcc2 Acceso a la Base de Datos PostgreSQL Vamos a ver c\u00f3mo acceder a la base de datos PostgreSQL usada por Odoo cuando se ejecuta en un contenedor Docker, c\u00f3mo configurar pg_hba.conf , y c\u00f3mo explorar las tablas m\u00e1s importantes. \ud83d\udc33 Acceso a PostgreSQL en un contenedor Docker Si tienes Odoo y PostgreSQL ejecut\u00e1ndose en contenedores separados, el acceso a la base de datos se hace conect\u00e1ndote directamente al contenedor de PostgreSQL. \ud83d\udd27 Conexi\u00f3n al contenedor de PostgreSQL docker exec -it nombre_contenedor_postgres bash psql -U odoo -d nombre_base_datos nombre_contenedor_postgres \u2192 Nombre del contenedor PostgreSQL. odoo \u2192 Usuario de base de datos por defecto creado por la imagen Docker. nombre_base_datos \u2192 Nombre de la base de datos de tu instancia Odoo. Ejemplo para listar todas las bases de datos: psql -U odoo -l ![\"Listado de BD en PostgreSQL\"](images/accesoPSQL_01.png){width=\"100%\" } Listado de BD en PostgreSQL \u2699\ufe0f Configuraci\u00f3n del fichero pg_hba.conf El archivo pg_hba.conf (ubicado normalmente en /var/lib/postgresql/data/pgdata/ ) controla qu\u00e9 usuarios pueden conectarse, desde qu\u00e9 direcciones y con qu\u00e9 m\u00e9todos de autenticaci\u00f3n . Formato general de las entradas: # TYPE DATABASE USER ADDRESS METHOD host all all 0.0.0.0/0 md5 ![\"Configuraci\u00f3n a PostgreSQL\"](images/accesoPSQL_02.png){width=\"100%\" } Configurar acceso a PostgreSQL TYPE \u2192 local (socket UNIX) o host (TCP/IP). DATABASE \u2192 Base de datos espec\u00edfica o all para todas. USER \u2192 Usuario permitido. ADDRESS \u2192 IP o rango permitido (ej. 192.168.1.0/24 ). METHOD \u2192 M\u00e9todo de autenticaci\u00f3n ( trust , md5 , scram-sha-256 \u2026). \ud83d\udca1 Para permitir conexiones remotas, cambia listen_addresses en postgresql.conf a: listen_addresses = '*' Y en pg_hba.conf , a\u00f1ade: host all all 0.0.0.0/0 md5 ![\"Configuraci\u00f3n acceso a PostgreSQL\"](images/accesoPSQL_03.png){width=\"100%\" } Configurar acceso remoto a PostgreSQL \u26a0\ufe0f Recuerda reiniciar PostgreSQL tras cambios: docker restart nombre_contenedor_postgres \ud83d\udcbb Iniciar shell de psql Dentro del contenedor PostgreSQL, abre la shell con: psql -h <servidor-postgresql> -p <port> -U odoo -d nombre_base_datos Para salir de la shell de psql : \\q \ud83d\udcdc Comandos b\u00e1sicos de psql Comando Descripci\u00f3n \\l Lista todas las bases de datos \\c nombre_db Conectarse a una base de datos \\dt Lista las tablas disponibles \\d nombre_tabla Muestra estructura de una tabla \\q Salir de psql SELECT version(); Mostrar versi\u00f3n de PostgreSQL \ud83d\udcc2 Acceso a la base de datos de Odoo La base de datos de Odoo contiene todas las tablas que representan modelos de negocio. Ejemplo de conexi\u00f3n directa: psql -U odoo -d miempresa \ud83d\udd0d Tablas m\u00e1s importantes en Odoo Tabla Descripci\u00f3n res_users Usuarios del sistema res_partner Contactos, clientes y proveedores sale_order Pedidos de venta purchase_order Pedidos de compra account_move Facturas y asientos contables product_template Informaci\u00f3n de productos ir_model Modelos internos de Odoo ir_module_module M\u00f3dulos instalados \ud83d\udccc Ejemplos de consultas Listar los primeros 5 usuarios: SELECT id, login, active FROM res_users LIMIT 5; Listar clientes: SELECT id, name, email FROM res_partner LIMIT 10; \ud83d\udda5\ufe0f Conexi\u00f3n a PostgreSQL desde Visual Studio Code Puedes conectarte a la base de datos de Odoo usando Visual Studio Code con la extensi\u00f3n oficial de PostgreSQL. 1\ufe0f\u20e3 Instalar la extensi\u00f3n Abre Visual Studio Code . Ve a la vista de extensiones ( Ctrl+Shift+X o Cmd+Shift+X en Mac). Busca PostgreSQL e instala la extensi\u00f3n oficial de Microsoft. 2\ufe0f\u20e3 Obtener credenciales de conexi\u00f3n En un entorno Docker t\u00edpico con Odoo y PostgreSQL: - Servidor/Host : nombre del contenedor PostgreSQL o localhost si expones el puerto. - Puerto : 5432 (por defecto). - Usuario : odoo . - Contrase\u00f1a : la definida en la variable POSTGRES_PASSWORD de tu docker-compose.yml . - Base de datos : nombre de tu base de datos Odoo (por ejemplo, miempresa ). Si no conoces la contrase\u00f1a, puedes verla con: docker inspect nombre_contenedor_postgres | grep POSTGRES_PASSWORD 3\ufe0f\u20e3 Configurar conexi\u00f3n en VS Code Presiona Ctrl+Shift+P y escribe PostgreSQL: New Connection . Introduce los par\u00e1metros: Server name : localhost o nombre del contenedor. Database name : miempresa . User name : odoo . Password : tu contrase\u00f1a. Port : 5432 . Guarda la conexi\u00f3n para acceder r\u00e1pidamente. 4\ufe0f\u20e3 Ejemplo de conexi\u00f3n desde VS Code Si tienes PostgreSQL expuesto en localhost:5432 y tu usuario/contrase\u00f1a es odoo/odoo123 : Server: localhost Database: miempresa User: odoo Password: xxxxxx Port: 5432 ![\"Acceso a PostgreSQL desde vscode\"](images/accesoPSQL_04.png){width=\"50%\" } Acceso a PostgreSQL desde vscode 5\ufe0f\u20e3 Consultas r\u00e1pidas desde VS Code Una vez conectado, puedes abrir un archivo .sql y ejecutar consultas con la extensi\u00f3n. Ejemplos: SELECT id, login FROM res_users; SELECT name, email FROM res_partner; La extensi\u00f3n permite: - Navegar por tablas y esquemas. - Exportar resultados. - Ejecutar scripts SQL completos. \ud83d\udcda Recursos \u00fatiles : - Documentaci\u00f3n oficial de PostgreSQL - Documentaci\u00f3n de Odoo \ud83d\udcd8 Actividad !!! Question \"Acceso a PostgreSQL\" - Actividad 1: Accede a postgreSQL a trav\u00e9s de la consola. - Actividad 2: Instala la extensi\u00f3n PostgreSQL en vscode y configura el acceso a la BD.","title":"\ud83d\udcc2 Acceso a la Base de Datos PostgreSQL"},{"location":"infodatos/accesopsql/#acceso-a-la-base-de-datos-postgresql","text":"Vamos a ver c\u00f3mo acceder a la base de datos PostgreSQL usada por Odoo cuando se ejecuta en un contenedor Docker, c\u00f3mo configurar pg_hba.conf , y c\u00f3mo explorar las tablas m\u00e1s importantes.","title":"\ud83d\udcc2 Acceso a la Base de Datos PostgreSQL"},{"location":"infodatos/accesopsql/#acceso-a-postgresql-en-un-contenedor-docker","text":"Si tienes Odoo y PostgreSQL ejecut\u00e1ndose en contenedores separados, el acceso a la base de datos se hace conect\u00e1ndote directamente al contenedor de PostgreSQL.","title":"\ud83d\udc33 Acceso a PostgreSQL en un contenedor Docker"},{"location":"infodatos/accesopsql/#conexion-al-contenedor-de-postgresql","text":"docker exec -it nombre_contenedor_postgres bash psql -U odoo -d nombre_base_datos nombre_contenedor_postgres \u2192 Nombre del contenedor PostgreSQL. odoo \u2192 Usuario de base de datos por defecto creado por la imagen Docker. nombre_base_datos \u2192 Nombre de la base de datos de tu instancia Odoo. Ejemplo para listar todas las bases de datos: psql -U odoo -l ![\"Listado de BD en PostgreSQL\"](images/accesoPSQL_01.png){width=\"100%\" } Listado de BD en PostgreSQL","title":"\ud83d\udd27 Conexi\u00f3n al contenedor de PostgreSQL"},{"location":"infodatos/accesopsql/#configuracion-del-fichero-pg_hbaconf","text":"El archivo pg_hba.conf (ubicado normalmente en /var/lib/postgresql/data/pgdata/ ) controla qu\u00e9 usuarios pueden conectarse, desde qu\u00e9 direcciones y con qu\u00e9 m\u00e9todos de autenticaci\u00f3n . Formato general de las entradas: # TYPE DATABASE USER ADDRESS METHOD host all all 0.0.0.0/0 md5 ![\"Configuraci\u00f3n a PostgreSQL\"](images/accesoPSQL_02.png){width=\"100%\" } Configurar acceso a PostgreSQL TYPE \u2192 local (socket UNIX) o host (TCP/IP). DATABASE \u2192 Base de datos espec\u00edfica o all para todas. USER \u2192 Usuario permitido. ADDRESS \u2192 IP o rango permitido (ej. 192.168.1.0/24 ). METHOD \u2192 M\u00e9todo de autenticaci\u00f3n ( trust , md5 , scram-sha-256 \u2026). \ud83d\udca1 Para permitir conexiones remotas, cambia listen_addresses en postgresql.conf a: listen_addresses = '*' Y en pg_hba.conf , a\u00f1ade: host all all 0.0.0.0/0 md5 ![\"Configuraci\u00f3n acceso a PostgreSQL\"](images/accesoPSQL_03.png){width=\"100%\" } Configurar acceso remoto a PostgreSQL \u26a0\ufe0f Recuerda reiniciar PostgreSQL tras cambios: docker restart nombre_contenedor_postgres","title":"\u2699\ufe0f Configuraci\u00f3n del fichero pg_hba.conf"},{"location":"infodatos/accesopsql/#iniciar-shell-de-psql","text":"Dentro del contenedor PostgreSQL, abre la shell con: psql -h <servidor-postgresql> -p <port> -U odoo -d nombre_base_datos Para salir de la shell de psql : \\q","title":"\ud83d\udcbb Iniciar shell de psql"},{"location":"infodatos/accesopsql/#comandos-basicos-de-psql","text":"Comando Descripci\u00f3n \\l Lista todas las bases de datos \\c nombre_db Conectarse a una base de datos \\dt Lista las tablas disponibles \\d nombre_tabla Muestra estructura de una tabla \\q Salir de psql SELECT version(); Mostrar versi\u00f3n de PostgreSQL","title":"\ud83d\udcdc Comandos b\u00e1sicos de psql"},{"location":"infodatos/accesopsql/#acceso-a-la-base-de-datos-de-odoo","text":"La base de datos de Odoo contiene todas las tablas que representan modelos de negocio. Ejemplo de conexi\u00f3n directa: psql -U odoo -d miempresa","title":"\ud83d\udcc2 Acceso a la base de datos de Odoo"},{"location":"infodatos/accesopsql/#tablas-mas-importantes-en-odoo","text":"Tabla Descripci\u00f3n res_users Usuarios del sistema res_partner Contactos, clientes y proveedores sale_order Pedidos de venta purchase_order Pedidos de compra account_move Facturas y asientos contables product_template Informaci\u00f3n de productos ir_model Modelos internos de Odoo ir_module_module M\u00f3dulos instalados","title":"\ud83d\udd0d Tablas m\u00e1s importantes en Odoo"},{"location":"infodatos/accesopsql/#ejemplos-de-consultas","text":"Listar los primeros 5 usuarios: SELECT id, login, active FROM res_users LIMIT 5; Listar clientes: SELECT id, name, email FROM res_partner LIMIT 10;","title":"\ud83d\udccc Ejemplos de consultas"},{"location":"infodatos/accesopsql/#conexion-a-postgresql-desde-visual-studio-code","text":"Puedes conectarte a la base de datos de Odoo usando Visual Studio Code con la extensi\u00f3n oficial de PostgreSQL.","title":"\ud83d\udda5\ufe0f Conexi\u00f3n a PostgreSQL desde Visual Studio Code"},{"location":"infodatos/accesopsql/#1-instalar-la-extension","text":"Abre Visual Studio Code . Ve a la vista de extensiones ( Ctrl+Shift+X o Cmd+Shift+X en Mac). Busca PostgreSQL e instala la extensi\u00f3n oficial de Microsoft.","title":"1\ufe0f\u20e3 Instalar la extensi\u00f3n"},{"location":"infodatos/accesopsql/#2-obtener-credenciales-de-conexion","text":"En un entorno Docker t\u00edpico con Odoo y PostgreSQL: - Servidor/Host : nombre del contenedor PostgreSQL o localhost si expones el puerto. - Puerto : 5432 (por defecto). - Usuario : odoo . - Contrase\u00f1a : la definida en la variable POSTGRES_PASSWORD de tu docker-compose.yml . - Base de datos : nombre de tu base de datos Odoo (por ejemplo, miempresa ). Si no conoces la contrase\u00f1a, puedes verla con: docker inspect nombre_contenedor_postgres | grep POSTGRES_PASSWORD","title":"2\ufe0f\u20e3 Obtener credenciales de conexi\u00f3n"},{"location":"infodatos/accesopsql/#3-configurar-conexion-en-vs-code","text":"Presiona Ctrl+Shift+P y escribe PostgreSQL: New Connection . Introduce los par\u00e1metros: Server name : localhost o nombre del contenedor. Database name : miempresa . User name : odoo . Password : tu contrase\u00f1a. Port : 5432 . Guarda la conexi\u00f3n para acceder r\u00e1pidamente.","title":"3\ufe0f\u20e3 Configurar conexi\u00f3n en VS Code"},{"location":"infodatos/accesopsql/#4-ejemplo-de-conexion-desde-vs-code","text":"Si tienes PostgreSQL expuesto en localhost:5432 y tu usuario/contrase\u00f1a es odoo/odoo123 : Server: localhost Database: miempresa User: odoo Password: xxxxxx Port: 5432 ![\"Acceso a PostgreSQL desde vscode\"](images/accesoPSQL_04.png){width=\"50%\" } Acceso a PostgreSQL desde vscode","title":"4\ufe0f\u20e3 Ejemplo de conexi\u00f3n desde VS Code"},{"location":"infodatos/accesopsql/#5-consultas-rapidas-desde-vs-code","text":"Una vez conectado, puedes abrir un archivo .sql y ejecutar consultas con la extensi\u00f3n. Ejemplos: SELECT id, login FROM res_users; SELECT name, email FROM res_partner; La extensi\u00f3n permite: - Navegar por tablas y esquemas. - Exportar resultados. - Ejecutar scripts SQL completos. \ud83d\udcda Recursos \u00fatiles : - Documentaci\u00f3n oficial de PostgreSQL - Documentaci\u00f3n de Odoo","title":"5\ufe0f\u20e3 Consultas r\u00e1pidas desde VS Code"},{"location":"infodatos/accesopsql/#actividad","text":"!!! Question \"Acceso a PostgreSQL\" - Actividad 1: Accede a postgreSQL a trav\u00e9s de la consola. - Actividad 2: Instala la extensi\u00f3n PostgreSQL en vscode y configura el acceso a la BD.","title":"\ud83d\udcd8 Actividad"},{"location":"infodatos/datosodoo/","text":"\ud83d\udcda Relaci\u00f3n de tablas y modelos en Odoo Vamos a ver c\u00f3mo Odoo traduce los modelos definidos en Python a tablas en PostgreSQL , con ejemplos visuales y actividades pr\u00e1cticas. Formato de nombres de tablas en Odoo En Odoo, los modelos se definen en Python con la convenci\u00f3n nombre.modulo . Ejemplo: class ResPartner(models.Model): _name = 'res.partner' En PostgreSQL, estos nombres se transforman a snake_case con guiones bajos: Modelo Odoo Tabla PostgreSQL res.partner res_partner sale.order sale_order account.move account_move \ud83d\udccc Reglas de conversi\u00f3n : Punto ( . ) en el modelo \u2192 guion bajo ( _ ) en la tabla. Campos Many2one \u2192 columna con sufijo _id . Tablas Many2many \u2192 formato: modelo1_modelo2_rel Ejemplo: sale_order_res_partner_rel . Relaci\u00f3n tablas \u2194 modelos \u2194 apps Cada tabla est\u00e1 asociada a un modelo en Odoo, y cada modelo pertenece a una app o m\u00f3dulo. Tabla Modelo App Descripci\u00f3n res_users res.users Base Usuarios internos res_partner res.partner Base / CRM Contactos/clientes sale_order sale.order Ventas Pedidos de venta account_move account.move Contabilidad Facturas/asientos stock_picking stock.picking Inventario Movimientos stock project_task project.task Proyectos Tareas de proyectos Ejemplo: creaci\u00f3n y consulta de un usuario Paso 1: Crear usuario en Odoo Inicia sesi\u00f3n como administrador. Ajustes \u2192 Usuarios y Compa\u00f1\u00edas \u2192 Usuarios . Nuevo : Nombre: Alberto Aparicio Correo: alberto@simarro.local Rol: Usuario interno Guardar . ![\"Crear usuario en Odoo\"](images/accesoDatos01.png){width=\"100%\" } Crear usuario en Odoo Paso 2: Consultar en PostgreSQL -- Buscar en res_users (credenciales) SELECT id, login, active FROM res_users WHERE login = 'alberto@simarro.local'; -- Buscar en res_partner (datos de contacto) SELECT id, name, email FROM res_partner WHERE email = 'alberto@simarro.local'; \ud83d\udca1 Nota : res_users.partner_id apunta al registro en res_partner . URLs del backend y su relaci\u00f3n con las tablas Formato cl\u00e1sico (Odoo <= 17) En versiones anteriores, las URLs usaban el formato con hash y par\u00e1metros, por ejemplo: /web#id=45&model=sale.order&view_type=form \ud83d\udccc Significa: - id=45 \u2192 ID del registro. - model=sale.order \u2192 Modelo Odoo \u2192 Tabla sale_order . Consulta equivalente en PostgreSQL: SELECT * FROM sale_order WHERE id = 45; M\u00e1s informaci\u00f3n: Documentaci\u00f3n de vistas y acciones en Odoo . Formato nuevo (Odoo 18) A partir de Odoo 18 , el cliente web utiliza rutas limpias basadas en path, por ejemplo: http://localhost:8069/odoo/contacts/7 o http://localhost:8069/odoo/sales/45 Ventajas: - M\u00e1s legibles para el usuario. - Mejor indexaci\u00f3n para integraciones externas. El slug ( contacts , sales , accounting , etc.) depende del m\u00f3dulo o vista. Compatibilidad En muchos casos, si escribes la URL antigua ( /web#id=...&model=... ) Odoo 18 redirige autom\u00e1ticamente al formato nuevo. No todos los par\u00e1metros antiguos se preservan (por ejemplo, menu_id , view_type ). Mapeo b\u00e1sico (antiguo \u2192 nuevo) Antiguo Nuevo model=res.partner&id=7 /odoo/contacts/7 model=sale.order&id=45 /odoo/sales/45 model=account.move&id=102 /odoo/accounting/102 El slug puede variar seg\u00fan la vista desde la que se accede al registro. Cuando accedes a un registro en Odoo, la URL muestra datos clave: /web#id=45&model=sale.order&view_type=form \ud83d\udccc Significa: - id=45 \u2192 ID del registro. - model=sale.order \u2192 Modelo Odoo \u2192 Tabla sale_order . Consulta equivalente: SELECT * FROM sale_order WHERE id = 45; M\u00e1s informaci\u00f3n: Documentaci\u00f3n de vistas y acciones en Odoo . Consultas SQL \u00fatiles \u00daltimos 5 usuarios creados : SELECT id, login, create_date FROM res_users ORDER BY create_date DESC LIMIT 5; Pedidos de venta con cliente : SELECT so.id, so.name AS pedido, rp.name AS cliente FROM sale_order so JOIN res_partner rp ON so.partner_id = rp.id ORDER BY so.date_order DESC LIMIT 10; \ud83d\udccc Actividades Actividad 1: Relaci\u00f3n modelo-tabla En Odoo, las reglas de conversi\u00f3n de modelo a tabla siguen siendo las mismas que en versiones anteriores. Dado el siguiente modelo Odoo: Dado el siguiente modelo Odoo: class StockMove(models.Model): _name = 'stock.move' \u00bfC\u00f3mo se llamar\u00e1 la tabla en PostgreSQL? Si tiene un campo Many2one llamado product_id , \u00bfc\u00f3mo aparecer\u00e1 en la tabla? Actividad 2: An\u00e1lisis de URL Analiza las siguientes URLs que apuntan al mismo registro: Formato cl\u00e1sico (Odoo <= 17): /web#id=102&model=account.move&view_type=form Formato nuevo (Odoo 18): /odoo/accounting/102 \u00bfQu\u00e9 modelo est\u00e1 mostrando? \u00bfQu\u00e9 tabla de PostgreSQL se consulta? Escribe la consulta SQL para obtener el registro. Explica qu\u00e9 parte de la URL nueva ( /odoo/accounting/102 ) corresponde al slug de la app y cu\u00e1l al ID del registro. \u00bfQu\u00e9 ocurrir\u00eda si en Odoo 18 introduces directamente la URL cl\u00e1sica en el navegador?","title":"\ud83d\udcda Relaci\u00f3n de tablas y modelos en Odoo"},{"location":"infodatos/datosodoo/#relacion-de-tablas-y-modelos-en-odoo","text":"Vamos a ver c\u00f3mo Odoo traduce los modelos definidos en Python a tablas en PostgreSQL , con ejemplos visuales y actividades pr\u00e1cticas.","title":"\ud83d\udcda Relaci\u00f3n de tablas y modelos en Odoo"},{"location":"infodatos/datosodoo/#formato-de-nombres-de-tablas-en-odoo","text":"En Odoo, los modelos se definen en Python con la convenci\u00f3n nombre.modulo . Ejemplo: class ResPartner(models.Model): _name = 'res.partner' En PostgreSQL, estos nombres se transforman a snake_case con guiones bajos: Modelo Odoo Tabla PostgreSQL res.partner res_partner sale.order sale_order account.move account_move \ud83d\udccc Reglas de conversi\u00f3n : Punto ( . ) en el modelo \u2192 guion bajo ( _ ) en la tabla. Campos Many2one \u2192 columna con sufijo _id . Tablas Many2many \u2192 formato: modelo1_modelo2_rel Ejemplo: sale_order_res_partner_rel .","title":"Formato de nombres de tablas en Odoo"},{"location":"infodatos/datosodoo/#relacion-tablas-modelos-apps","text":"Cada tabla est\u00e1 asociada a un modelo en Odoo, y cada modelo pertenece a una app o m\u00f3dulo. Tabla Modelo App Descripci\u00f3n res_users res.users Base Usuarios internos res_partner res.partner Base / CRM Contactos/clientes sale_order sale.order Ventas Pedidos de venta account_move account.move Contabilidad Facturas/asientos stock_picking stock.picking Inventario Movimientos stock project_task project.task Proyectos Tareas de proyectos","title":"Relaci\u00f3n tablas \u2194 modelos \u2194 apps"},{"location":"infodatos/datosodoo/#ejemplo-creacion-y-consulta-de-un-usuario","text":"","title":"Ejemplo: creaci\u00f3n y consulta de un usuario"},{"location":"infodatos/datosodoo/#paso-1-crear-usuario-en-odoo","text":"Inicia sesi\u00f3n como administrador. Ajustes \u2192 Usuarios y Compa\u00f1\u00edas \u2192 Usuarios . Nuevo : Nombre: Alberto Aparicio Correo: alberto@simarro.local Rol: Usuario interno Guardar . ![\"Crear usuario en Odoo\"](images/accesoDatos01.png){width=\"100%\" } Crear usuario en Odoo","title":"Paso 1: Crear usuario en Odoo"},{"location":"infodatos/datosodoo/#paso-2-consultar-en-postgresql","text":"-- Buscar en res_users (credenciales) SELECT id, login, active FROM res_users WHERE login = 'alberto@simarro.local'; -- Buscar en res_partner (datos de contacto) SELECT id, name, email FROM res_partner WHERE email = 'alberto@simarro.local'; \ud83d\udca1 Nota : res_users.partner_id apunta al registro en res_partner .","title":"Paso 2: Consultar en PostgreSQL"},{"location":"infodatos/datosodoo/#urls-del-backend-y-su-relacion-con-las-tablas","text":"","title":"URLs del backend y su relaci\u00f3n con las tablas"},{"location":"infodatos/datosodoo/#formato-clasico-odoo-17","text":"En versiones anteriores, las URLs usaban el formato con hash y par\u00e1metros, por ejemplo: /web#id=45&model=sale.order&view_type=form \ud83d\udccc Significa: - id=45 \u2192 ID del registro. - model=sale.order \u2192 Modelo Odoo \u2192 Tabla sale_order . Consulta equivalente en PostgreSQL: SELECT * FROM sale_order WHERE id = 45; M\u00e1s informaci\u00f3n: Documentaci\u00f3n de vistas y acciones en Odoo .","title":"Formato cl\u00e1sico (Odoo &lt;= 17)"},{"location":"infodatos/datosodoo/#formato-nuevo-odoo-18","text":"A partir de Odoo 18 , el cliente web utiliza rutas limpias basadas en path, por ejemplo: http://localhost:8069/odoo/contacts/7 o http://localhost:8069/odoo/sales/45 Ventajas: - M\u00e1s legibles para el usuario. - Mejor indexaci\u00f3n para integraciones externas. El slug ( contacts , sales , accounting , etc.) depende del m\u00f3dulo o vista.","title":"Formato nuevo (Odoo 18)"},{"location":"infodatos/datosodoo/#compatibilidad","text":"En muchos casos, si escribes la URL antigua ( /web#id=...&model=... ) Odoo 18 redirige autom\u00e1ticamente al formato nuevo. No todos los par\u00e1metros antiguos se preservan (por ejemplo, menu_id , view_type ).","title":"Compatibilidad"},{"location":"infodatos/datosodoo/#mapeo-basico-antiguo-nuevo","text":"Antiguo Nuevo model=res.partner&id=7 /odoo/contacts/7 model=sale.order&id=45 /odoo/sales/45 model=account.move&id=102 /odoo/accounting/102 El slug puede variar seg\u00fan la vista desde la que se accede al registro. Cuando accedes a un registro en Odoo, la URL muestra datos clave: /web#id=45&model=sale.order&view_type=form \ud83d\udccc Significa: - id=45 \u2192 ID del registro. - model=sale.order \u2192 Modelo Odoo \u2192 Tabla sale_order . Consulta equivalente: SELECT * FROM sale_order WHERE id = 45; M\u00e1s informaci\u00f3n: Documentaci\u00f3n de vistas y acciones en Odoo .","title":"Mapeo b\u00e1sico (antiguo \u2192 nuevo)"},{"location":"infodatos/datosodoo/#consultas-sql-utiles","text":"\u00daltimos 5 usuarios creados : SELECT id, login, create_date FROM res_users ORDER BY create_date DESC LIMIT 5; Pedidos de venta con cliente : SELECT so.id, so.name AS pedido, rp.name AS cliente FROM sale_order so JOIN res_partner rp ON so.partner_id = rp.id ORDER BY so.date_order DESC LIMIT 10;","title":"Consultas SQL \u00fatiles"},{"location":"infodatos/datosodoo/#actividades","text":"","title":"\ud83d\udccc Actividades"},{"location":"infodatos/datosodoo/#actividad-1-relacion-modelo-tabla","text":"En Odoo, las reglas de conversi\u00f3n de modelo a tabla siguen siendo las mismas que en versiones anteriores. Dado el siguiente modelo Odoo: Dado el siguiente modelo Odoo: class StockMove(models.Model): _name = 'stock.move' \u00bfC\u00f3mo se llamar\u00e1 la tabla en PostgreSQL? Si tiene un campo Many2one llamado product_id , \u00bfc\u00f3mo aparecer\u00e1 en la tabla?","title":"Actividad 1: Relaci\u00f3n modelo-tabla"},{"location":"infodatos/datosodoo/#actividad-2-analisis-de-url","text":"Analiza las siguientes URLs que apuntan al mismo registro: Formato cl\u00e1sico (Odoo <= 17): /web#id=102&model=account.move&view_type=form Formato nuevo (Odoo 18): /odoo/accounting/102 \u00bfQu\u00e9 modelo est\u00e1 mostrando? \u00bfQu\u00e9 tabla de PostgreSQL se consulta? Escribe la consulta SQL para obtener el registro. Explica qu\u00e9 parte de la URL nueva ( /odoo/accounting/102 ) corresponde al slug de la app y cu\u00e1l al ID del registro. \u00bfQu\u00e9 ocurrir\u00eda si en Odoo 18 introduces directamente la URL cl\u00e1sica en el navegador?","title":"Actividad 2: An\u00e1lisis de URL"},{"location":"infodatos/webymvc/","text":"\ud83c\udf10 Interfaz web en Odoo 18 y patr\u00f3n MVC En este apartado vamos a ver c\u00f3mo funciona la interfaz web de Odoo, su arquitectura MVC , los tipos de vistas, la definici\u00f3n de acciones y c\u00f3mo inspeccionar modelos con el modo desarrollador . Odoo y el patr\u00f3n MVC Odoo sigue una arquitectura MVC (Modelo\u2013Vista\u2013Controlador) adaptada a su framework propio. Modelo (Model) Definido en Python en la carpeta models/ de un m\u00f3dulo. Corresponde a una tabla en PostgreSQL (ej. modelo res.partner \u2192 tabla res_partner ). Contiene la l\u00f3gica de negocio y la estructura de datos (campos, relaciones, restricciones, m\u00e9todos). Vista (View) Definida en archivos XML en la carpeta views/ de un m\u00f3dulo. Describe c\u00f3mo se muestran los datos del modelo: formularios, listas, kanban, calendarios, etc. Controlador (Controller) Definido en Python en la carpeta controllers/ . Gestiona la l\u00f3gica de las rutas web, APIs, control de flujos y l\u00f3gica de backend para la interfaz. Estructura de una app en Odoo: app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u251c\u2500 controllers/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 controllers.py # Controladores web (C del MVC) \u251c\u2500 models/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 models.py # Modelos ORM (M del MVC) \u251c\u2500 views/ \u2502 \u2514\u2500 templates.xml # Vistas/plantillas (V del MVC, QWeb/XML) \u2514\u2500 static/ \u2514\u2500 description/ \u251c\u2500 icon.png \u2514\u2500 index.html Tipos de vistas en Odoo En Odoo, cada vista se define como un elemento XML ( <form> , <list> , <kanban> , <calendar> , etc.) vinculado a un modelo. Tipo Etiqueta XML Descripci\u00f3n Lista <list> Vista tabular de varios registros Formulario <form> Vista detallada de un solo registro Kanban <kanban> Vista en tarjetas con columnas (flujo visual) Calendario <calendar> Vista de eventos/fechas Gr\u00e1fico <graph> Visualizaci\u00f3n de datos en gr\u00e1ficos Pivot <pivot> An\u00e1lisis din\u00e1mico con tablas din\u00e1micas Gantt <gantt> Gesti\u00f3n visual de proyectos y tareas Mapa <map> Ubicaci\u00f3n geogr\u00e1fica de registros Men\u00fas y navegaci\u00f3n Los men\u00fas de Odoo tambi\u00e9n se definen en XML con <menuitem> . Hay tres niveles t\u00edpicos: Men\u00fa principal (nivel superior) \u2192 ejemplo: Ventas , Inventario . Submen\u00fa \u2192 agrupa funcionalidades dentro de un m\u00f3dulo. Acci\u00f3n de men\u00fa \u2192 ejecuta una acci\u00f3n ( ir.actions.* ) que abre una vista o lista. Ejemplo de definici\u00f3n en XML: <menuitem id=\"menu_sales_main\" name=\"Ventas\"/> <menuitem id=\"menu_orders\" name=\"Pedidos\" parent=\"menu_sales_main\" action=\"action_sale_order\"/> Acciones: ir.actions.act_window Las acciones definen qu\u00e9 modelo abrir, con qu\u00e9 vistas y en qu\u00e9 modo . Se guardan en la tabla ir_actions_act_window . En XML: <record id=\"action_sale_order\" model=\"ir.actions.act_window\"> <field name=\"name\">Pedidos de Venta</field> <field name=\"res_model\">sale.order</field> <field name=\"view_mode\">list,form</field> </record> Campos clave: - name \u2192 Nombre mostrado. - res_model \u2192 Modelo asociado. - view_mode \u2192 Tipos de vista y orden de apertura ( list,form , kanban,form , etc.). Modo desarrollador y men\u00fa t\u00e9cnico Para explorar modelos, campos y vistas en Odoo: Activar modo desarrollador Ir a Ajustes . Abajo a la derecha: clic en Activar el modo desarrollador (o a\u00f1adir ?debug=1 a la URL). ![\"Modo desarrollador\"](images/webymvc_02.png){width=\"100%\" } Modo desarrollador Usar el men\u00fa t\u00e9cnico (solo visible con modo desarrollador activo): Modelos : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Modelos \u2192 ver estructura, campos y relaciones. Vistas : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Vistas \u2192 inspeccionar XML y personalizar. Acciones : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Acciones de Ventana \u2192 ver y editar ir.actions.act_window . Men\u00fas : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Men\u00fas . ![\"Men\u00fa t\u00e9cnico\"](images/webymvc_01.png){width=\"100%\" } Men\u00fa t\u00e9cnico Relaci\u00f3n entre MVC y la interfaz Ejemplo: Abrir la vista de contactos. Men\u00fa \u2192 Contactos ( <menuitem> que lanza una acci\u00f3n). Acci\u00f3n ( ir.actions.act_window ) \u2192 res_model=\"res.partner\" y view_mode=\"kanban,form\" . Vistas XML \u2192 <kanban> y <form> definidas para res.partner . Modelo ( res.partner ) \u2192 Tabla res_partner en PostgreSQL. Controlador (si aplica) \u2192 Si es una p\u00e1gina personalizada, un controlador gestiona la ruta /odoo/contacts . \ud83d\udccc Actividades \ud83d\udd0e Actividad 1 \u2014 Explora un Modelo (res.partner) Objetivo: Comprender c\u00f3mo un modelo define estructura de datos y relaciones. Abre Contactos y selecciona cualquier contacto. Haz clic en el depurador (\ud83d\udc1e) \u2192 Ver campos / Ver modelo . Anota: Nombre t\u00e9cnico del modelo ( res.partner ). Tabla PostgreSQL asociada ( res_partner ). 5 campos clave (nombre, email, phone, company_type, parent_id) y su tipo (Char, Many2one, etc.). 2 campos relacionales y el modelo al que apuntan. ( Opcional ) Verifica en PostgreSQL: consulta SELECT * FROM res_partner LIMIT 1; y comprueba columnas y tipos. Entregable: Ficha del modelo con captura de la lista de campos y relaciones. \ud83e\uddf1 Actividad 2 \u2014 Localiza y lee las Vistas (list/form/kanban) Objetivo: Ubicar las vistas XML que dibujan la UI de un modelo. En Contactos, abre el depurador \u2192 Ver vista . Identifica el tipo de vista en uso (p. ej., form o kanban ). Desde Men\u00fa T\u00e9cnico \u2192 Vistas , busca por Modelo = res.partner . Localiza: Una vista form y una vista list (lista). Su ID externo (ej. base.view_partner_form ). El archivo/fuente (m\u00f3dulo) al que pertenecen. Lee el XML (campo Arquitectura ). Localiza 3 campos y 1 bot\u00f3n (ej. name , email , phone , bot\u00f3n action_archive ). Entregable: Tabla con: vista , tipo , ID externo , m\u00f3dulo , 3 campos visibles . \ud83e\udded Actividad 3 \u2014 Rastrea el Men\u00fa y su Jerarqu\u00eda Objetivo: Entender c\u00f3mo se construyen los men\u00fas que llevan a modelos/vistas. Ve a Men\u00fa T\u00e9cnico \u2192 Interfaz de Usuario \u2192 Men\u00fas . Busca el men\u00fa que te lleva a Contactos (puedes filtrar por Nombre contiene \u201cContactos\u201d ). Anota: Nombre , ID externo , Padre (jerarqu\u00eda) y Acci\u00f3n asociada (si tiene). Dibuja la jerarqu\u00eda : Aplicaci\u00f3n \u2192 Submen\u00fa \u2192 Elemento que ejecuta acci\u00f3n . Repite el ejercicio con Ventas \u2192 Pedidos (si el m\u00f3dulo est\u00e1 instalado). Entregable: Diagrama simple (texto) de la jerarqu\u00eda de men\u00fas para Contactos y Ventas \u2192 Pedidos . \ud83d\udeaa Actividad 4 \u2014 Acciones de Ventana ( ir.actions.act_window ) Objetivo: Ver c\u00f3mo una acci\u00f3n decide qu\u00e9 modelo abrir y con qu\u00e9 vistas. Abre Men\u00fa T\u00e9cnico \u2192 Acciones \u2192 Acciones de Ventana . Busca la acci\u00f3n que abre Contactos . Anota: name , res_model , view_mode (ej. kanban,form ), domain (si aplica). Vistas espec\u00edficas vinculadas en la pesta\u00f1a Vistas (si hay orden forzado). Cambia a Ventas \u2192 Pedidos y repite con el modelo sale.order . Entregable: Ficha de dos acciones con campos clave y captura de la pesta\u00f1a Vistas . \ud83d\udccc Enlaces \u00fatiles : Documentaci\u00f3n de vistas en Odoo Documentaci\u00f3n de acciones en Odoo Documentaci\u00f3n del modo desarrollador","title":"\ud83c\udf10 Interfaz web en Odoo 18 y patr\u00f3n MVC"},{"location":"infodatos/webymvc/#interfaz-web-en-odoo-18-y-patron-mvc","text":"En este apartado vamos a ver c\u00f3mo funciona la interfaz web de Odoo, su arquitectura MVC , los tipos de vistas, la definici\u00f3n de acciones y c\u00f3mo inspeccionar modelos con el modo desarrollador .","title":"\ud83c\udf10 Interfaz web en Odoo 18 y patr\u00f3n MVC"},{"location":"infodatos/webymvc/#odoo-y-el-patron-mvc","text":"Odoo sigue una arquitectura MVC (Modelo\u2013Vista\u2013Controlador) adaptada a su framework propio. Modelo (Model) Definido en Python en la carpeta models/ de un m\u00f3dulo. Corresponde a una tabla en PostgreSQL (ej. modelo res.partner \u2192 tabla res_partner ). Contiene la l\u00f3gica de negocio y la estructura de datos (campos, relaciones, restricciones, m\u00e9todos). Vista (View) Definida en archivos XML en la carpeta views/ de un m\u00f3dulo. Describe c\u00f3mo se muestran los datos del modelo: formularios, listas, kanban, calendarios, etc. Controlador (Controller) Definido en Python en la carpeta controllers/ . Gestiona la l\u00f3gica de las rutas web, APIs, control de flujos y l\u00f3gica de backend para la interfaz. Estructura de una app en Odoo: app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u251c\u2500 controllers/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 controllers.py # Controladores web (C del MVC) \u251c\u2500 models/ \u2502 \u251c\u2500 __init__.py \u2502 \u2514\u2500 models.py # Modelos ORM (M del MVC) \u251c\u2500 views/ \u2502 \u2514\u2500 templates.xml # Vistas/plantillas (V del MVC, QWeb/XML) \u2514\u2500 static/ \u2514\u2500 description/ \u251c\u2500 icon.png \u2514\u2500 index.html","title":"Odoo y el patr\u00f3n MVC"},{"location":"infodatos/webymvc/#tipos-de-vistas-en-odoo","text":"En Odoo, cada vista se define como un elemento XML ( <form> , <list> , <kanban> , <calendar> , etc.) vinculado a un modelo. Tipo Etiqueta XML Descripci\u00f3n Lista <list> Vista tabular de varios registros Formulario <form> Vista detallada de un solo registro Kanban <kanban> Vista en tarjetas con columnas (flujo visual) Calendario <calendar> Vista de eventos/fechas Gr\u00e1fico <graph> Visualizaci\u00f3n de datos en gr\u00e1ficos Pivot <pivot> An\u00e1lisis din\u00e1mico con tablas din\u00e1micas Gantt <gantt> Gesti\u00f3n visual de proyectos y tareas Mapa <map> Ubicaci\u00f3n geogr\u00e1fica de registros","title":"Tipos de vistas en Odoo"},{"location":"infodatos/webymvc/#menus-y-navegacion","text":"Los men\u00fas de Odoo tambi\u00e9n se definen en XML con <menuitem> . Hay tres niveles t\u00edpicos: Men\u00fa principal (nivel superior) \u2192 ejemplo: Ventas , Inventario . Submen\u00fa \u2192 agrupa funcionalidades dentro de un m\u00f3dulo. Acci\u00f3n de men\u00fa \u2192 ejecuta una acci\u00f3n ( ir.actions.* ) que abre una vista o lista. Ejemplo de definici\u00f3n en XML: <menuitem id=\"menu_sales_main\" name=\"Ventas\"/> <menuitem id=\"menu_orders\" name=\"Pedidos\" parent=\"menu_sales_main\" action=\"action_sale_order\"/>","title":"Men\u00fas y navegaci\u00f3n"},{"location":"infodatos/webymvc/#acciones-iractionsact_window","text":"Las acciones definen qu\u00e9 modelo abrir, con qu\u00e9 vistas y en qu\u00e9 modo . Se guardan en la tabla ir_actions_act_window . En XML: <record id=\"action_sale_order\" model=\"ir.actions.act_window\"> <field name=\"name\">Pedidos de Venta</field> <field name=\"res_model\">sale.order</field> <field name=\"view_mode\">list,form</field> </record> Campos clave: - name \u2192 Nombre mostrado. - res_model \u2192 Modelo asociado. - view_mode \u2192 Tipos de vista y orden de apertura ( list,form , kanban,form , etc.).","title":"Acciones: ir.actions.act_window"},{"location":"infodatos/webymvc/#modo-desarrollador-y-menu-tecnico","text":"Para explorar modelos, campos y vistas en Odoo: Activar modo desarrollador Ir a Ajustes . Abajo a la derecha: clic en Activar el modo desarrollador (o a\u00f1adir ?debug=1 a la URL). ![\"Modo desarrollador\"](images/webymvc_02.png){width=\"100%\" } Modo desarrollador Usar el men\u00fa t\u00e9cnico (solo visible con modo desarrollador activo): Modelos : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Modelos \u2192 ver estructura, campos y relaciones. Vistas : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Vistas \u2192 inspeccionar XML y personalizar. Acciones : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Acciones de Ventana \u2192 ver y editar ir.actions.act_window . Men\u00fas : Configuraci\u00f3n \u2192 T\u00e9cnico \u2192 Men\u00fas . ![\"Men\u00fa t\u00e9cnico\"](images/webymvc_01.png){width=\"100%\" } Men\u00fa t\u00e9cnico","title":"Modo desarrollador y men\u00fa t\u00e9cnico"},{"location":"infodatos/webymvc/#relacion-entre-mvc-y-la-interfaz","text":"Ejemplo: Abrir la vista de contactos. Men\u00fa \u2192 Contactos ( <menuitem> que lanza una acci\u00f3n). Acci\u00f3n ( ir.actions.act_window ) \u2192 res_model=\"res.partner\" y view_mode=\"kanban,form\" . Vistas XML \u2192 <kanban> y <form> definidas para res.partner . Modelo ( res.partner ) \u2192 Tabla res_partner en PostgreSQL. Controlador (si aplica) \u2192 Si es una p\u00e1gina personalizada, un controlador gestiona la ruta /odoo/contacts .","title":"Relaci\u00f3n entre MVC y la interfaz"},{"location":"infodatos/webymvc/#actividades","text":"","title":"\ud83d\udccc Actividades"},{"location":"infodatos/webymvc/#actividad-1-explora-un-modelo-respartner","text":"Objetivo: Comprender c\u00f3mo un modelo define estructura de datos y relaciones. Abre Contactos y selecciona cualquier contacto. Haz clic en el depurador (\ud83d\udc1e) \u2192 Ver campos / Ver modelo . Anota: Nombre t\u00e9cnico del modelo ( res.partner ). Tabla PostgreSQL asociada ( res_partner ). 5 campos clave (nombre, email, phone, company_type, parent_id) y su tipo (Char, Many2one, etc.). 2 campos relacionales y el modelo al que apuntan. ( Opcional ) Verifica en PostgreSQL: consulta SELECT * FROM res_partner LIMIT 1; y comprueba columnas y tipos. Entregable: Ficha del modelo con captura de la lista de campos y relaciones.","title":"\ud83d\udd0e Actividad 1 \u2014 Explora un Modelo (res.partner)"},{"location":"infodatos/webymvc/#actividad-2-localiza-y-lee-las-vistas-listformkanban","text":"Objetivo: Ubicar las vistas XML que dibujan la UI de un modelo. En Contactos, abre el depurador \u2192 Ver vista . Identifica el tipo de vista en uso (p. ej., form o kanban ). Desde Men\u00fa T\u00e9cnico \u2192 Vistas , busca por Modelo = res.partner . Localiza: Una vista form y una vista list (lista). Su ID externo (ej. base.view_partner_form ). El archivo/fuente (m\u00f3dulo) al que pertenecen. Lee el XML (campo Arquitectura ). Localiza 3 campos y 1 bot\u00f3n (ej. name , email , phone , bot\u00f3n action_archive ). Entregable: Tabla con: vista , tipo , ID externo , m\u00f3dulo , 3 campos visibles .","title":"\ud83e\uddf1 Actividad 2 \u2014 Localiza y lee las Vistas (list/form/kanban)"},{"location":"infodatos/webymvc/#actividad-3-rastrea-el-menu-y-su-jerarquia","text":"Objetivo: Entender c\u00f3mo se construyen los men\u00fas que llevan a modelos/vistas. Ve a Men\u00fa T\u00e9cnico \u2192 Interfaz de Usuario \u2192 Men\u00fas . Busca el men\u00fa que te lleva a Contactos (puedes filtrar por Nombre contiene \u201cContactos\u201d ). Anota: Nombre , ID externo , Padre (jerarqu\u00eda) y Acci\u00f3n asociada (si tiene). Dibuja la jerarqu\u00eda : Aplicaci\u00f3n \u2192 Submen\u00fa \u2192 Elemento que ejecuta acci\u00f3n . Repite el ejercicio con Ventas \u2192 Pedidos (si el m\u00f3dulo est\u00e1 instalado). Entregable: Diagrama simple (texto) de la jerarqu\u00eda de men\u00fas para Contactos y Ventas \u2192 Pedidos .","title":"\ud83e\udded Actividad 3 \u2014 Rastrea el Men\u00fa y su Jerarqu\u00eda"},{"location":"infodatos/webymvc/#actividad-4-acciones-de-ventana-iractionsact_window","text":"Objetivo: Ver c\u00f3mo una acci\u00f3n decide qu\u00e9 modelo abrir y con qu\u00e9 vistas. Abre Men\u00fa T\u00e9cnico \u2192 Acciones \u2192 Acciones de Ventana . Busca la acci\u00f3n que abre Contactos . Anota: name , res_model , view_mode (ej. kanban,form ), domain (si aplica). Vistas espec\u00edficas vinculadas en la pesta\u00f1a Vistas (si hay orden forzado). Cambia a Ventas \u2192 Pedidos y repite con el modelo sale.order . Entregable: Ficha de dos acciones con campos clave y captura de la pesta\u00f1a Vistas . \ud83d\udccc Enlaces \u00fatiles : Documentaci\u00f3n de vistas en Odoo Documentaci\u00f3n de acciones en Odoo Documentaci\u00f3n del modo desarrollador","title":"\ud83d\udeaa Actividad 4 \u2014 Acciones de Ventana (ir.actions.act_window)"},{"location":"intro/arquitecturaerp/","text":"Arquitectura de un ERP Integraci\u00f3n Arquitectura modular Dentro de las ventajas propias de esta integraci\u00f3n se encuentran su gran poder de ajuste y adaptaci\u00f3n. Sus bloques funcionales est\u00e1n estrechamente interconectados y se pueden contratar de forma independiente. Arquitectura indivisible Este tipo de dise\u00f1o arquitect\u00f3nico permite contar con todas las funcionalidades desde el inicio. Estos sistemas son creados considerando a medida para solventar las necesidades espec\u00edficas de un negocio. La desventaja principal es su inflexibilidad. Desde una perspectiva t\u00e9cnica, los sistemas ERP se construyen bas\u00e1ndose en dos elementos principales: la base de datos y la arquitectura cliente-servidor . Perspectiva t\u00e9cnica Arquitectura cliente-servidor Se necesita un servidor que ofrece servicios a los clientes. De esta forma, los usuarios utilizan las aplicaciones clientes para acceder a los servicios de dicho servidor. Base de datos La base de datos es com\u00fan a todos los m\u00f3dulos de la aplicaci\u00f3n, lo que permite la integraci\u00f3n entre los diferentes departamentos o m\u00f3dulos del ERP. Normalmente las bases de datos que se utilizan son relacionales, por ejemplo: Oracle, MySQL o PostgreSQL. A la base de datos solo se puede acceder desde el servidor ERP, nunca desde los clientes. El servidor act\u00faa como una capa intermedia entre los clientes y los datos. Descripci\u00f3n de la arquitectura de un sistema ERP libre: Odoo La arquitectura del sistema Odoo es cliente-servidor, lo que permite trabajar sobre los mismos datos desde diferentes clientes. El servidor y los clientes pueden realizar el intercambio de datos mediante tres tipos de procedimientos: XML-RPC , Net-RPC o JSON . ![\"Arquitectura de Odoo\"](images/SGEIntroArq01.png){width=\"90%\" } Arquitectura de Odoo Odoo sigue una arquitectura MVC (Modelo-Vista-Controlador), en la cual: Los modelos se definen en las clases dise\u00f1adas con Python. Las vistas residen en formularios, listas, calendarios, gr\u00e1ficos, etc., definidos en ficheros XML. El controlador reside en los m\u00e9todos definidos en las clases que proporcionan la l\u00f3gica de negocio. El framework de Odoo (denominado OpenObject , de tipo RAD) permite ampliar r\u00e1pidamente el ERP a m\u00e1s m\u00f3dulos mediante la capa ORM , y facilita varios componentes que permiten construir la aplicaci\u00f3n siguiendo la arquitectura MVC: La capa ORM (Object Relational Mapping) hace el mapeo entre los objetos Python y la base de datos PostgreSQL. El dise\u00f1ador-programador no efect\u00faa el dise\u00f1o de la base de datos, \u00fanicamente dise\u00f1a clases, las cuales son utilizadas por la capa ORM de Odoo para efectuar el mapeo sobre el SGBD PostgreSQL. Un sistema de flujos de trabajo o workflows. Dise\u00f1adores de informes . Facilidades de traducci\u00f3n de la aplicaci\u00f3n a varios idiomas. Funcionamiento El servidor Odoo proporciona acceso a la base de datos mediante ORM y a un cliente web. El cliente se comunica con el servidor usando XML-RPC , y los clientes web mediante JSON-RPC . El cliente solo tiene que mostrar lo que le env\u00eda el servidor. Los datos est\u00e1n guardados en una base de datos relacional , y gracias al ORM no es necesario realizar consultas SQL directamente, ya que este proporciona m\u00e9todos para trabajar de manera m\u00e1s r\u00e1pida y segura. Al hablar de tablas , nos referimos a modelos , que son mapeados por el ORM en tablas de PostgreSQL . El acceso del cliente a los datos se realiza mediante un servicio llamado WSGI , una soluci\u00f3n est\u00e1ndar para crear servidores y clientes HTTP en Python. En el caso de Odoo, este servicio incluye el OpenERP Web Project , que es el servidor web. Componentes adicionales en Odoo Business Objects : Casi todo en Odoo es un Business Object. Son persistentes gracias al ORM y se encuentran estructurados en el directorio /modules . Wizards : Se comportan como asistentes para introducir datos de forma m\u00e1s sencilla para el usuario. Widgets o Windows Gadgets : Permiten desarrollar f\u00e1cilmente en el cliente, proporcionando visualizaci\u00f3n y comportamiento adecuados para cada tipo de datos. Resumiendo Odoo A continuaci\u00f3n se sintetizan los rasgos m\u00e1s importantes de Odoo en cuanto a tecnolog\u00edas utilizadas, arquitectura, licencia y tipos de clientes: Tecnolog\u00edas que usa Python, SQL o PL/SQL, XML Arquitectura de dise\u00f1o y funcionamiento MVC, PostgreSQL database server, Application server, Open Object, client web Licencia GPL Tipos de Cliente Web y aplicaci\u00f3n Desktop","title":"Arquitectura de un ERP"},{"location":"intro/arquitecturaerp/#arquitectura-de-un-erp","text":"","title":"Arquitectura de un ERP"},{"location":"intro/arquitecturaerp/#integracion","text":"","title":"Integraci\u00f3n"},{"location":"intro/arquitecturaerp/#arquitectura-modular","text":"Dentro de las ventajas propias de esta integraci\u00f3n se encuentran su gran poder de ajuste y adaptaci\u00f3n. Sus bloques funcionales est\u00e1n estrechamente interconectados y se pueden contratar de forma independiente.","title":"Arquitectura modular"},{"location":"intro/arquitecturaerp/#arquitectura-indivisible","text":"Este tipo de dise\u00f1o arquitect\u00f3nico permite contar con todas las funcionalidades desde el inicio. Estos sistemas son creados considerando a medida para solventar las necesidades espec\u00edficas de un negocio. La desventaja principal es su inflexibilidad. Desde una perspectiva t\u00e9cnica, los sistemas ERP se construyen bas\u00e1ndose en dos elementos principales: la base de datos y la arquitectura cliente-servidor .","title":"Arquitectura indivisible"},{"location":"intro/arquitecturaerp/#perspectiva-tecnica","text":"","title":"Perspectiva t\u00e9cnica"},{"location":"intro/arquitecturaerp/#arquitectura-cliente-servidor","text":"Se necesita un servidor que ofrece servicios a los clientes. De esta forma, los usuarios utilizan las aplicaciones clientes para acceder a los servicios de dicho servidor.","title":"Arquitectura cliente-servidor"},{"location":"intro/arquitecturaerp/#base-de-datos","text":"La base de datos es com\u00fan a todos los m\u00f3dulos de la aplicaci\u00f3n, lo que permite la integraci\u00f3n entre los diferentes departamentos o m\u00f3dulos del ERP. Normalmente las bases de datos que se utilizan son relacionales, por ejemplo: Oracle, MySQL o PostgreSQL. A la base de datos solo se puede acceder desde el servidor ERP, nunca desde los clientes. El servidor act\u00faa como una capa intermedia entre los clientes y los datos.","title":"Base de datos"},{"location":"intro/arquitecturaerp/#descripcion-de-la-arquitectura-de-un-sistema-erp-libre-odoo","text":"La arquitectura del sistema Odoo es cliente-servidor, lo que permite trabajar sobre los mismos datos desde diferentes clientes. El servidor y los clientes pueden realizar el intercambio de datos mediante tres tipos de procedimientos: XML-RPC , Net-RPC o JSON . ![\"Arquitectura de Odoo\"](images/SGEIntroArq01.png){width=\"90%\" } Arquitectura de Odoo Odoo sigue una arquitectura MVC (Modelo-Vista-Controlador), en la cual: Los modelos se definen en las clases dise\u00f1adas con Python. Las vistas residen en formularios, listas, calendarios, gr\u00e1ficos, etc., definidos en ficheros XML. El controlador reside en los m\u00e9todos definidos en las clases que proporcionan la l\u00f3gica de negocio. El framework de Odoo (denominado OpenObject , de tipo RAD) permite ampliar r\u00e1pidamente el ERP a m\u00e1s m\u00f3dulos mediante la capa ORM , y facilita varios componentes que permiten construir la aplicaci\u00f3n siguiendo la arquitectura MVC: La capa ORM (Object Relational Mapping) hace el mapeo entre los objetos Python y la base de datos PostgreSQL. El dise\u00f1ador-programador no efect\u00faa el dise\u00f1o de la base de datos, \u00fanicamente dise\u00f1a clases, las cuales son utilizadas por la capa ORM de Odoo para efectuar el mapeo sobre el SGBD PostgreSQL. Un sistema de flujos de trabajo o workflows. Dise\u00f1adores de informes . Facilidades de traducci\u00f3n de la aplicaci\u00f3n a varios idiomas.","title":"Descripci\u00f3n de la arquitectura de un sistema ERP libre: Odoo"},{"location":"intro/arquitecturaerp/#funcionamiento","text":"El servidor Odoo proporciona acceso a la base de datos mediante ORM y a un cliente web. El cliente se comunica con el servidor usando XML-RPC , y los clientes web mediante JSON-RPC . El cliente solo tiene que mostrar lo que le env\u00eda el servidor. Los datos est\u00e1n guardados en una base de datos relacional , y gracias al ORM no es necesario realizar consultas SQL directamente, ya que este proporciona m\u00e9todos para trabajar de manera m\u00e1s r\u00e1pida y segura. Al hablar de tablas , nos referimos a modelos , que son mapeados por el ORM en tablas de PostgreSQL . El acceso del cliente a los datos se realiza mediante un servicio llamado WSGI , una soluci\u00f3n est\u00e1ndar para crear servidores y clientes HTTP en Python. En el caso de Odoo, este servicio incluye el OpenERP Web Project , que es el servidor web.","title":"Funcionamiento"},{"location":"intro/arquitecturaerp/#componentes-adicionales-en-odoo","text":"Business Objects : Casi todo en Odoo es un Business Object. Son persistentes gracias al ORM y se encuentran estructurados en el directorio /modules . Wizards : Se comportan como asistentes para introducir datos de forma m\u00e1s sencilla para el usuario. Widgets o Windows Gadgets : Permiten desarrollar f\u00e1cilmente en el cliente, proporcionando visualizaci\u00f3n y comportamiento adecuados para cada tipo de datos.","title":"Componentes adicionales en Odoo"},{"location":"intro/arquitecturaerp/#resumiendo-odoo","text":"A continuaci\u00f3n se sintetizan los rasgos m\u00e1s importantes de Odoo en cuanto a tecnolog\u00edas utilizadas, arquitectura, licencia y tipos de clientes: Tecnolog\u00edas que usa Python, SQL o PL/SQL, XML Arquitectura de dise\u00f1o y funcionamiento MVC, PostgreSQL database server, Application server, Open Object, client web Licencia GPL Tipos de Cliente Web y aplicaci\u00f3n Desktop","title":"Resumiendo Odoo"},{"location":"intro/intro/","text":"Introducci\u00f3n a la gesti\u00f3n empresarial La administraci\u00f3n es la ciencia social que estudia las organizaciones y las t\u00e9cnicas relacionadas con la planificaci\u00f3n, organizaci\u00f3n, direcci\u00f3n y control de todos los recursos (humanos, financieros, materiales, tecnol\u00f3gicos, del conocimiento, etc.) de una empresa, con el objetivo de maximizar tanto los beneficios como la eficiencia. Los beneficios de los que hablamos pueden ser sociales o econ\u00f3micos, esto depende de la finalidad de la empresa. Caracter\u00edsticas de la administraci\u00f3n: \ud83c\udf0d Universalidad Es la ciencia que permite coordinar tanto a personas como a sistemas con la finalidad, mediante comparaciones y jerarqu\u00edas, de ser eficientes. La administraci\u00f3n se usa en todos los \u00e1mbitos, ya sea el Estado, el Ej\u00e9rcito, la empresa, con la ventaja de que los elementos b\u00e1sicos son los mismos en todos ellos, aunque por l\u00f3gica existan variantes en cada caso. Diremos que la administraci\u00f3n es universal si esta se puede aplicar a todo tipo de organismos. \u2734\ufe0f Especificidad La administraci\u00f3n suele llevar impl\u00edcitos algunos aspectos de diferente \u00edndole, pero ella es concreta y difiere de aquello que incluye. La administraci\u00f3n tiene caracter\u00edsticas espec\u00edficas que nos permiten no confundirla con otras ciencias o t\u00e9cnicas. La administraci\u00f3n tiene sus propias caracter\u00edsticas que le proporcionan su especificidad. \u23f3 Unidad temporal Aunque la administraci\u00f3n conste de diversas etapas, fases y elementos, en todo momento de la vida de una empresa se van a dar la mayor\u00eda de estos elementos, ya sea en mayor o menor grado. \ud83c\udfe2 Unidad jer\u00e1rquica Todos los representantes de la organizaci\u00f3n y los que forman parte de la misma participan de forma diferente y con diferentes grados de la administraci\u00f3n, es decir, se establecen por niveles (directores, subdirectores, etc.). Valor instrumental La administraci\u00f3n es un medio para conseguir un fin; es decir, se utiliza en los organismos sociales para conseguir de forma eficiente los objetivos establecidos. Interdisciplinariedad La administraci\u00f3n hace uso de los principios, procesos, procedimientos y m\u00e9todos de otras ciencias relacionadas con la eficiencia en el trabajo, como por ejemplo las matem\u00e1ticas, la estad\u00edstica o el derecho, entre otras muchas. Flexibilidad Ser flexible significa que cualquier principio o t\u00e9cnica administrativa se puede adaptar seg\u00fan las necesidades de la empresa. Organizaci\u00f3n de una empresa y sus relaciones El entorno de una empresa son aquellos elementos y factores relevantes externos a la misma y que pueden influir en su funcionamiento. En cada entorno podemos distinguir dos tipos de factores: los que afectan de forma global a todas las empresas (macroentorno) y los que afectan de forma individual (microentorno). ![\"Microentorno vs macroentorno\"](images/SGEIntro01.gif){width=\"100%\" } Microentorno vs macroentorno","title":"Introducci\u00f3n a la gesti\u00f3n empresarial"},{"location":"intro/intro/#introduccion-a-la-gestion-empresarial","text":"La administraci\u00f3n es la ciencia social que estudia las organizaciones y las t\u00e9cnicas relacionadas con la planificaci\u00f3n, organizaci\u00f3n, direcci\u00f3n y control de todos los recursos (humanos, financieros, materiales, tecnol\u00f3gicos, del conocimiento, etc.) de una empresa, con el objetivo de maximizar tanto los beneficios como la eficiencia. Los beneficios de los que hablamos pueden ser sociales o econ\u00f3micos, esto depende de la finalidad de la empresa.","title":"Introducci\u00f3n a la gesti\u00f3n empresarial"},{"location":"intro/intro/#caracteristicas-de-la-administracion","text":"","title":"Caracter\u00edsticas de la administraci\u00f3n:"},{"location":"intro/intro/#universalidad","text":"Es la ciencia que permite coordinar tanto a personas como a sistemas con la finalidad, mediante comparaciones y jerarqu\u00edas, de ser eficientes. La administraci\u00f3n se usa en todos los \u00e1mbitos, ya sea el Estado, el Ej\u00e9rcito, la empresa, con la ventaja de que los elementos b\u00e1sicos son los mismos en todos ellos, aunque por l\u00f3gica existan variantes en cada caso. Diremos que la administraci\u00f3n es universal si esta se puede aplicar a todo tipo de organismos.","title":"\ud83c\udf0d Universalidad"},{"location":"intro/intro/#especificidad","text":"La administraci\u00f3n suele llevar impl\u00edcitos algunos aspectos de diferente \u00edndole, pero ella es concreta y difiere de aquello que incluye. La administraci\u00f3n tiene caracter\u00edsticas espec\u00edficas que nos permiten no confundirla con otras ciencias o t\u00e9cnicas. La administraci\u00f3n tiene sus propias caracter\u00edsticas que le proporcionan su especificidad.","title":"\u2734\ufe0f Especificidad"},{"location":"intro/intro/#unidad-temporal","text":"Aunque la administraci\u00f3n conste de diversas etapas, fases y elementos, en todo momento de la vida de una empresa se van a dar la mayor\u00eda de estos elementos, ya sea en mayor o menor grado.","title":"\u23f3 Unidad temporal"},{"location":"intro/intro/#unidad-jerarquica","text":"Todos los representantes de la organizaci\u00f3n y los que forman parte de la misma participan de forma diferente y con diferentes grados de la administraci\u00f3n, es decir, se establecen por niveles (directores, subdirectores, etc.).","title":"\ud83c\udfe2 Unidad jer\u00e1rquica"},{"location":"intro/intro/#valor-instrumental","text":"La administraci\u00f3n es un medio para conseguir un fin; es decir, se utiliza en los organismos sociales para conseguir de forma eficiente los objetivos establecidos.","title":"Valor instrumental"},{"location":"intro/intro/#interdisciplinariedad","text":"La administraci\u00f3n hace uso de los principios, procesos, procedimientos y m\u00e9todos de otras ciencias relacionadas con la eficiencia en el trabajo, como por ejemplo las matem\u00e1ticas, la estad\u00edstica o el derecho, entre otras muchas.","title":"Interdisciplinariedad"},{"location":"intro/intro/#flexibilidad","text":"Ser flexible significa que cualquier principio o t\u00e9cnica administrativa se puede adaptar seg\u00fan las necesidades de la empresa.","title":"Flexibilidad"},{"location":"intro/intro/#organizacion-de-una-empresa-y-sus-relaciones","text":"El entorno de una empresa son aquellos elementos y factores relevantes externos a la misma y que pueden influir en su funcionamiento. En cada entorno podemos distinguir dos tipos de factores: los que afectan de forma global a todas las empresas (macroentorno) y los que afectan de forma individual (microentorno). ![\"Microentorno vs macroentorno\"](images/SGEIntro01.gif){width=\"100%\" } Microentorno vs macroentorno","title":"Organizaci\u00f3n de una empresa y sus relaciones"},{"location":"intro/odooinst/","text":"Instalaci\u00f3n de Odoo Odoo proporciona paquetes de instalaci\u00f3n para: Distribuciones Linux basadas en Debian (Debian, Ubuntu, etc.), Distribuciones Linux basadas en RPM (Fedora, CentOS, RHEL, etc.), Y Windows , tanto para las ediciones Community como Enterprise . Los paquetes de compilaci\u00f3n nocturna de Odoo Community est\u00e1n disponibles en el servidor nocturno con todos los requisitos de dependencias necesarios. Es posible que sea complicado mantener los paquetes nocturnos al d\u00eda. Los paquetes oficiales de Community y Enterprise se pueden descargar desde la p\u00e1gina de descargas de Odoo . Para descargar los paquetes de Enterprise es necesario que haya iniciado sesi\u00f3n como un cliente que paga Odoo de forma local o un partner. Linux Preparar Odoo necesita un servidor PostgreSQL para ejecutarse correctamente. Debian / Ubuntu La configuraci\u00f3n predeterminada para el paquete .deb de Odoo est\u00e1 dise\u00f1ada para usar el servidor PostgreSQL en el mismo hu\u00e9sped que la instancia de Odoo. Para instalar PostgreSQL, ejecuta: sudo apt install postgresql -y Fedora (Sigue pasos similares usando dnf , si est\u00e1s en una distribuci\u00f3n basada en RPM). \u26a0\ufe0f Advertencia wkhtmltopdf no est\u00e1 instalado mediante pip y debe instalarse manualmente en la versi\u00f3n 0.12.6 para ser compatible con encabezados y pies de p\u00e1gina. Consulta esta wiki de Odoo sobre wkhtmltopdf para m\u00e1s detalles sobre las versiones compatibles. Repositorio Odoo S.A. ofrece un repositorio que te permite instalar la edici\u00f3n Community ejecutando: # Para Debian/Ubuntu: wget -q -O - https://nightly.odoo.com/odoo.key | sudo gpg --dearmor -o /usr/share/keyrings/odoo-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/odoo-archive-keyring.gpg] https://nightly.odoo.com/18.0/nightly/deb/ ./' | sudo tee /etc/apt/sources.list.d/odoo.list sudo apt-get update && sudo apt-get install odoo # Para Fedora/CentOS/RHEL: sudo dnf config-manager --add-repo=https://nightly.odoo.com/18.0/nightly/rpm/odoo.repo sudo dnf install -y odoo sudo systemctl enable odoo sudo systemctl start odoo Usa apt-get upgrade o su equivalente para mantener el sistema actualizado. Paquete de distribuci\u00f3n Tambi\u00e9n puedes descargar paquetes .deb o .rpm desde la p\u00e1gina oficial de Odoo (tanto para Community como para Enterprise). Notas sobre .deb : Soporta Debian Bookworm (12) y Ubuntu Jammy (22.04 LTS) o versiones posteriores. Para instalar desde la terminal como root: dpkg -i <ruta_al_paquete.deb> # Esto puede fallar por dependencias apt-get install -f # Corrige las dependencias faltantes dpkg -i <ruta_al_paquete.deb> # Repite la instalaci\u00f3n Si necesitas exportar a formato XLS y est\u00e1s en Debian anterior (como Buster) u otra versi\u00f3n antigua de Ubuntu: Instala manualmente xlwt : bash sudo pip3 install xlwt Para Odoo con m\u00f3dulos l10n_mx_edi , si falta num2words , inst\u00e1lalo manualmente: bash sudo pip3 install num2words Notas sobre .rpm : Compatible con Fedora\u202f38 . Instalaci\u00f3n t\u00edpica: sudo dnf localinstall odoo_18.0.latest.noarch.rpm sudo systemctl enable odoo sudo systemctl start odoo Windows \u26a0\ufe0f Advertencia : el instalador de Windows es pr\u00e1ctico para pruebas o uso local por un solo usuario, pero no se recomienda para producci\u00f3n debido a varias limitaciones. Pasos b\u00e1sicos: Descarga el instalador desde el servidor nightly (solo Community) o desde la p\u00e1gina oficial (Community o Enterprise). Ejecuta el archivo descargado. En Windows 8 o superior, podr\u00edas ver una alerta de seguridad (\"Windows protegi\u00f3 tu PC\"). Haz clic en M\u00e1s informaci\u00f3n y luego en Ejecutar de todas formas . Acepta el aviso de control de cuentas de usuario (UAC). Sigue las instrucciones del instalador. Al finalizar, Odoo se inicia autom\u00e1ticamente . Docker Descripci\u00f3n Esta imagen oficial de Docker ejecuta Odoo , un sistema ERP modular y extensible. Est\u00e1 preparada para ejecutarse en contenedores Docker, con soporte para despliegues simples o en cl\u00faster. Uso b\u00e1sico con Docker Ejemplo de comando para lanzar un contenedor Odoo conectado a un contenedor PostgreSQL: docker network create odoo-net docker run -d --name db --network odoo-net \\ -e POSTGRES_USER=odoo \\ -e POSTGRES_PASSWORD=odoo \\ -e POSTGRES_DB=postgres \\ postgres:15 docker run -d --name odoo --network odoo-net -p 8069:8069 \\ -e HOST=db -e USER=odoo -e PASSWORD=odoo \\ odoo:18.0 Uso con Docker Compose La forma recomendada para producci\u00f3n y desarrollo es usar docker-compose . Ejemplo de archivo docker-compose.yml para Odoo 18 con PostgreSQL: services: web: image: odoo:18.0 depends_on: - db ports: - \"8069:8069\" volumes: - odoo-web-data:/var/lib/odoo - ./config:/etc/odoo - ./addons:/mnt/extra-addons environment: - PASSWORD_FILE=/run/secrets/postgresql_password secrets: - postgresql_password db: image: postgres:15 environment: - POSTGRES_DB=postgres - POSTGRES_PASSWORD_FILE=/run/secrets/postgresql_password - POSTGRES_USER=odoo - PGDATA=/var/lib/postgresql/data/pgdata volumes: - odoo-db-data:/var/lib/postgresql/data/pgdata secrets: - postgresql_password volumes: odoo-web-data: odoo-db-data: secrets: postgresql_password: file: odoo_pg_pass Explicaci\u00f3n r\u00e1pida: db : servicio que ejecuta PostgreSQL con datos persistentes en volumen. odoo : servicio que ejecuta Odoo, que se conecta a PostgreSQL. Los puertos 8069 del contenedor Odoo se exponen en el host para acceso web. Montar addons personalizados ubicados en ./addons . Usar un archivo de configuraci\u00f3n personalizado ubicado en .config/odoo.conf . Usar vol\u00famenes con nombre para los directorios de datos de Odoo y PostgreSQL. Usar un archivo de secrets llamado odoo_pg_pass que contiene la contrase\u00f1a de PostgreSQL compartida por ambos servicios. Persistencia de datos y vol\u00famenes Los datos de PostgreSQL se guardan en el volumen odoo-db-data . Los datos y configuraciones de Odoo se guardan en el volumen odoo-web-data . Esto garantiza que la informaci\u00f3n persista aunque los contenedores se reinicien o eliminen. \ud83d\udcdd Actividad !!! Question \"Instalaci\u00f3n de Odoo\" 1. Haz una instalaci\u00f3n de Odoo utilizando docker-compose","title":"Instalaci\u00f3n de Odoo"},{"location":"intro/odooinst/#instalacion-de-odoo","text":"Odoo proporciona paquetes de instalaci\u00f3n para: Distribuciones Linux basadas en Debian (Debian, Ubuntu, etc.), Distribuciones Linux basadas en RPM (Fedora, CentOS, RHEL, etc.), Y Windows , tanto para las ediciones Community como Enterprise . Los paquetes de compilaci\u00f3n nocturna de Odoo Community est\u00e1n disponibles en el servidor nocturno con todos los requisitos de dependencias necesarios. Es posible que sea complicado mantener los paquetes nocturnos al d\u00eda. Los paquetes oficiales de Community y Enterprise se pueden descargar desde la p\u00e1gina de descargas de Odoo . Para descargar los paquetes de Enterprise es necesario que haya iniciado sesi\u00f3n como un cliente que paga Odoo de forma local o un partner.","title":"Instalaci\u00f3n de Odoo"},{"location":"intro/odooinst/#linux","text":"","title":"Linux"},{"location":"intro/odooinst/#preparar","text":"Odoo necesita un servidor PostgreSQL para ejecutarse correctamente.","title":"Preparar"},{"location":"intro/odooinst/#debian-ubuntu","text":"La configuraci\u00f3n predeterminada para el paquete .deb de Odoo est\u00e1 dise\u00f1ada para usar el servidor PostgreSQL en el mismo hu\u00e9sped que la instancia de Odoo. Para instalar PostgreSQL, ejecuta: sudo apt install postgresql -y","title":"Debian / Ubuntu"},{"location":"intro/odooinst/#fedora","text":"(Sigue pasos similares usando dnf , si est\u00e1s en una distribuci\u00f3n basada en RPM). \u26a0\ufe0f Advertencia wkhtmltopdf no est\u00e1 instalado mediante pip y debe instalarse manualmente en la versi\u00f3n 0.12.6 para ser compatible con encabezados y pies de p\u00e1gina. Consulta esta wiki de Odoo sobre wkhtmltopdf para m\u00e1s detalles sobre las versiones compatibles.","title":"Fedora"},{"location":"intro/odooinst/#repositorio","text":"Odoo S.A. ofrece un repositorio que te permite instalar la edici\u00f3n Community ejecutando: # Para Debian/Ubuntu: wget -q -O - https://nightly.odoo.com/odoo.key | sudo gpg --dearmor -o /usr/share/keyrings/odoo-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/odoo-archive-keyring.gpg] https://nightly.odoo.com/18.0/nightly/deb/ ./' | sudo tee /etc/apt/sources.list.d/odoo.list sudo apt-get update && sudo apt-get install odoo # Para Fedora/CentOS/RHEL: sudo dnf config-manager --add-repo=https://nightly.odoo.com/18.0/nightly/rpm/odoo.repo sudo dnf install -y odoo sudo systemctl enable odoo sudo systemctl start odoo Usa apt-get upgrade o su equivalente para mantener el sistema actualizado.","title":"Repositorio"},{"location":"intro/odooinst/#paquete-de-distribucion","text":"Tambi\u00e9n puedes descargar paquetes .deb o .rpm desde la p\u00e1gina oficial de Odoo (tanto para Community como para Enterprise). Notas sobre .deb : Soporta Debian Bookworm (12) y Ubuntu Jammy (22.04 LTS) o versiones posteriores. Para instalar desde la terminal como root: dpkg -i <ruta_al_paquete.deb> # Esto puede fallar por dependencias apt-get install -f # Corrige las dependencias faltantes dpkg -i <ruta_al_paquete.deb> # Repite la instalaci\u00f3n Si necesitas exportar a formato XLS y est\u00e1s en Debian anterior (como Buster) u otra versi\u00f3n antigua de Ubuntu: Instala manualmente xlwt : bash sudo pip3 install xlwt Para Odoo con m\u00f3dulos l10n_mx_edi , si falta num2words , inst\u00e1lalo manualmente: bash sudo pip3 install num2words Notas sobre .rpm : Compatible con Fedora\u202f38 . Instalaci\u00f3n t\u00edpica: sudo dnf localinstall odoo_18.0.latest.noarch.rpm sudo systemctl enable odoo sudo systemctl start odoo","title":"Paquete de distribuci\u00f3n"},{"location":"intro/odooinst/#windows","text":"\u26a0\ufe0f Advertencia : el instalador de Windows es pr\u00e1ctico para pruebas o uso local por un solo usuario, pero no se recomienda para producci\u00f3n debido a varias limitaciones.","title":"Windows"},{"location":"intro/odooinst/#pasos-basicos","text":"Descarga el instalador desde el servidor nightly (solo Community) o desde la p\u00e1gina oficial (Community o Enterprise). Ejecuta el archivo descargado. En Windows 8 o superior, podr\u00edas ver una alerta de seguridad (\"Windows protegi\u00f3 tu PC\"). Haz clic en M\u00e1s informaci\u00f3n y luego en Ejecutar de todas formas . Acepta el aviso de control de cuentas de usuario (UAC). Sigue las instrucciones del instalador. Al finalizar, Odoo se inicia autom\u00e1ticamente .","title":"Pasos b\u00e1sicos:"},{"location":"intro/odooinst/#docker","text":"","title":"Docker"},{"location":"intro/odooinst/#descripcion","text":"Esta imagen oficial de Docker ejecuta Odoo , un sistema ERP modular y extensible. Est\u00e1 preparada para ejecutarse en contenedores Docker, con soporte para despliegues simples o en cl\u00faster.","title":"Descripci\u00f3n"},{"location":"intro/odooinst/#uso-basico-con-docker","text":"Ejemplo de comando para lanzar un contenedor Odoo conectado a un contenedor PostgreSQL: docker network create odoo-net docker run -d --name db --network odoo-net \\ -e POSTGRES_USER=odoo \\ -e POSTGRES_PASSWORD=odoo \\ -e POSTGRES_DB=postgres \\ postgres:15 docker run -d --name odoo --network odoo-net -p 8069:8069 \\ -e HOST=db -e USER=odoo -e PASSWORD=odoo \\ odoo:18.0","title":"Uso b\u00e1sico con Docker"},{"location":"intro/odooinst/#uso-con-docker-compose","text":"La forma recomendada para producci\u00f3n y desarrollo es usar docker-compose . Ejemplo de archivo docker-compose.yml para Odoo 18 con PostgreSQL: services: web: image: odoo:18.0 depends_on: - db ports: - \"8069:8069\" volumes: - odoo-web-data:/var/lib/odoo - ./config:/etc/odoo - ./addons:/mnt/extra-addons environment: - PASSWORD_FILE=/run/secrets/postgresql_password secrets: - postgresql_password db: image: postgres:15 environment: - POSTGRES_DB=postgres - POSTGRES_PASSWORD_FILE=/run/secrets/postgresql_password - POSTGRES_USER=odoo - PGDATA=/var/lib/postgresql/data/pgdata volumes: - odoo-db-data:/var/lib/postgresql/data/pgdata secrets: - postgresql_password volumes: odoo-web-data: odoo-db-data: secrets: postgresql_password: file: odoo_pg_pass","title":"Uso con Docker Compose"},{"location":"intro/odooinst/#explicacion-rapida","text":"db : servicio que ejecuta PostgreSQL con datos persistentes en volumen. odoo : servicio que ejecuta Odoo, que se conecta a PostgreSQL. Los puertos 8069 del contenedor Odoo se exponen en el host para acceso web. Montar addons personalizados ubicados en ./addons . Usar un archivo de configuraci\u00f3n personalizado ubicado en .config/odoo.conf . Usar vol\u00famenes con nombre para los directorios de datos de Odoo y PostgreSQL. Usar un archivo de secrets llamado odoo_pg_pass que contiene la contrase\u00f1a de PostgreSQL compartida por ambos servicios.","title":"Explicaci\u00f3n r\u00e1pida:"},{"location":"intro/odooinst/#persistencia-de-datos-y-volumenes","text":"Los datos de PostgreSQL se guardan en el volumen odoo-db-data . Los datos y configuraciones de Odoo se guardan en el volumen odoo-web-data . Esto garantiza que la informaci\u00f3n persista aunque los contenedores se reinicien o eliminen.","title":"Persistencia de datos y vol\u00famenes"},{"location":"intro/odooinst/#actividad","text":"!!! Question \"Instalaci\u00f3n de Odoo\" 1. Haz una instalaci\u00f3n de Odoo utilizando docker-compose","title":"\ud83d\udcdd Actividad"},{"location":"intro/sge/","text":"Concepto de sistema de gesti\u00f3n empresarial Un sistema de gesti\u00f3n empresarial es un sistema inform\u00e1tico formado por aplicaciones que se encargan de las operaciones internas m\u00e1s importantes de una empresa como, por ejemplo: operaciones relacionadas con producci\u00f3n, pedidos, gastos, ventas, clientes, n\u00f3minas o inventarios, entre muchas otras. Los principales tipos de aplicaciones para la gesti\u00f3n empresarial son los siguientes: ERP (Enterprise Resource Planning) Constituyen el software de gesti\u00f3n empresarial por excelencia. Este programa integra y maneja m\u00faltiples tareas relacionadas con la producci\u00f3n y la distribuci\u00f3n. CRM (Customer Relationship Management) Es otro gran sistema de gesti\u00f3n empresarial en la actualidad. Se trata de una herramienta enfocada a la gesti\u00f3n de las ventas y la atenci\u00f3n a los clientes. SRM (Supplier Relationship Management) Este software trabaja con la finalidad de mejorar el contacto con los proveedores y compartir una metodolog\u00eda de trabajo que afiance las relaciones comerciales. BI (Business Intelligence) La inteligencia empresarial es un software creado para estructurar en informaci\u00f3n \u00fatil todos los datos que genera una organizaci\u00f3n, ya sean provenientes de las transacciones que se realice o de las campa\u00f1as de marketing que lleve a cabo. Concepto ERP ERP, Enterprise Resource Planning , [en castellano significa Planificaci\u00f3n De Recursos Empresariales]. La finalidad en un sistema planificaci\u00f3n es reducir el ciclo productivo, el tiempo de respuesta y los costes. Otra finalidad ser\u00eda optimizar las comunicaciones entre las partes implicadas, tambi\u00e9n mejorar la manipulaci\u00f3n de activos. El ERP permite a las empresas controlar todos los flujos de informaci\u00f3n que se generan en cada \u00e1mbito de la organizaci\u00f3n, como consecuencia de integrar todos sus departamentos. !!! tip \"Importante\" Los ERP ofrecen soluciones integradas por m\u00f3dulos o funcionalidades que permiten centralizar toda la informaci\u00f3n de la empresa en una base de datos \u00fanica y segura. La evoluci\u00f3n del ERP ha proporcionado a las empresas diversos beneficios: - Unificaci\u00f3n de procesos - Organizaci\u00f3n mediante estad\u00edsticas din\u00e1micas - Relacionar la informaci\u00f3n de manera eficiente para el proceso de an\u00e1lisis y decisi\u00f3n - Optimizaci\u00f3n de procesos empresariales - Acceso a informaci\u00f3n fiable, precisa y oportuna - Permite compartir informaci\u00f3n con todo el personal de los diversos departamentos de la organizaci\u00f3n - Eliminaci\u00f3n de datos y operaciones innecesarias - Reducci\u00f3n de tiempo y costes en los procesos Actualmente, los ERP integran todos los procesos internos y externos de la gesti\u00f3n, cubriendo las necesidades de las pymes y de las grandes empresas. Un ERP necesita gestionar: Procesos de comercio electr\u00f3nico Clientes (CRM) Suministros (SCM) Relaciones con proveedores Inteligencia empresarial Base de conocimiento Interacciones con clientes Ciclo de vida del producto (PLM) Concepto de CRM Un CRM ( Customer Relationship Management , o Gesti\u00f3n de las Relaciones con los Clientes ) es una aplicaci\u00f3n que permite centralizar en una \u00fanica base de datos todas las interacciones entre la empresa y sus clientes. Es un sistema de informaci\u00f3n que responde mejor a todos los requerimientos de la empresa con sus clientes. Incorpora todos los mecanismos necesarios para establecer relaciones satisfactorias y duraderas con los clientes. Est\u00e1 formado por dos partes muy diferenciadas: Una que se encarga de la l\u00f3gica operacional (realizar tareas) Otra que se encarga de la l\u00f3gica anal\u00edtica (analizar la informaci\u00f3n existente y obtener un beneficio o utilidad) En un CRM se registra la informaci\u00f3n de los clientes/contactos, a nivel individual y de organizaci\u00f3n, as\u00ed como sus interacciones. En funci\u00f3n del segmento se puede utilizar con fines de marketing, comerciales, operacionales, etc. Un CRM acostumbra a servir de apoyo al departamento comercial entre las empresas; permite gestionar campa\u00f1as publicitarias, agendar llamadas, enviar boletines o mensajes promocionales, gestionar acontecimientos, etc. Como resumen, diremos que un CRM sirve principalmente para tres cosas: A nivel interno en la empresa mejora la comunicaci\u00f3n interna. Las tareas relacionadas con los clientes son asignadas a empleados y se hace un seguimiento exhaustivo. Se mejora la productividad en el trabajo, ya que se evitan gran cantidad de correos electr\u00f3nicos, reuniones innecesarias, etc. Adem\u00e1s, centralizando toda la informaci\u00f3n sobre los clientes se ahorra tiempo, esfuerzo y trabajo. Los comerciales pueden vender m\u00e1s gracias a que pueden hacer un seguimiento de todas sus ventas de manera personalizada. Tambi\u00e9n pueden gestionar m\u00e1s de una venta a la vez. Funcionalidades del CRM VENTAS CALIDAD SERVICIO SEGUIMIENTO Caracter\u00edsticas, ventajas y desventajas IMPORTANTE En este apartado \u00fanicamente hablaremos del ERP, ya que cualquier caracter\u00edstica de este tambi\u00e9n lo ser\u00e1 de los CRM. Los CRM pueden formar parte de un ERP o ser independientes, con caracter\u00edsticas similares a las del ERP. CARACTER\u00cdSTICAS DE LOS ERP Son sistemas integrales: esto significa que se pueden controlar todos los procesos de una empresa, ya que cada departamento se relaciona con el resto. Por ejemplo, un cliente hace un pedido generando una orden de venta; a partir de ah\u00ed se pone el pedido en producci\u00f3n, se actualizan los stocks, se distribuye el producto, se cobra y se factura, generando todos los correspondientes asientos contables. No utilizamos el ERP en su manera integrada: la informaci\u00f3n est\u00e1 duplicada y crece. Necesitaremos un software para cada proceso y esto puede producir duplicados de informaci\u00f3n. Con un ERP, la informaci\u00f3n est\u00e1 protegida, ya que no podemos manipularla. Son sistemas modulares: la empresa est\u00e1 formada por departamentos que se relacionan entre s\u00ed, lo que implica que deben compartir informaci\u00f3n. Para facilitar este acceso, los ERP se dividen en m\u00f3dulos; solo instalaremos aquellos que se adec\u00faan a nuestra empresa, permitiendo as\u00ed la divisi\u00f3n de tareas. Son adaptables: los ERP permiten la adaptaci\u00f3n a los diferentes tipos de empresas. Para ello utilizamos la parametrizaci\u00f3n de los procesos dependiendo de las necesidades. Por ejemplo, podemos utilizar el mismo ERP en peque\u00f1as, medianas y grandes empresas, simplemente configurando cada ERP seg\u00fan la empresa en la que se instale. VENTAJAS Y DESVENTAJAS DE LOS ERP VENTAJAS DESVENTAJAS Estandarizaci\u00f3n e integraci\u00f3n de la informaci\u00f3n Costes a primera vista Mayor control organizacional Mucho tiempo de implementaci\u00f3n Minimiza el tiempo de an\u00e1lisis Adquisici\u00f3n y adaptaci\u00f3n de hardware Disminuye costos log\u00edsticos Pocos expertos en el sistema Informaci\u00f3n actualizada en tiempo real Dificultad en la utilizaci\u00f3n del sistema Optimiza tiempos de implantaci\u00f3n de proyectos Costes de licencias altos Evita informaci\u00f3n duplicada M\u00f3dulos configurables Mejora el servicio al cliente","title":"Sge"},{"location":"intro/sge/#concepto-de-sistema-de-gestion-empresarial","text":"Un sistema de gesti\u00f3n empresarial es un sistema inform\u00e1tico formado por aplicaciones que se encargan de las operaciones internas m\u00e1s importantes de una empresa como, por ejemplo: operaciones relacionadas con producci\u00f3n, pedidos, gastos, ventas, clientes, n\u00f3minas o inventarios, entre muchas otras. Los principales tipos de aplicaciones para la gesti\u00f3n empresarial son los siguientes:","title":"Concepto de sistema de gesti\u00f3n empresarial"},{"location":"intro/sge/#erp-enterprise-resource-planning","text":"Constituyen el software de gesti\u00f3n empresarial por excelencia. Este programa integra y maneja m\u00faltiples tareas relacionadas con la producci\u00f3n y la distribuci\u00f3n.","title":"ERP (Enterprise Resource Planning)"},{"location":"intro/sge/#crm-customer-relationship-management","text":"Es otro gran sistema de gesti\u00f3n empresarial en la actualidad. Se trata de una herramienta enfocada a la gesti\u00f3n de las ventas y la atenci\u00f3n a los clientes.","title":"CRM (Customer Relationship Management)"},{"location":"intro/sge/#srm-supplier-relationship-management","text":"Este software trabaja con la finalidad de mejorar el contacto con los proveedores y compartir una metodolog\u00eda de trabajo que afiance las relaciones comerciales.","title":"SRM (Supplier Relationship Management)"},{"location":"intro/sge/#bi-business-intelligence","text":"La inteligencia empresarial es un software creado para estructurar en informaci\u00f3n \u00fatil todos los datos que genera una organizaci\u00f3n, ya sean provenientes de las transacciones que se realice o de las campa\u00f1as de marketing que lleve a cabo.","title":"BI (Business Intelligence)"},{"location":"intro/sge/#concepto-erp","text":"ERP, Enterprise Resource Planning , [en castellano significa Planificaci\u00f3n De Recursos Empresariales]. La finalidad en un sistema planificaci\u00f3n es reducir el ciclo productivo, el tiempo de respuesta y los costes. Otra finalidad ser\u00eda optimizar las comunicaciones entre las partes implicadas, tambi\u00e9n mejorar la manipulaci\u00f3n de activos. El ERP permite a las empresas controlar todos los flujos de informaci\u00f3n que se generan en cada \u00e1mbito de la organizaci\u00f3n, como consecuencia de integrar todos sus departamentos. !!! tip \"Importante\" Los ERP ofrecen soluciones integradas por m\u00f3dulos o funcionalidades que permiten centralizar toda la informaci\u00f3n de la empresa en una base de datos \u00fanica y segura. La evoluci\u00f3n del ERP ha proporcionado a las empresas diversos beneficios: - Unificaci\u00f3n de procesos - Organizaci\u00f3n mediante estad\u00edsticas din\u00e1micas - Relacionar la informaci\u00f3n de manera eficiente para el proceso de an\u00e1lisis y decisi\u00f3n - Optimizaci\u00f3n de procesos empresariales - Acceso a informaci\u00f3n fiable, precisa y oportuna - Permite compartir informaci\u00f3n con todo el personal de los diversos departamentos de la organizaci\u00f3n - Eliminaci\u00f3n de datos y operaciones innecesarias - Reducci\u00f3n de tiempo y costes en los procesos Actualmente, los ERP integran todos los procesos internos y externos de la gesti\u00f3n, cubriendo las necesidades de las pymes y de las grandes empresas. Un ERP necesita gestionar: Procesos de comercio electr\u00f3nico Clientes (CRM) Suministros (SCM) Relaciones con proveedores Inteligencia empresarial Base de conocimiento Interacciones con clientes Ciclo de vida del producto (PLM)","title":"Concepto ERP"},{"location":"intro/sge/#concepto-de-crm","text":"Un CRM ( Customer Relationship Management , o Gesti\u00f3n de las Relaciones con los Clientes ) es una aplicaci\u00f3n que permite centralizar en una \u00fanica base de datos todas las interacciones entre la empresa y sus clientes. Es un sistema de informaci\u00f3n que responde mejor a todos los requerimientos de la empresa con sus clientes. Incorpora todos los mecanismos necesarios para establecer relaciones satisfactorias y duraderas con los clientes. Est\u00e1 formado por dos partes muy diferenciadas: Una que se encarga de la l\u00f3gica operacional (realizar tareas) Otra que se encarga de la l\u00f3gica anal\u00edtica (analizar la informaci\u00f3n existente y obtener un beneficio o utilidad) En un CRM se registra la informaci\u00f3n de los clientes/contactos, a nivel individual y de organizaci\u00f3n, as\u00ed como sus interacciones. En funci\u00f3n del segmento se puede utilizar con fines de marketing, comerciales, operacionales, etc. Un CRM acostumbra a servir de apoyo al departamento comercial entre las empresas; permite gestionar campa\u00f1as publicitarias, agendar llamadas, enviar boletines o mensajes promocionales, gestionar acontecimientos, etc. Como resumen, diremos que un CRM sirve principalmente para tres cosas: A nivel interno en la empresa mejora la comunicaci\u00f3n interna. Las tareas relacionadas con los clientes son asignadas a empleados y se hace un seguimiento exhaustivo. Se mejora la productividad en el trabajo, ya que se evitan gran cantidad de correos electr\u00f3nicos, reuniones innecesarias, etc. Adem\u00e1s, centralizando toda la informaci\u00f3n sobre los clientes se ahorra tiempo, esfuerzo y trabajo. Los comerciales pueden vender m\u00e1s gracias a que pueden hacer un seguimiento de todas sus ventas de manera personalizada. Tambi\u00e9n pueden gestionar m\u00e1s de una venta a la vez. Funcionalidades del CRM VENTAS CALIDAD SERVICIO SEGUIMIENTO","title":"Concepto de CRM"},{"location":"intro/sge/#caracteristicas-ventajas-y-desventajas","text":"","title":"Caracter\u00edsticas, ventajas y desventajas"},{"location":"intro/sge/#importante","text":"En este apartado \u00fanicamente hablaremos del ERP, ya que cualquier caracter\u00edstica de este tambi\u00e9n lo ser\u00e1 de los CRM. Los CRM pueden formar parte de un ERP o ser independientes, con caracter\u00edsticas similares a las del ERP.","title":"IMPORTANTE"},{"location":"intro/sge/#caracteristicas-de-los-erp","text":"Son sistemas integrales: esto significa que se pueden controlar todos los procesos de una empresa, ya que cada departamento se relaciona con el resto. Por ejemplo, un cliente hace un pedido generando una orden de venta; a partir de ah\u00ed se pone el pedido en producci\u00f3n, se actualizan los stocks, se distribuye el producto, se cobra y se factura, generando todos los correspondientes asientos contables. No utilizamos el ERP en su manera integrada: la informaci\u00f3n est\u00e1 duplicada y crece. Necesitaremos un software para cada proceso y esto puede producir duplicados de informaci\u00f3n. Con un ERP, la informaci\u00f3n est\u00e1 protegida, ya que no podemos manipularla. Son sistemas modulares: la empresa est\u00e1 formada por departamentos que se relacionan entre s\u00ed, lo que implica que deben compartir informaci\u00f3n. Para facilitar este acceso, los ERP se dividen en m\u00f3dulos; solo instalaremos aquellos que se adec\u00faan a nuestra empresa, permitiendo as\u00ed la divisi\u00f3n de tareas. Son adaptables: los ERP permiten la adaptaci\u00f3n a los diferentes tipos de empresas. Para ello utilizamos la parametrizaci\u00f3n de los procesos dependiendo de las necesidades. Por ejemplo, podemos utilizar el mismo ERP en peque\u00f1as, medianas y grandes empresas, simplemente configurando cada ERP seg\u00fan la empresa en la que se instale.","title":"CARACTER\u00cdSTICAS DE LOS ERP"},{"location":"intro/sge/#ventajas-y-desventajas-de-los-erp","text":"VENTAJAS DESVENTAJAS Estandarizaci\u00f3n e integraci\u00f3n de la informaci\u00f3n Costes a primera vista Mayor control organizacional Mucho tiempo de implementaci\u00f3n Minimiza el tiempo de an\u00e1lisis Adquisici\u00f3n y adaptaci\u00f3n de hardware Disminuye costos log\u00edsticos Pocos expertos en el sistema Informaci\u00f3n actualizada en tiempo real Dificultad en la utilizaci\u00f3n del sistema Optimiza tiempos de implantaci\u00f3n de proyectos Costes de licencias altos Evita informaci\u00f3n duplicada M\u00f3dulos configurables Mejora el servicio al cliente","title":"VENTAJAS Y DESVENTAJAS DE LOS ERP"},{"location":"intro/tiposinst/","text":"Tipos de licencias Actualmente hay un gran n\u00famero de aplicaciones que pueden ser utilizadas por las empresas. Todas ellas llevan un determinado tipo de licencia. Por otra parte, han proliferado un gran n\u00famero de tipos de licencias de software. En consecuencia, tenemos que poder reconocer la licencia que acompa\u00f1a a cada software y cu\u00e1les son sus implicaciones. IMPORTANTE Seg\u00fan indica la Real Academia Espa\u00f1ola, una licencia es una \"autorizaci\u00f3n que se concede para explotar con fines industriales o comerciales una patente, marca o derecho\". En el caso del software, una licencia permite el uso con el consentimiento del autor e implica una serie de derechos y deberes. A causa de que los derechos y deberes que los autores pueden asignar a sus obras son de varios tipos, han aparecido gran n\u00famero de tipos de licencias que, b\u00e1sicamente, podemos clasificar en dos grandes grupos: Software privativo Software libre El software libre ( free software ) es aquel que permite al usuario el uso total del producto adquirido. El software privativo es aquel que no lo es. A. El software libre en el mercado de los ERP El software privativo ha sido generado y gestionado por grandes empresas (proveedores). Se paga por las licencias de uso, los costes de implantaci\u00f3n, la adaptaci\u00f3n del ERP a la empresa y las actualizaciones/correcciones/errores. Esto se garantiza mediante un contrato de mantenimiento (econ\u00f3micamente elevado), que garantiza al cliente la reparaci\u00f3n de errores en el software y las actualizaciones peri\u00f3dicas. El software libre, por el contrario, implica la implementaci\u00f3n anual por el usuario; o bien contratando o colaborando por las horas trabajadas. No se paga licencia y para las actualizaciones no hay una garant\u00eda como tal; sino que la comunidad desarrolladora repara el error o actualiza la versi\u00f3n en un plazo no determinado. El usuario es el encargado de estar atento si quiere tener el sistema actualizado. Ventajas del software libre: Software y actualizaciones gratis. Gran cantidad de informaci\u00f3n de f\u00e1cil acceso en foros y comunidades de usuarios. Gran cantidad de aplicaciones ERP. Algunos ejemplos Openbravo Es una iniciativa de origen espa\u00f1ol. Aunque Openbravo se considere como software libre, su modelo de negocio incluye: Parte abierta Parte de m\u00f3dulos de pago Otros licenciados con licencia OBPL ( Openbravo Public License ) El resto de m\u00f3dulos tienen licencia OBCL ( Openbravo Commercial License ), y para ser instalados se debe realizar el pago de una suscripci\u00f3n. Odoo De origen Belga, se caracteriza por tener una amplia variedad de m\u00f3dulos. Presenta dos versiones: Odoo Community [c\u00f3digo abierto] y Odoo Enterprise [con licencia]. Pasos previos a la instalaci\u00f3n Aunque depende del sistema operativo y del tipo de instalaci\u00f3n elegida, las tareas para instalar y configurar el ERP son, en resumen, las siguientes: Dise\u00f1ar la instalaci\u00f3n : antes de instalar, debemos realizar un estudio de las necesidades de la empresa y plantear c\u00f3mo las va a resolver la aplicaci\u00f3n ERP: tablas que necesitamos adaptar, datos, formularios e informes necesarios, etc. Instalaci\u00f3n de equipos : es imprescindible la instalaci\u00f3n, revisi\u00f3n y/o actualizaci\u00f3n del hardware de la empresa donde se va a instalar, de manera que se cumplan los requisitos m\u00ednimos necesarios. Algunas veces, la empresa puede decidir contratar los servicios externos y acceder as\u00ed a los recursos remotos. Instalaci\u00f3n del software : adem\u00e1s del ERP, deberemos instalar todo aquel software necesario para el correcto funcionamiento del sistema. Adaptar y configurar el programa : una vez instalada la aplicaci\u00f3n, debemos configurar y adaptar el software a la empresa cliente. Migrar los datos : este es uno de los pasos m\u00e1s importantes ya que los datos de la empresa son necesarios para su correcto funcionamiento; debemos migrar datos de clientes y proveedores; la contabilidad; facturaci\u00f3n; etc. Realizar pruebas : habr\u00e1 que realizar pruebas para comprobar que el ERP funciona correctamente y que los resultados son satisfactorios. Documentar el sistema : se deben crear manuales y documentar todos los procesos realizados. Formar a los usuarios : se debe formar a los usuarios para que utilicen el ERP; normalmente se realiza una formaci\u00f3n inicial para responsables del proyecto y otra para usuarios finales. Tipos de instalaci\u00f3n El tipo de instalaci\u00f3n del ERP/CRM depender\u00e1 de la plataforma en la que lo instalemos y del ERP que vayamos a utilizar. Los m\u00e1s habituales son los siguientes: Tipos de instalaci\u00f3n ERP/CRM Instalaci\u00f3n mediante m\u00e1quina virtual Tanto la aplicaci\u00f3n como todos los programas necesarios para el funcionamiento del ERP se proporcionan en una m\u00e1quina virtual que est\u00e1 lista para ser ejecutada. Esta opci\u00f3n no es apta para un entorno en producci\u00f3n y normalmente se utiliza para hacer una primera evaluaci\u00f3n del producto. Instalaci\u00f3n de paquetes en entorno gr\u00e1fico En este caso utilizamos el entorno gr\u00e1fico del sistema operativo para instalar la aplicaci\u00f3n y hacemos uso de los asistentes que instalan y resuelven las dependencias entre los paquetes. Normalmente este tipo de instalaci\u00f3n se suele utilizar en entornos de producci\u00f3n. Instalaci\u00f3n personalizada Para instalar una versi\u00f3n m\u00e1s reciente de la aplicaci\u00f3n, podemos descargarnos los paquetes fuente desde la p\u00e1gina web que los contenga, e instalar el ERP mediante comandos. Esta opci\u00f3n permite controlar los programas que instalaremos y sus dependencias, aunque suele ser un proceso m\u00e1s complejo que la instalaci\u00f3n en entorno gr\u00e1fico. No instalar o acceder a la aplicaci\u00f3n en l\u00ednea Algunos ERP permiten acceder a demostraciones online de sus productos; de esta forma no instalamos nada, nos conectamos a un servidor de Internet que ya tiene todos los datos de la aplicaci\u00f3n. Normalmente esta opci\u00f3n la utilizan los proveedores de ERP que ofrecen el servicio SaaS. Tipos de instalaci\u00f3n Odoo Instalaci\u00f3n mediante m\u00e1quina virtual Simplemente pondremos en funcionamiento una imagen de Odoo sobre una m\u00e1quina virtual o sobre Docker . Instalaci\u00f3n de paquetes en entorno gr\u00e1fico Utilizamos el entorno gr\u00e1fico del sistema operativo para instalar la aplicaci\u00f3n y hacemos uso de los asistentes que instalan y resuelven las dependencias entre los paquetes. Podemos utilizar cualquier sistema operativo, libre o con licencia. Para los usuarios no expertos, podr\u00edamos utilizar un sistema Windows actual y seguir los pasos de la instalaci\u00f3n. Este tipo de instalaci\u00f3n no requiere muchos conocimientos previos. Podemos descargar Odoo desde su p\u00e1gina web. Encontrar\u00e1s el link en la secci\u00f3n Enlaces de descarga de esta unidad. Instalaci\u00f3n personalizada Este es el tipo de instalaci\u00f3n que utilizaremos. Nos centraremos en la preparaci\u00f3n y posterior instalaci\u00f3n paso a paso. No instalar o acceder a la aplicaci\u00f3n en l\u00ednea Para tener una idea r\u00e1pida de Odoo, hay instancias de demostraci\u00f3n disponibles. Son instancias compartidas que solo viven unas pocas horas y que se pueden usar para navegar y probar cosas sin compromiso. Las instancias de demostraci\u00f3n no requieren instalaci\u00f3n local, solo un navegador web. El SaaS debe ir acompa\u00f1ado con una instancia privada e ilimitada pero gratis. Se puede usar para descubrir y probar las aplicaciones personalizadas sin c\u00f3digo (es decir, incompatible con m\u00f3dulos personalizados o con la Tienda de aplicaciones de Odoo) y sin tener que instalarlo localmente. Puede usarse tanto para prueba como para uso profesional a largo plazo. Tal y como pasa en las instancias demo de demostraci\u00f3n, las instancias SaaS tampoco requieren instalaci\u00f3n local. Tenemos acceso a ella en la secci\u00f3n trial , en la web de Odoo. Formas de trabajar Los ERP pueden trabajar de dos maneras: Desde uno o varios ordenadores en red mediante una aplicaci\u00f3n web con un navegador para conectar el ERP (como Odoo). Desde un servidor de la empresa al que se puede acceder a trav\u00e9s de Internet o desde una intranet (solo desde cualquier terminal interno). Debemos indicar en cada caso al servidor al que nos vamos a conectar. Hay dos opciones: Monousuario La base de datos y la aplicaci\u00f3n est\u00e1n alojadas en el mismo equipo, adyacente a s\u00ed mismo directamente. En este caso nos conectamos directamente indicando localhost , refiri\u00e9ndonos al equipo donde tenemos instalado nuestro ERP.","title":"Tiposinst"},{"location":"intro/tiposinst/#tipos-de-licencias","text":"Actualmente hay un gran n\u00famero de aplicaciones que pueden ser utilizadas por las empresas. Todas ellas llevan un determinado tipo de licencia. Por otra parte, han proliferado un gran n\u00famero de tipos de licencias de software. En consecuencia, tenemos que poder reconocer la licencia que acompa\u00f1a a cada software y cu\u00e1les son sus implicaciones. IMPORTANTE Seg\u00fan indica la Real Academia Espa\u00f1ola, una licencia es una \"autorizaci\u00f3n que se concede para explotar con fines industriales o comerciales una patente, marca o derecho\". En el caso del software, una licencia permite el uso con el consentimiento del autor e implica una serie de derechos y deberes. A causa de que los derechos y deberes que los autores pueden asignar a sus obras son de varios tipos, han aparecido gran n\u00famero de tipos de licencias que, b\u00e1sicamente, podemos clasificar en dos grandes grupos: Software privativo Software libre El software libre ( free software ) es aquel que permite al usuario el uso total del producto adquirido. El software privativo es aquel que no lo es.","title":"Tipos de licencias"},{"location":"intro/tiposinst/#a-el-software-libre-en-el-mercado-de-los-erp","text":"El software privativo ha sido generado y gestionado por grandes empresas (proveedores). Se paga por las licencias de uso, los costes de implantaci\u00f3n, la adaptaci\u00f3n del ERP a la empresa y las actualizaciones/correcciones/errores. Esto se garantiza mediante un contrato de mantenimiento (econ\u00f3micamente elevado), que garantiza al cliente la reparaci\u00f3n de errores en el software y las actualizaciones peri\u00f3dicas. El software libre, por el contrario, implica la implementaci\u00f3n anual por el usuario; o bien contratando o colaborando por las horas trabajadas. No se paga licencia y para las actualizaciones no hay una garant\u00eda como tal; sino que la comunidad desarrolladora repara el error o actualiza la versi\u00f3n en un plazo no determinado. El usuario es el encargado de estar atento si quiere tener el sistema actualizado. Ventajas del software libre: Software y actualizaciones gratis. Gran cantidad de informaci\u00f3n de f\u00e1cil acceso en foros y comunidades de usuarios. Gran cantidad de aplicaciones ERP.","title":"A. El software libre en el mercado de los ERP"},{"location":"intro/tiposinst/#algunos-ejemplos","text":"Openbravo Es una iniciativa de origen espa\u00f1ol. Aunque Openbravo se considere como software libre, su modelo de negocio incluye: Parte abierta Parte de m\u00f3dulos de pago Otros licenciados con licencia OBPL ( Openbravo Public License ) El resto de m\u00f3dulos tienen licencia OBCL ( Openbravo Commercial License ), y para ser instalados se debe realizar el pago de una suscripci\u00f3n. Odoo De origen Belga, se caracteriza por tener una amplia variedad de m\u00f3dulos. Presenta dos versiones: Odoo Community [c\u00f3digo abierto] y Odoo Enterprise [con licencia].","title":"Algunos ejemplos"},{"location":"intro/tiposinst/#pasos-previos-a-la-instalacion","text":"Aunque depende del sistema operativo y del tipo de instalaci\u00f3n elegida, las tareas para instalar y configurar el ERP son, en resumen, las siguientes: Dise\u00f1ar la instalaci\u00f3n : antes de instalar, debemos realizar un estudio de las necesidades de la empresa y plantear c\u00f3mo las va a resolver la aplicaci\u00f3n ERP: tablas que necesitamos adaptar, datos, formularios e informes necesarios, etc. Instalaci\u00f3n de equipos : es imprescindible la instalaci\u00f3n, revisi\u00f3n y/o actualizaci\u00f3n del hardware de la empresa donde se va a instalar, de manera que se cumplan los requisitos m\u00ednimos necesarios. Algunas veces, la empresa puede decidir contratar los servicios externos y acceder as\u00ed a los recursos remotos. Instalaci\u00f3n del software : adem\u00e1s del ERP, deberemos instalar todo aquel software necesario para el correcto funcionamiento del sistema. Adaptar y configurar el programa : una vez instalada la aplicaci\u00f3n, debemos configurar y adaptar el software a la empresa cliente. Migrar los datos : este es uno de los pasos m\u00e1s importantes ya que los datos de la empresa son necesarios para su correcto funcionamiento; debemos migrar datos de clientes y proveedores; la contabilidad; facturaci\u00f3n; etc. Realizar pruebas : habr\u00e1 que realizar pruebas para comprobar que el ERP funciona correctamente y que los resultados son satisfactorios. Documentar el sistema : se deben crear manuales y documentar todos los procesos realizados. Formar a los usuarios : se debe formar a los usuarios para que utilicen el ERP; normalmente se realiza una formaci\u00f3n inicial para responsables del proyecto y otra para usuarios finales.","title":"Pasos previos a la instalaci\u00f3n"},{"location":"intro/tiposinst/#tipos-de-instalacion","text":"El tipo de instalaci\u00f3n del ERP/CRM depender\u00e1 de la plataforma en la que lo instalemos y del ERP que vayamos a utilizar. Los m\u00e1s habituales son los siguientes:","title":"Tipos de instalaci\u00f3n"},{"location":"intro/tiposinst/#tipos-de-instalacion-erpcrm","text":"Instalaci\u00f3n mediante m\u00e1quina virtual Tanto la aplicaci\u00f3n como todos los programas necesarios para el funcionamiento del ERP se proporcionan en una m\u00e1quina virtual que est\u00e1 lista para ser ejecutada. Esta opci\u00f3n no es apta para un entorno en producci\u00f3n y normalmente se utiliza para hacer una primera evaluaci\u00f3n del producto. Instalaci\u00f3n de paquetes en entorno gr\u00e1fico En este caso utilizamos el entorno gr\u00e1fico del sistema operativo para instalar la aplicaci\u00f3n y hacemos uso de los asistentes que instalan y resuelven las dependencias entre los paquetes. Normalmente este tipo de instalaci\u00f3n se suele utilizar en entornos de producci\u00f3n. Instalaci\u00f3n personalizada Para instalar una versi\u00f3n m\u00e1s reciente de la aplicaci\u00f3n, podemos descargarnos los paquetes fuente desde la p\u00e1gina web que los contenga, e instalar el ERP mediante comandos. Esta opci\u00f3n permite controlar los programas que instalaremos y sus dependencias, aunque suele ser un proceso m\u00e1s complejo que la instalaci\u00f3n en entorno gr\u00e1fico. No instalar o acceder a la aplicaci\u00f3n en l\u00ednea Algunos ERP permiten acceder a demostraciones online de sus productos; de esta forma no instalamos nada, nos conectamos a un servidor de Internet que ya tiene todos los datos de la aplicaci\u00f3n. Normalmente esta opci\u00f3n la utilizan los proveedores de ERP que ofrecen el servicio SaaS.","title":"Tipos de instalaci\u00f3n ERP/CRM"},{"location":"intro/tiposinst/#tipos-de-instalacion-odoo","text":"Instalaci\u00f3n mediante m\u00e1quina virtual Simplemente pondremos en funcionamiento una imagen de Odoo sobre una m\u00e1quina virtual o sobre Docker . Instalaci\u00f3n de paquetes en entorno gr\u00e1fico Utilizamos el entorno gr\u00e1fico del sistema operativo para instalar la aplicaci\u00f3n y hacemos uso de los asistentes que instalan y resuelven las dependencias entre los paquetes. Podemos utilizar cualquier sistema operativo, libre o con licencia. Para los usuarios no expertos, podr\u00edamos utilizar un sistema Windows actual y seguir los pasos de la instalaci\u00f3n. Este tipo de instalaci\u00f3n no requiere muchos conocimientos previos. Podemos descargar Odoo desde su p\u00e1gina web. Encontrar\u00e1s el link en la secci\u00f3n Enlaces de descarga de esta unidad. Instalaci\u00f3n personalizada Este es el tipo de instalaci\u00f3n que utilizaremos. Nos centraremos en la preparaci\u00f3n y posterior instalaci\u00f3n paso a paso. No instalar o acceder a la aplicaci\u00f3n en l\u00ednea Para tener una idea r\u00e1pida de Odoo, hay instancias de demostraci\u00f3n disponibles. Son instancias compartidas que solo viven unas pocas horas y que se pueden usar para navegar y probar cosas sin compromiso. Las instancias de demostraci\u00f3n no requieren instalaci\u00f3n local, solo un navegador web. El SaaS debe ir acompa\u00f1ado con una instancia privada e ilimitada pero gratis. Se puede usar para descubrir y probar las aplicaciones personalizadas sin c\u00f3digo (es decir, incompatible con m\u00f3dulos personalizados o con la Tienda de aplicaciones de Odoo) y sin tener que instalarlo localmente. Puede usarse tanto para prueba como para uso profesional a largo plazo. Tal y como pasa en las instancias demo de demostraci\u00f3n, las instancias SaaS tampoco requieren instalaci\u00f3n local. Tenemos acceso a ella en la secci\u00f3n trial , en la web de Odoo.","title":"Tipos de instalaci\u00f3n Odoo"},{"location":"intro/tiposinst/#formas-de-trabajar","text":"Los ERP pueden trabajar de dos maneras: Desde uno o varios ordenadores en red mediante una aplicaci\u00f3n web con un navegador para conectar el ERP (como Odoo). Desde un servidor de la empresa al que se puede acceder a trav\u00e9s de Internet o desde una intranet (solo desde cualquier terminal interno). Debemos indicar en cada caso al servidor al que nos vamos a conectar. Hay dos opciones: Monousuario La base de datos y la aplicaci\u00f3n est\u00e1n alojadas en el mismo equipo, adyacente a s\u00ed mismo directamente. En este caso nos conectamos directamente indicando localhost , refiri\u00e9ndonos al equipo donde tenemos instalado nuestro ERP.","title":"Formas de trabajar"},{"location":"intro/vscode/","text":"Visual Studio Code Visual Studio Code es un editor de c\u00f3digo gratuito que funciona en los sistemas operativos macOS, Linux y Windows. Su instalaci\u00f3n es r\u00e1pida y sencilla, permiti\u00e9ndote comenzar a trabajar en minutos. VS Code es ligero y deber\u00eda funcionar en la mayor\u00eda de los equipos y versiones de plataformas disponibles. Puedes revisar los Requisitos del sistema para verificar si tu configuraci\u00f3n de computadora es compatible. Configuraci\u00f3n de VS Code para tu plataforma Descargar e instalar Visual Studio Code para tu plataforma macOS Linux Windows Nota: VS Code publica nuevas versiones mensualmente y admite actualizaciones autom\u00e1ticas cuando una nueva versi\u00f3n est\u00e1 disponible. Instalar extensiones de VS Code desde el Marketplace de Visual Studio Personaliza VS Code con temas, formateadores, extensiones de lenguaje y depuradores para tus lenguajes favoritos, entre otros. Visual Studio en Debian Completa los siguientes pasos para instalar Visual Studio Code en tu sistema Debian. Empieza por actualizar el \u00edndice de paquetes e instalar las dependencias escribiendo: apt update apt install software-properties-common apt-transport-https curl Importa la clave GPG de Microsoft usando el siguiente comando curl : curl -sSL https://packages.microsoft.com/keys/microsoft.asc | apt-key add - A\u00f1ade el repositorio de Visual Studio Code a tu sistema: add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" Despu\u00e9s de agregar el repositorio, instala la \u00faltima versi\u00f3n de Visual Studio Code: apt update apt install code \u00a1Eso es todo! Visual Studio Code ha sido instalado en tu escritorio Debian y ya puedes comenzar a usarlo. Pr\u00f3ximos pasos Una vez que hayas instalado VS Code, estos temas te ayudar\u00e1n a aprender m\u00e1s sobre \u00e9l: Tutorial de VS Code : Un recorrido pr\u00e1ctico por las caracter\u00edsticas clave de VS Code. Consejos y trucos : Una colecci\u00f3n de consejos de productividad para trabajar con VS Code. Codificaci\u00f3n asistida por IA : Aprende a usar GitHub Copilot en VS Code para ayudarte a escribir c\u00f3digo m\u00e1s r\u00e1pido. \ud83d\udcdd Actividad !!! Question \"Instala vscode\" 1. Haz una instalaci\u00f3n de vscode.","title":"Visual Studio Code"},{"location":"intro/vscode/#visual-studio-code","text":"Visual Studio Code es un editor de c\u00f3digo gratuito que funciona en los sistemas operativos macOS, Linux y Windows. Su instalaci\u00f3n es r\u00e1pida y sencilla, permiti\u00e9ndote comenzar a trabajar en minutos. VS Code es ligero y deber\u00eda funcionar en la mayor\u00eda de los equipos y versiones de plataformas disponibles. Puedes revisar los Requisitos del sistema para verificar si tu configuraci\u00f3n de computadora es compatible.","title":"Visual Studio Code"},{"location":"intro/vscode/#configuracion-de-vs-code-para-tu-plataforma","text":"Descargar e instalar Visual Studio Code para tu plataforma macOS Linux Windows Nota: VS Code publica nuevas versiones mensualmente y admite actualizaciones autom\u00e1ticas cuando una nueva versi\u00f3n est\u00e1 disponible. Instalar extensiones de VS Code desde el Marketplace de Visual Studio Personaliza VS Code con temas, formateadores, extensiones de lenguaje y depuradores para tus lenguajes favoritos, entre otros.","title":"Configuraci\u00f3n de VS Code para tu plataforma"},{"location":"intro/vscode/#visual-studio-en-debian","text":"Completa los siguientes pasos para instalar Visual Studio Code en tu sistema Debian. Empieza por actualizar el \u00edndice de paquetes e instalar las dependencias escribiendo: apt update apt install software-properties-common apt-transport-https curl Importa la clave GPG de Microsoft usando el siguiente comando curl : curl -sSL https://packages.microsoft.com/keys/microsoft.asc | apt-key add - A\u00f1ade el repositorio de Visual Studio Code a tu sistema: add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" Despu\u00e9s de agregar el repositorio, instala la \u00faltima versi\u00f3n de Visual Studio Code: apt update apt install code \u00a1Eso es todo! Visual Studio Code ha sido instalado en tu escritorio Debian y ya puedes comenzar a usarlo.","title":"Visual Studio en Debian"},{"location":"intro/vscode/#proximos-pasos","text":"Una vez que hayas instalado VS Code, estos temas te ayudar\u00e1n a aprender m\u00e1s sobre \u00e9l: Tutorial de VS Code : Un recorrido pr\u00e1ctico por las caracter\u00edsticas clave de VS Code. Consejos y trucos : Una colecci\u00f3n de consejos de productividad para trabajar con VS Code. Codificaci\u00f3n asistida por IA : Aprende a usar GitHub Copilot en VS Code para ayudarte a escribir c\u00f3digo m\u00e1s r\u00e1pido.","title":"Pr\u00f3ximos pasos"},{"location":"intro/vscode/#actividad","text":"!!! Question \"Instala vscode\" 1. Haz una instalaci\u00f3n de vscode.","title":"\ud83d\udcdd Actividad"},{"location":"modelos/basicfields/","text":"Creaci\u00f3n de un modelo Vamos a ver de manera detallada c\u00f3mo crear un modelo en Odoo 18 . Estructura previa del m\u00f3dulo Suponemos que ya tienes un m\u00f3dulo visible en Odoo con el manifest m\u00ednimo. La estructura deber\u00eda incluir al menos: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u2514\u2500 models/ \u2514\u2500 __init__.py Si no existe models/ o alguno de los __init__ , cr\u00e9alos ahora (vac\u00edos). C\u00f3digo del modelo Ruta del archivo: task_app/models/task_model.py # task_app/models/task_model.py from odoo import fields, models class TaskModel(models.Model): _name = \"task_app.task_model\" _description = \"Task (basic model)\" name = fields.Char(string=\"Name\", required=True, index=True) description = fields.Text(string=\"Description\") is_done = fields.Boolean(string=\"Done\", default=False) Explicaci\u00f3n detallada Importaciones from odoo import fields, models Importa el ORM de Odoo. models.Model es la clase base para todos los modelos, y fields contiene los tipos de campos disponibles (Char, Text, Boolean, Many2one, etc.). Definici\u00f3n de la clase class TaskModel(models.Model): Declara una clase de modelo que hereda de models.Model . El nombre de la clase en Python (p. ej., TaskModel ) puede ser cualquiera, pero por convenci\u00f3n se usa CamelCase y describe la entidad. Metadatos del modelo _name = \"task_app.task_model\" Es el nombre t\u00e9cnico del modelo (tambi\u00e9n llamado model name ). Suele incluir el prefijo del m\u00f3dulo ( task_app ) para evitar colisiones con otros m\u00f3dulos. Este nombre se usa en vistas XML, reglas de acceso, dominios, etc. _description = \"Task (basic model)\" Cadena legible que describe el modelo. Se utiliza en la interfaz para etiquetas y t\u00edtulos. Campos del modelo name = fields.Char(...) Campo de texto corto . string=\"Name\" etiqueta visible en la UI. required=True obliga a que tenga valor antes de crear/guardar el registro. index=True crea un \u00edndice en BD para b\u00fasquedas m\u00e1s r\u00e1pidas por este campo. description = fields.Text(...) Campo de texto largo (sin l\u00edmite pr\u00e1ctico a nivel de ORM). Ideal para descripciones. is_done = fields.Boolean(...) Campo booleano . default=False define el valor por defecto al crear registros. Sugerencia: Si no especificas _rec_name , Odoo usa por defecto el campo name para representar el registro (por ejemplo, en desplegables Many2one). Notas m\u00ednimas para que Odoo cargue el modelo Aseg\u00farate de importar el archivo en task_app/models/__init__.py (por ejemplo: from . import task_model ). Incluye el m\u00f3dulo en tu base de datos y actual\u00edzalo desde Apps o con -u task_app si trabajas desde la l\u00ednea de comandos. Basado en la referencia oficial del ORM de Odoo 18: - Documentaci\u00f3n ORM (fields): https://www.odoo.com/documentation/18.0/developer/reference/backend/orm.html#fields Campos b\u00e1sicos Char Texto corto . \u00datil para nombres, c\u00f3digos, t\u00edtulos. Atributos t\u00edpicos: size (l\u00edmite de longitud), index , required . code = fields.Char(string=\"C\u00f3digo\", size=32, index=True, required=True) Text Texto largo sin l\u00edmite pr\u00e1ctico (almacenado como text en PostgreSQL). description = fields.Text(string=\"Descripci\u00f3n\") Boolean Verdadero / Falso . is_done = fields.Boolean(string=\"Realizada\", default=False) Integer Entero (32 bits). priority = fields.Integer(string=\"Prioridad\", default=0) Float N\u00famero decimal . Atributo digits para control de precisi\u00f3n. weight = fields.Float(string=\"Peso (kg)\", digits=(16, 2)) Monetary Decimal asociado a una moneda ( currency_field ). currency_id = fields.Many2one(\"res.currency\", string=\"Moneda\") amount = fields.Monetary(string=\"Importe\", currency_field=\"currency_id\", digits=(16, 2)) Date Fecha sin hora. deadline = fields.Date(string=\"Fecha l\u00edmite\") Datetime Fecha y hora (timezone-aware a nivel de UI). scheduled_at = fields.Datetime(string=\"Programada\") Selection Valor enumerado entre opciones cerradas. Puedes usar selection=[(...), ...] o selection=_method . state = fields.Selection( [ (\"draft\", \"Borrador\"), (\"progress\", \"En progreso\"), (\"done\", \"Hecho\"), (\"cancel\", \"Cancelado\"), ], string=\"Estado\", default=\"draft\", index=True, ) Binary Binario (archivos). Suele usarse con attachment=True para almacenar en adjuntos. file_data = fields.Binary(string=\"Adjunto\", attachment=True) Html HTML enriquecido (editor WYSIWYG). notes_html = fields.Html(string=\"Notas\") Image Imagen almacenada en binario con utilidades de redimensionado . image = fields.Image(string=\"Imagen\", max_width=512, max_height=512) 2) Campos relacionales Many2one Relaci\u00f3n muchas a una hacia otro modelo (crea columna <campo>_id ). Atributos clave: comodel_name , ondelete , domain , context , index . partner_id = fields.Many2one( \"res.partner\", string=\"Contacto\", ondelete=\"set null\", index=True, domain=[(\"active\", \"=\", True)], ) One2many Relaci\u00f3n una a muchas (virtual), inversa a un Many2one en el modelo destino. Requiere comodel_name y inverse_name (el Many2one que apunta a este modelo). line_ids = fields.One2many( \"task.line\", \"task_id\", # inverse_name en el modelo task.line string=\"L\u00edneas\" ) Many2many Relaci\u00f3n muchas a muchas usando una tabla relacional. Se puede especificar tabla/columnas o dejar que Odoo las genere. tag_ids = fields.Many2many( \"task.tag\", \"task_tag_rel\", # nombre de la tabla relacional (opcional) \"task_id\", # columna que referencia a este modelo (opcional) \"tag_id\", # columna que referencia al comodel (opcional) string=\"Etiquetas\", ) 3) Campos computados y relacionados Campo computado ( compute ) El valor se calcula por c\u00f3digo. Con store=True se guarda en BD (y define dependencias con @api.depends ). from odoo import api, fields, models class Task(models.Model): _name = \"x.task\" name = fields.Char(required=True) hours = fields.Float() rate = fields.Float() amount = fields.Float(compute=\"_compute_amount\", store=True) @api.depends(\"hours\", \"rate\") def _compute_amount(self): for rec in self: rec.amount = rec.hours * rec.rate Campo relacionado ( related ) Apunta a un campo de otra relaci\u00f3n. Opcionalmente store=True para almacenar una copia sincronizada. partner_country = fields.Many2one( related=\"partner_id.country_id\", comodel_name=\"res.country\", string=\"Pa\u00eds (cliente)\", store=True, readonly=True, ) 4) Atributos comunes (cheatsheet) No todos aplican a todos los tipos; consulta la doc oficial para detalles y compatibilidades. string=\"Etiqueta\" \u2192 Texto mostrado en la UI. help=\"Texto de ayuda\" \u2192 Tooltip de ayuda. required=True \u2192 Hace obligatorio el campo. default=<valor|funci\u00f3n> \u2192 Valor por defecto (literal o funci\u00f3n/ lambda ). index=True \u2192 \u00cdndice en BD (b\u00fasqueda m\u00e1s r\u00e1pida). copy=True/False \u2192 Se copia al duplicar el registro. readonly=True \u2192 Solo lectura en la UI (no evita cambios por c\u00f3digo). states={...} \u2192 Modifica atributos seg\u00fan estado (vistas form). groups=\"module.group_xmlid\" \u2192 Visibilidad/edici\u00f3n restringida a grupos. tracking=True/number \u2192 Rastreo en chatter (si el modelo hereda de mail.thread ). translate=True \u2192 Traducci\u00f3n (en Char , Text , Html , etc.). size=NN \u2192 Longitud m\u00e1xima (principalmente Char ). digits=(precision, escala) \u2192 Precisi\u00f3n en Float/Monetary . currency_field=\"currency_id\" \u2192 Campo moneda asociado ( Monetary ). domain=[(...)] \u2192 Filtrado din\u00e1mico en relacionales (UI/ORM). context={...} \u2192 Valores por defecto, comportamiento contexto. ondelete=\"restrict|cascade|set null|set default\" \u2192 Pol\u00edtica al eliminar ( Many2one ). compute=\"_method\" \u2192 Campo computado; comb\u00ednalo con @api.depends . inverse=\"_method\" \u2192 Acci\u00f3n inversa del compute (cuando procede). search=\"_method\" \u2192 M\u00e9todo de b\u00fasqueda personalizada. store=True \u2192 Persistir valor de campo computado/relacionado. compute_sudo=True \u2192 Computar con superusuario (evita problemas de permisos). selection_add=[(...)] \u2192 Extender selecciones existentes. related=\"x.y.z\" \u2192 Campo relacionado. deprecated=\"18.0\" \u2192 Marcar campo como obsoleto (nota para devs). 5) Campos especiales / reservados m\u00e1s comunes Odoo crea o usa estos campos con sem\u00e1ntica especial. Conviene conocerlos. name ( Char ) \u2192 \u201cdisplay name\u201d por defecto; se muestra como identificador del registro. active ( Boolean ) \u2192 Archivado : si False , el registro se oculta de listas por defecto. sequence ( Integer ) \u2192 Ordenaci\u00f3n preferente en vistas/listas. create_uid ( Many2one(res.users) ) \u2192 Usuario que cre\u00f3 el registro. create_date ( Datetime ) \u2192 Fecha/hora de creaci\u00f3n . write_uid ( Many2one(res.users) ) \u2192 \u00daltimo usuario que modific\u00f3 . write_date ( Datetime ) \u2192 Fecha/hora de la \u00faltima modificaci\u00f3n . company_id ( Many2one(res.company) ) \u2192 Compa\u00f1\u00eda del registro (multiempresa). display_name ( Char , compute) \u2192 Nombre mostrado (puede combinar varios campos). Notas : - Los cuatro campos de auditor\u00eda ( create_uid , create_date , write_uid , write_date ) se manejan autom\u00e1ticamente por el ORM. - active agrega el filtro \u201cIncluir archivados\u201d en la UI cuando existe en el modelo. - name_get / name_search permiten personalizar el display name y la b\u00fasqueda r\u00e1pida. 6) Ejemplo compacto de modelo con varios tipos from odoo import api, fields, models class Task(models.Model): _name = \"demo.task\" _description = \"Demo Task\" # B\u00e1sicos name = fields.Char(required=True, index=True) description = fields.Text() is_done = fields.Boolean(default=False) deadline = fields.Date() planned_at = fields.Datetime() # N\u00fameros hours = fields.Float(digits=(16, 2)) currency_id = fields.Many2one(\"res.currency\") amount = fields.Monetary(currency_field=\"currency_id\", digits=(16, 2)) # Media y HTML image = fields.Image(max_width=256, max_height=256) notes_html = fields.Html() # Relacionales partner_id = fields.Many2one(\"res.partner\", ondelete=\"set null\", index=True) tag_ids = fields.Many2many(\"demo.tag\", string=\"Etiquetas\") # Computados y relacionados partner_country = fields.Many2one( related=\"partner_id.country_id\", store=True, readonly=True ) # Archivado active = fields.Boolean(default=True) # Computado con depends effective = fields.Float(compute=\"_compute_effective\", store=True) @api.depends(\"hours\", \"is_done\") def _compute_effective(self): for rec in self: rec.effective = rec.hours if rec.is_done else 0.0 7) Consejos r\u00e1pidos Define index=True en campos usados en dominios/filtros frecuentes. Usa ondelete=\"set null\" en Many2one salvo que necesites bloquear ( restrict ) o arrastrar ( cascade ). En Monetary , SIEMPRE define el currency_field . En campos computados con store=True , no olvides las dependencias con @api.depends . Para grandes textos, Text o Html ; para peque\u00f1as etiquetas, Char con size . selection_add es la forma limpia de extender Selection de otro m\u00f3dulo.","title":"Creaci\u00f3n de un modelo"},{"location":"modelos/basicfields/#creacion-de-un-modelo","text":"Vamos a ver de manera detallada c\u00f3mo crear un modelo en Odoo 18 .","title":"Creaci\u00f3n de un modelo"},{"location":"modelos/basicfields/#estructura-previa-del-modulo","text":"Suponemos que ya tienes un m\u00f3dulo visible en Odoo con el manifest m\u00ednimo. La estructura deber\u00eda incluir al menos: task_app/ \u251c\u2500 __init__.py \u251c\u2500 __manifest__.py \u2514\u2500 models/ \u2514\u2500 __init__.py Si no existe models/ o alguno de los __init__ , cr\u00e9alos ahora (vac\u00edos).","title":"Estructura previa del m\u00f3dulo"},{"location":"modelos/basicfields/#codigo-del-modelo","text":"Ruta del archivo: task_app/models/task_model.py # task_app/models/task_model.py from odoo import fields, models class TaskModel(models.Model): _name = \"task_app.task_model\" _description = \"Task (basic model)\" name = fields.Char(string=\"Name\", required=True, index=True) description = fields.Text(string=\"Description\") is_done = fields.Boolean(string=\"Done\", default=False)","title":"C\u00f3digo del modelo"},{"location":"modelos/basicfields/#explicacion-detallada","text":"","title":"Explicaci\u00f3n detallada"},{"location":"modelos/basicfields/#importaciones","text":"from odoo import fields, models Importa el ORM de Odoo. models.Model es la clase base para todos los modelos, y fields contiene los tipos de campos disponibles (Char, Text, Boolean, Many2one, etc.).","title":"Importaciones"},{"location":"modelos/basicfields/#definicion-de-la-clase","text":"class TaskModel(models.Model): Declara una clase de modelo que hereda de models.Model . El nombre de la clase en Python (p. ej., TaskModel ) puede ser cualquiera, pero por convenci\u00f3n se usa CamelCase y describe la entidad.","title":"Definici\u00f3n de la clase"},{"location":"modelos/basicfields/#metadatos-del-modelo","text":"_name = \"task_app.task_model\" Es el nombre t\u00e9cnico del modelo (tambi\u00e9n llamado model name ). Suele incluir el prefijo del m\u00f3dulo ( task_app ) para evitar colisiones con otros m\u00f3dulos. Este nombre se usa en vistas XML, reglas de acceso, dominios, etc. _description = \"Task (basic model)\" Cadena legible que describe el modelo. Se utiliza en la interfaz para etiquetas y t\u00edtulos.","title":"Metadatos del modelo"},{"location":"modelos/basicfields/#campos-del-modelo","text":"name = fields.Char(...) Campo de texto corto . string=\"Name\" etiqueta visible en la UI. required=True obliga a que tenga valor antes de crear/guardar el registro. index=True crea un \u00edndice en BD para b\u00fasquedas m\u00e1s r\u00e1pidas por este campo. description = fields.Text(...) Campo de texto largo (sin l\u00edmite pr\u00e1ctico a nivel de ORM). Ideal para descripciones. is_done = fields.Boolean(...) Campo booleano . default=False define el valor por defecto al crear registros. Sugerencia: Si no especificas _rec_name , Odoo usa por defecto el campo name para representar el registro (por ejemplo, en desplegables Many2one).","title":"Campos del modelo"},{"location":"modelos/basicfields/#notas-minimas-para-que-odoo-cargue-el-modelo","text":"Aseg\u00farate de importar el archivo en task_app/models/__init__.py (por ejemplo: from . import task_model ). Incluye el m\u00f3dulo en tu base de datos y actual\u00edzalo desde Apps o con -u task_app si trabajas desde la l\u00ednea de comandos. Basado en la referencia oficial del ORM de Odoo 18: - Documentaci\u00f3n ORM (fields): https://www.odoo.com/documentation/18.0/developer/reference/backend/orm.html#fields","title":"Notas m\u00ednimas para que Odoo cargue el modelo"},{"location":"modelos/basicfields/#campos-basicos","text":"","title":"Campos b\u00e1sicos"},{"location":"modelos/basicfields/#char","text":"Texto corto . \u00datil para nombres, c\u00f3digos, t\u00edtulos. Atributos t\u00edpicos: size (l\u00edmite de longitud), index , required . code = fields.Char(string=\"C\u00f3digo\", size=32, index=True, required=True)","title":"Char"},{"location":"modelos/basicfields/#text","text":"Texto largo sin l\u00edmite pr\u00e1ctico (almacenado como text en PostgreSQL). description = fields.Text(string=\"Descripci\u00f3n\")","title":"Text"},{"location":"modelos/basicfields/#boolean","text":"Verdadero / Falso . is_done = fields.Boolean(string=\"Realizada\", default=False)","title":"Boolean"},{"location":"modelos/basicfields/#integer","text":"Entero (32 bits). priority = fields.Integer(string=\"Prioridad\", default=0)","title":"Integer"},{"location":"modelos/basicfields/#float","text":"N\u00famero decimal . Atributo digits para control de precisi\u00f3n. weight = fields.Float(string=\"Peso (kg)\", digits=(16, 2))","title":"Float"},{"location":"modelos/basicfields/#monetary","text":"Decimal asociado a una moneda ( currency_field ). currency_id = fields.Many2one(\"res.currency\", string=\"Moneda\") amount = fields.Monetary(string=\"Importe\", currency_field=\"currency_id\", digits=(16, 2))","title":"Monetary"},{"location":"modelos/basicfields/#date","text":"Fecha sin hora. deadline = fields.Date(string=\"Fecha l\u00edmite\")","title":"Date"},{"location":"modelos/basicfields/#datetime","text":"Fecha y hora (timezone-aware a nivel de UI). scheduled_at = fields.Datetime(string=\"Programada\")","title":"Datetime"},{"location":"modelos/basicfields/#selection","text":"Valor enumerado entre opciones cerradas. Puedes usar selection=[(...), ...] o selection=_method . state = fields.Selection( [ (\"draft\", \"Borrador\"), (\"progress\", \"En progreso\"), (\"done\", \"Hecho\"), (\"cancel\", \"Cancelado\"), ], string=\"Estado\", default=\"draft\", index=True, )","title":"Selection"},{"location":"modelos/basicfields/#binary","text":"Binario (archivos). Suele usarse con attachment=True para almacenar en adjuntos. file_data = fields.Binary(string=\"Adjunto\", attachment=True)","title":"Binary"},{"location":"modelos/basicfields/#html","text":"HTML enriquecido (editor WYSIWYG). notes_html = fields.Html(string=\"Notas\")","title":"Html"},{"location":"modelos/basicfields/#image","text":"Imagen almacenada en binario con utilidades de redimensionado . image = fields.Image(string=\"Imagen\", max_width=512, max_height=512)","title":"Image"},{"location":"modelos/basicfields/#2-campos-relacionales","text":"","title":"2) Campos relacionales"},{"location":"modelos/basicfields/#many2one","text":"Relaci\u00f3n muchas a una hacia otro modelo (crea columna <campo>_id ). Atributos clave: comodel_name , ondelete , domain , context , index . partner_id = fields.Many2one( \"res.partner\", string=\"Contacto\", ondelete=\"set null\", index=True, domain=[(\"active\", \"=\", True)], )","title":"Many2one"},{"location":"modelos/basicfields/#one2many","text":"Relaci\u00f3n una a muchas (virtual), inversa a un Many2one en el modelo destino. Requiere comodel_name y inverse_name (el Many2one que apunta a este modelo). line_ids = fields.One2many( \"task.line\", \"task_id\", # inverse_name en el modelo task.line string=\"L\u00edneas\" )","title":"One2many"},{"location":"modelos/basicfields/#many2many","text":"Relaci\u00f3n muchas a muchas usando una tabla relacional. Se puede especificar tabla/columnas o dejar que Odoo las genere. tag_ids = fields.Many2many( \"task.tag\", \"task_tag_rel\", # nombre de la tabla relacional (opcional) \"task_id\", # columna que referencia a este modelo (opcional) \"tag_id\", # columna que referencia al comodel (opcional) string=\"Etiquetas\", )","title":"Many2many"},{"location":"modelos/basicfields/#3-campos-computados-y-relacionados","text":"","title":"3) Campos computados y relacionados"},{"location":"modelos/basicfields/#campo-computado-compute","text":"El valor se calcula por c\u00f3digo. Con store=True se guarda en BD (y define dependencias con @api.depends ). from odoo import api, fields, models class Task(models.Model): _name = \"x.task\" name = fields.Char(required=True) hours = fields.Float() rate = fields.Float() amount = fields.Float(compute=\"_compute_amount\", store=True) @api.depends(\"hours\", \"rate\") def _compute_amount(self): for rec in self: rec.amount = rec.hours * rec.rate","title":"Campo computado (compute)"},{"location":"modelos/basicfields/#campo-relacionado-related","text":"Apunta a un campo de otra relaci\u00f3n. Opcionalmente store=True para almacenar una copia sincronizada. partner_country = fields.Many2one( related=\"partner_id.country_id\", comodel_name=\"res.country\", string=\"Pa\u00eds (cliente)\", store=True, readonly=True, )","title":"Campo relacionado (related)"},{"location":"modelos/basicfields/#4-atributos-comunes-cheatsheet","text":"No todos aplican a todos los tipos; consulta la doc oficial para detalles y compatibilidades. string=\"Etiqueta\" \u2192 Texto mostrado en la UI. help=\"Texto de ayuda\" \u2192 Tooltip de ayuda. required=True \u2192 Hace obligatorio el campo. default=<valor|funci\u00f3n> \u2192 Valor por defecto (literal o funci\u00f3n/ lambda ). index=True \u2192 \u00cdndice en BD (b\u00fasqueda m\u00e1s r\u00e1pida). copy=True/False \u2192 Se copia al duplicar el registro. readonly=True \u2192 Solo lectura en la UI (no evita cambios por c\u00f3digo). states={...} \u2192 Modifica atributos seg\u00fan estado (vistas form). groups=\"module.group_xmlid\" \u2192 Visibilidad/edici\u00f3n restringida a grupos. tracking=True/number \u2192 Rastreo en chatter (si el modelo hereda de mail.thread ). translate=True \u2192 Traducci\u00f3n (en Char , Text , Html , etc.). size=NN \u2192 Longitud m\u00e1xima (principalmente Char ). digits=(precision, escala) \u2192 Precisi\u00f3n en Float/Monetary . currency_field=\"currency_id\" \u2192 Campo moneda asociado ( Monetary ). domain=[(...)] \u2192 Filtrado din\u00e1mico en relacionales (UI/ORM). context={...} \u2192 Valores por defecto, comportamiento contexto. ondelete=\"restrict|cascade|set null|set default\" \u2192 Pol\u00edtica al eliminar ( Many2one ). compute=\"_method\" \u2192 Campo computado; comb\u00ednalo con @api.depends . inverse=\"_method\" \u2192 Acci\u00f3n inversa del compute (cuando procede). search=\"_method\" \u2192 M\u00e9todo de b\u00fasqueda personalizada. store=True \u2192 Persistir valor de campo computado/relacionado. compute_sudo=True \u2192 Computar con superusuario (evita problemas de permisos). selection_add=[(...)] \u2192 Extender selecciones existentes. related=\"x.y.z\" \u2192 Campo relacionado. deprecated=\"18.0\" \u2192 Marcar campo como obsoleto (nota para devs).","title":"4) Atributos comunes (cheatsheet)"},{"location":"modelos/basicfields/#5-campos-especiales-reservados-mas-comunes","text":"Odoo crea o usa estos campos con sem\u00e1ntica especial. Conviene conocerlos. name ( Char ) \u2192 \u201cdisplay name\u201d por defecto; se muestra como identificador del registro. active ( Boolean ) \u2192 Archivado : si False , el registro se oculta de listas por defecto. sequence ( Integer ) \u2192 Ordenaci\u00f3n preferente en vistas/listas. create_uid ( Many2one(res.users) ) \u2192 Usuario que cre\u00f3 el registro. create_date ( Datetime ) \u2192 Fecha/hora de creaci\u00f3n . write_uid ( Many2one(res.users) ) \u2192 \u00daltimo usuario que modific\u00f3 . write_date ( Datetime ) \u2192 Fecha/hora de la \u00faltima modificaci\u00f3n . company_id ( Many2one(res.company) ) \u2192 Compa\u00f1\u00eda del registro (multiempresa). display_name ( Char , compute) \u2192 Nombre mostrado (puede combinar varios campos). Notas : - Los cuatro campos de auditor\u00eda ( create_uid , create_date , write_uid , write_date ) se manejan autom\u00e1ticamente por el ORM. - active agrega el filtro \u201cIncluir archivados\u201d en la UI cuando existe en el modelo. - name_get / name_search permiten personalizar el display name y la b\u00fasqueda r\u00e1pida.","title":"5) Campos especiales / reservados m\u00e1s comunes"},{"location":"modelos/basicfields/#6-ejemplo-compacto-de-modelo-con-varios-tipos","text":"from odoo import api, fields, models class Task(models.Model): _name = \"demo.task\" _description = \"Demo Task\" # B\u00e1sicos name = fields.Char(required=True, index=True) description = fields.Text() is_done = fields.Boolean(default=False) deadline = fields.Date() planned_at = fields.Datetime() # N\u00fameros hours = fields.Float(digits=(16, 2)) currency_id = fields.Many2one(\"res.currency\") amount = fields.Monetary(currency_field=\"currency_id\", digits=(16, 2)) # Media y HTML image = fields.Image(max_width=256, max_height=256) notes_html = fields.Html() # Relacionales partner_id = fields.Many2one(\"res.partner\", ondelete=\"set null\", index=True) tag_ids = fields.Many2many(\"demo.tag\", string=\"Etiquetas\") # Computados y relacionados partner_country = fields.Many2one( related=\"partner_id.country_id\", store=True, readonly=True ) # Archivado active = fields.Boolean(default=True) # Computado con depends effective = fields.Float(compute=\"_compute_effective\", store=True) @api.depends(\"hours\", \"is_done\") def _compute_effective(self): for rec in self: rec.effective = rec.hours if rec.is_done else 0.0","title":"6) Ejemplo compacto de modelo con varios tipos"},{"location":"modelos/basicfields/#7-consejos-rapidos","text":"Define index=True en campos usados en dominios/filtros frecuentes. Usa ondelete=\"set null\" en Many2one salvo que necesites bloquear ( restrict ) o arrastrar ( cascade ). En Monetary , SIEMPRE define el currency_field . En campos computados con store=True , no olvides las dependencias con @api.depends . Para grandes textos, Text o Html ; para peque\u00f1as etiquetas, Char con size . selection_add es la forma limpia de extender Selection de otro m\u00f3dulo.","title":"7) Consejos r\u00e1pidos"},{"location":"modulos/implanerp/","text":"\ud83d\udce6 Implantaci\u00f3n de un ERP con Odoo Este documento describe en detalle las fases de un proyecto de implantaci\u00f3n de un ERP (Enterprise Resource Planning), tomando como referencia la plataforma Odoo . Se incluyen ejemplos pr\u00e1cticos, recomendaciones y buenas pr\u00e1cticas. \ud83d\udd0d Estudio del Mercado Objetivo Analizar las soluciones ERP existentes y evaluar cu\u00e1l se adapta mejor a las necesidades de la empresa. Factores a evaluar Coste total de propiedad (licencia, mantenimiento, personalizaci\u00f3n) C\u00f3digo abierto vs. propietario Escalabilidad Comunidad y soporte t\u00e9cnico Comparativa b\u00e1sica ERP Licencia Comunidad Personalizaci\u00f3n Coste inicial Odoo Libre (Community) / Comercial (Enterprise) Alta Muy Alta Bajo SAP Business One Comercial Alta Media Alto Microsoft Dynamics Comercial Media Alta Medio Ejemplo pr\u00e1ctico: Una PYME con necesidades b\u00e1sicas de contabilidad, CRM y ventas opta por Odoo Community , por ser econ\u00f3mico y flexible. \u2705 Selecci\u00f3n del ERP Reuni\u00f3n con stakeholders Identificar los procesos clave y puntos de dolor actuales. Requisitos funcionales y t\u00e9cnicos Multiempresa / multiusuario Gesti\u00f3n de inventario Facturaci\u00f3n electr\u00f3nica Integraciones con plataformas externas (por ejemplo, e-commerce) \u2699\ufe0f Fase de Implantaci\u00f3n Planificaci\u00f3n del proyecto Asignaci\u00f3n de roles: consultor, administrador, usuarios clave Calendario de implantaci\u00f3n (metodolog\u00eda \u00e1gil recomendada) Instalaci\u00f3n t\u00e9cnica Entorno de pruebas y producci\u00f3n (Docker, servidores, nube) Base de datos PostgreSQL + Odoo Formaci\u00f3n inicial Sesiones por departamentos (Ventas, Almac\u00e9n, Administraci\u00f3n) Manuales b\u00e1sicos de uso de Odoo Ejemplo: Se crea un entorno de pruebas con Odoo y se carga una muestra de clientes y productos. \ud83d\ude80 Fase de Puesta en Marcha Migraci\u00f3n de datos Importaci\u00f3n de clientes, productos, proveedores, facturas Odoo permite importar desde Excel o CSV Validaci\u00f3n de procesos Validaci\u00f3n de ventas: cotizaci\u00f3n > pedido > albar\u00e1n > factura Validaci\u00f3n de almac\u00e9n: entrada > ubicaci\u00f3n > salida Soporte post-lanzamiento Resoluci\u00f3n de errores y ajustes de configuraci\u00f3n Monitorizaci\u00f3n de logs y rendimiento Ejemplo: Se detecta que los albaranes no se generan correctamente y se ajusta el flujo de entrega en Odoo. \ud83d\udd1a Cierre del Proyecto Documentaci\u00f3n Manual de uso por departamentos Documentaci\u00f3n t\u00e9cnica: configuraci\u00f3n, m\u00f3dulos instalados Evaluaci\u00f3n Encuesta de satisfacci\u00f3n a usuarios Informe de lecciones aprendidas Ejemplo: El cliente solicita incluir KPIs de ventas semanales y se incorpora un dashboard con Odoo Studio. \ud83e\udde9 Selecci\u00f3n de M\u00f3dulos seg\u00fan Necesidades Departamento M\u00f3dulo Odoo Funcionalidad principal Ventas sale_management Presupuestos, pedidos, clientes Compras purchase \u00d3rdenes de compra, proveedores Almac\u00e9n stock Control de inventario y ubicaciones Contabilidad account Facturaci\u00f3n, asientos, impuestos CRM crm Gesti\u00f3n de oportunidades y clientes Recursos Humanos hr Empleados, ausencias, n\u00f3minas Fabricaci\u00f3n mrp \u00d3rdenes de fabricaci\u00f3n, rutas, listas materiales Ejemplo: Una empresa sin fabricaci\u00f3n activa puede prescindir del m\u00f3dulo mrp inicialmente. \ud83d\udee0\ufe0f Configuraci\u00f3n y Personalizaci\u00f3n del ERP Creaci\u00f3n de empresa y usuarios Configurar multicompa\u00f1\u00eda si es necesario Asignaci\u00f3n de roles: gerente, usuario, contable Personalizaci\u00f3n visual Logos, plantillas de facturas y presupuestos Traducci\u00f3n de interfaz al espa\u00f1ol Personalizaci\u00f3n funcional Crear campos personalizados con Odoo Studio Automatizaci\u00f3n de flujos con reglas y acciones programadas Desarrollo personalizado (avanzado) Crear nuevos m\u00f3dulos con odoo scaffold Modificar vistas, modelos y controladores docker exec -it odoo odoo scaffold gestion_eventos /mnt/extra-addons Ejemplo: Se desarrolla un m\u00f3dulo a medida para gestionar eventos internos de la empresa con inscripci\u00f3n de empleados. \ud83d\udcd8 Actividad !!! Question \"Implantaci\u00f3n de Odoo\" \ud83d\udcd8 Actividad 1: An\u00e1lisis y planificaci\u00f3n de implantaci\u00f3n de Odoo en una empresa ficticia. **Objetivo**: Simular un proyecto real de implantaci\u00f3n de Odoo, desde el an\u00e1lisis de necesidades hasta la propuesta de m\u00f3dulos y personalizaciones. **Instrucciones**: 1. En grupos de 3-4 personas, dise\u00f1ad una empresa ficticia con al menos: - Nombre - Sector de actividad (ej. comercio electr\u00f3nico, log\u00edstica, fabricaci\u00f3n, servicios, etc.) - N\u00famero de empleados - Procesos clave a digitalizar - Elaborad un documento que contenga: - An\u00e1lisis de necesidades - Selecci\u00f3n justificada de m\u00f3dulos de Odoo (m\u00ednimo 4) - Propuesta de calendario de implantaci\u00f3n (fases) 1. Presentad la propuesta en clase con apoyo visual (diapositivas, mural o infograf\u00eda).","title":"\ud83d\udce6 Implantaci\u00f3n de un ERP con Odoo"},{"location":"modulos/implanerp/#implantacion-de-un-erp-con-odoo","text":"Este documento describe en detalle las fases de un proyecto de implantaci\u00f3n de un ERP (Enterprise Resource Planning), tomando como referencia la plataforma Odoo . Se incluyen ejemplos pr\u00e1cticos, recomendaciones y buenas pr\u00e1cticas.","title":"\ud83d\udce6 Implantaci\u00f3n de un ERP con Odoo"},{"location":"modulos/implanerp/#estudio-del-mercado","text":"","title":"\ud83d\udd0d Estudio del Mercado"},{"location":"modulos/implanerp/#objetivo","text":"Analizar las soluciones ERP existentes y evaluar cu\u00e1l se adapta mejor a las necesidades de la empresa.","title":"Objetivo"},{"location":"modulos/implanerp/#factores-a-evaluar","text":"Coste total de propiedad (licencia, mantenimiento, personalizaci\u00f3n) C\u00f3digo abierto vs. propietario Escalabilidad Comunidad y soporte t\u00e9cnico","title":"Factores a evaluar"},{"location":"modulos/implanerp/#comparativa-basica","text":"ERP Licencia Comunidad Personalizaci\u00f3n Coste inicial Odoo Libre (Community) / Comercial (Enterprise) Alta Muy Alta Bajo SAP Business One Comercial Alta Media Alto Microsoft Dynamics Comercial Media Alta Medio Ejemplo pr\u00e1ctico: Una PYME con necesidades b\u00e1sicas de contabilidad, CRM y ventas opta por Odoo Community , por ser econ\u00f3mico y flexible.","title":"Comparativa b\u00e1sica"},{"location":"modulos/implanerp/#seleccion-del-erp","text":"","title":"\u2705 Selecci\u00f3n del ERP"},{"location":"modulos/implanerp/#reunion-con-stakeholders","text":"Identificar los procesos clave y puntos de dolor actuales.","title":"Reuni\u00f3n con stakeholders"},{"location":"modulos/implanerp/#requisitos-funcionales-y-tecnicos","text":"Multiempresa / multiusuario Gesti\u00f3n de inventario Facturaci\u00f3n electr\u00f3nica Integraciones con plataformas externas (por ejemplo, e-commerce)","title":"Requisitos funcionales y t\u00e9cnicos"},{"location":"modulos/implanerp/#fase-de-implantacion","text":"","title":"\u2699\ufe0f Fase de Implantaci\u00f3n"},{"location":"modulos/implanerp/#planificacion-del-proyecto","text":"Asignaci\u00f3n de roles: consultor, administrador, usuarios clave Calendario de implantaci\u00f3n (metodolog\u00eda \u00e1gil recomendada)","title":"Planificaci\u00f3n del proyecto"},{"location":"modulos/implanerp/#instalacion-tecnica","text":"Entorno de pruebas y producci\u00f3n (Docker, servidores, nube) Base de datos PostgreSQL + Odoo","title":"Instalaci\u00f3n t\u00e9cnica"},{"location":"modulos/implanerp/#formacion-inicial","text":"Sesiones por departamentos (Ventas, Almac\u00e9n, Administraci\u00f3n) Manuales b\u00e1sicos de uso de Odoo Ejemplo: Se crea un entorno de pruebas con Odoo y se carga una muestra de clientes y productos.","title":"Formaci\u00f3n inicial"},{"location":"modulos/implanerp/#fase-de-puesta-en-marcha","text":"","title":"\ud83d\ude80 Fase de Puesta en Marcha"},{"location":"modulos/implanerp/#migracion-de-datos","text":"Importaci\u00f3n de clientes, productos, proveedores, facturas Odoo permite importar desde Excel o CSV","title":"Migraci\u00f3n de datos"},{"location":"modulos/implanerp/#validacion-de-procesos","text":"Validaci\u00f3n de ventas: cotizaci\u00f3n > pedido > albar\u00e1n > factura Validaci\u00f3n de almac\u00e9n: entrada > ubicaci\u00f3n > salida","title":"Validaci\u00f3n de procesos"},{"location":"modulos/implanerp/#soporte-post-lanzamiento","text":"Resoluci\u00f3n de errores y ajustes de configuraci\u00f3n Monitorizaci\u00f3n de logs y rendimiento Ejemplo: Se detecta que los albaranes no se generan correctamente y se ajusta el flujo de entrega en Odoo.","title":"Soporte post-lanzamiento"},{"location":"modulos/implanerp/#cierre-del-proyecto","text":"","title":"\ud83d\udd1a Cierre del Proyecto"},{"location":"modulos/implanerp/#documentacion","text":"Manual de uso por departamentos Documentaci\u00f3n t\u00e9cnica: configuraci\u00f3n, m\u00f3dulos instalados","title":"Documentaci\u00f3n"},{"location":"modulos/implanerp/#evaluacion","text":"Encuesta de satisfacci\u00f3n a usuarios Informe de lecciones aprendidas Ejemplo: El cliente solicita incluir KPIs de ventas semanales y se incorpora un dashboard con Odoo Studio.","title":"Evaluaci\u00f3n"},{"location":"modulos/implanerp/#seleccion-de-modulos-segun-necesidades","text":"Departamento M\u00f3dulo Odoo Funcionalidad principal Ventas sale_management Presupuestos, pedidos, clientes Compras purchase \u00d3rdenes de compra, proveedores Almac\u00e9n stock Control de inventario y ubicaciones Contabilidad account Facturaci\u00f3n, asientos, impuestos CRM crm Gesti\u00f3n de oportunidades y clientes Recursos Humanos hr Empleados, ausencias, n\u00f3minas Fabricaci\u00f3n mrp \u00d3rdenes de fabricaci\u00f3n, rutas, listas materiales Ejemplo: Una empresa sin fabricaci\u00f3n activa puede prescindir del m\u00f3dulo mrp inicialmente.","title":"\ud83e\udde9 Selecci\u00f3n de M\u00f3dulos seg\u00fan Necesidades"},{"location":"modulos/implanerp/#configuracion-y-personalizacion-del-erp","text":"","title":"\ud83d\udee0\ufe0f Configuraci\u00f3n y Personalizaci\u00f3n del ERP"},{"location":"modulos/implanerp/#creacion-de-empresa-y-usuarios","text":"Configurar multicompa\u00f1\u00eda si es necesario Asignaci\u00f3n de roles: gerente, usuario, contable","title":"Creaci\u00f3n de empresa y usuarios"},{"location":"modulos/implanerp/#personalizacion-visual","text":"Logos, plantillas de facturas y presupuestos Traducci\u00f3n de interfaz al espa\u00f1ol","title":"Personalizaci\u00f3n visual"},{"location":"modulos/implanerp/#personalizacion-funcional","text":"Crear campos personalizados con Odoo Studio Automatizaci\u00f3n de flujos con reglas y acciones programadas","title":"Personalizaci\u00f3n funcional"},{"location":"modulos/implanerp/#desarrollo-personalizado-avanzado","text":"Crear nuevos m\u00f3dulos con odoo scaffold Modificar vistas, modelos y controladores docker exec -it odoo odoo scaffold gestion_eventos /mnt/extra-addons Ejemplo: Se desarrolla un m\u00f3dulo a medida para gestionar eventos internos de la empresa con inscripci\u00f3n de empleados.","title":"Desarrollo personalizado (avanzado)"},{"location":"modulos/implanerp/#actividad","text":"!!! Question \"Implantaci\u00f3n de Odoo\" \ud83d\udcd8 Actividad 1: An\u00e1lisis y planificaci\u00f3n de implantaci\u00f3n de Odoo en una empresa ficticia. **Objetivo**: Simular un proyecto real de implantaci\u00f3n de Odoo, desde el an\u00e1lisis de necesidades hasta la propuesta de m\u00f3dulos y personalizaciones. **Instrucciones**: 1. En grupos de 3-4 personas, dise\u00f1ad una empresa ficticia con al menos: - Nombre - Sector de actividad (ej. comercio electr\u00f3nico, log\u00edstica, fabricaci\u00f3n, servicios, etc.) - N\u00famero de empleados - Procesos clave a digitalizar - Elaborad un documento que contenga: - An\u00e1lisis de necesidades - Selecci\u00f3n justificada de m\u00f3dulos de Odoo (m\u00ednimo 4) - Propuesta de calendario de implantaci\u00f3n (fases) 1. Presentad la propuesta en clase con apoyo visual (diapositivas, mural o infograf\u00eda).","title":"\ud83d\udcd8 Actividad"},{"location":"modulos/instmoderp/","text":"Instalaci\u00f3n de m\u00f3dulos en Odoo M\u00f3dulos propios del ERP Como hemos comentado, el ERP Odoo es modular; esto implica que cada proceso que ejecuta la empresa lo tenemos por separado en m\u00f3dulos. Los m\u00f3dulos se pueden instalar dependiendo de las necesidades de cada empresa, es decir, podemos instalar cualquier m\u00f3dulo que necesite la empresa, ya sean webs, compras, ventas, producci\u00f3n, etc. En este sentido, al utilizar un ERP modular nos permite ampliar su uso y su funcionalidad bas\u00e1ndonos en las necesidades de la empresa a medida que esta vaya creciendo o para facilitar su implantaci\u00f3n. Adem\u00e1s de los m\u00f3dulos propios que podemos instalar en Odoo, existen otros m\u00f3dulos creados por terceras personas o por nosotros mismos que tambi\u00e9n podemos instalar en Odoo. En el cliente Todos los m\u00f3dulos que lleva Odoo los podemos encontrar en el cliente web y en el servidor. Desde el cliente web accedemos a Odoo y, en el Men\u00fa principal , tenemos el submen\u00fa Aplicaciones . ![\"M\u00f3dulos Odoo\"](images/ModulosOdoo01.png){width=\"900%\" } M\u00f3dulos Odoo Aqu\u00ed nos aparecen los m\u00f3dulos que podemos instalar. Es posible buscar por nombre y desde esta ubicaci\u00f3n podemos instalar directamente cualquier m\u00f3dulo que necesitemos. Ejemplo: Uno de los m\u00f3dulos que encontramos es CRM , como ya hemos dicho anteriormente en el m\u00f3dulo de la relaci\u00f3n con los clientes. Para instalarlo simplemente habr\u00eda que darle al bot\u00f3n Activar y autom\u00e1ticamente se instalar\u00eda. !!! tip \"M\u00f3dulo CRM\" {width=\"50%\" } M\u00f3dulo CRM Para instalar cualquier otro m\u00f3dulo propio seguiremos el mismo procedimiento. Una vez instalado este m\u00f3dulo vemos que nos ha ampliado el men\u00fa principal y ahora aparecer\u00e1 de la forma siguiente: M\u00f3dulos Instalados - Conversaciones - CRM - Calendario - Contactos - Tareas - Aplicaciones {width=\"50%\"} M\u00f3dulos instalados Si vamos a Ajustes veremos que tambi\u00e9n se ha modificado y queda de la forma siguiente: ![\"M\u00f3dulos Odoo\"](images/ModulosOdoo04.png){width=\"100%\" } M\u00f3dulo CRM En el servidor Desde el servidor podemos acceder a la ubicaci\u00f3n de los m\u00f3dulos de Odoo, que encontramos en la ruta de instalaci\u00f3n de Odoo, en la carpeta /usr/lib/python3/dist-packages/odoo/addons . M\u00f3dulos externos al ERP Actualmente existen una gran variedad de m\u00f3dulos desarrollados por terceras personas, que est\u00e1n disponibles para ser instalados en Odoo. Como estos m\u00f3dulos no se encuentran en el propio Odoo, el proceso de instalaci\u00f3n es diferente al del resto de m\u00f3dulos propios. Existen repositorios desde los cuales podemos obtener estos m\u00f3dulos, sin coste adicional para la versi\u00f3n Community. Dos de los repositorios son: OCA Community Odoo Apps !!! info \"IMPORTANTE\" Podemos a\u00f1adir tantas carpetas como deseemos en el `addons_path`. Simplemente hay que usar la coma (`,`) para separarlas. \ud83d\udcdd Actividad !!! Question \"Instalaci\u00f3n de un m\u00f3dulo en Odoo\" 1. Tenemos una empresa que se dedica a la reparaci\u00f3n y venta de hardware y nos piden que analicemos qu\u00e9 m\u00f3dulos deber\u00edamos instalar en nuestro ERP y por qu\u00e9.","title":"Instalaci\u00f3n de m\u00f3dulos en Odoo"},{"location":"modulos/instmoderp/#instalacion-de-modulos-en-odoo","text":"","title":"Instalaci\u00f3n de m\u00f3dulos en Odoo"},{"location":"modulos/instmoderp/#modulos-propios-del-erp","text":"Como hemos comentado, el ERP Odoo es modular; esto implica que cada proceso que ejecuta la empresa lo tenemos por separado en m\u00f3dulos. Los m\u00f3dulos se pueden instalar dependiendo de las necesidades de cada empresa, es decir, podemos instalar cualquier m\u00f3dulo que necesite la empresa, ya sean webs, compras, ventas, producci\u00f3n, etc. En este sentido, al utilizar un ERP modular nos permite ampliar su uso y su funcionalidad bas\u00e1ndonos en las necesidades de la empresa a medida que esta vaya creciendo o para facilitar su implantaci\u00f3n. Adem\u00e1s de los m\u00f3dulos propios que podemos instalar en Odoo, existen otros m\u00f3dulos creados por terceras personas o por nosotros mismos que tambi\u00e9n podemos instalar en Odoo.","title":"M\u00f3dulos propios del ERP"},{"location":"modulos/instmoderp/#en-el-cliente","text":"Todos los m\u00f3dulos que lleva Odoo los podemos encontrar en el cliente web y en el servidor. Desde el cliente web accedemos a Odoo y, en el Men\u00fa principal , tenemos el submen\u00fa Aplicaciones . ![\"M\u00f3dulos Odoo\"](images/ModulosOdoo01.png){width=\"900%\" } M\u00f3dulos Odoo Aqu\u00ed nos aparecen los m\u00f3dulos que podemos instalar. Es posible buscar por nombre y desde esta ubicaci\u00f3n podemos instalar directamente cualquier m\u00f3dulo que necesitemos. Ejemplo: Uno de los m\u00f3dulos que encontramos es CRM , como ya hemos dicho anteriormente en el m\u00f3dulo de la relaci\u00f3n con los clientes. Para instalarlo simplemente habr\u00eda que darle al bot\u00f3n Activar y autom\u00e1ticamente se instalar\u00eda. !!! tip \"M\u00f3dulo CRM\" {width=\"50%\" } M\u00f3dulo CRM Para instalar cualquier otro m\u00f3dulo propio seguiremos el mismo procedimiento. Una vez instalado este m\u00f3dulo vemos que nos ha ampliado el men\u00fa principal y ahora aparecer\u00e1 de la forma siguiente: M\u00f3dulos Instalados - Conversaciones - CRM - Calendario - Contactos - Tareas - Aplicaciones {width=\"50%\"} M\u00f3dulos instalados Si vamos a Ajustes veremos que tambi\u00e9n se ha modificado y queda de la forma siguiente: ![\"M\u00f3dulos Odoo\"](images/ModulosOdoo04.png){width=\"100%\" } M\u00f3dulo CRM","title":"En el cliente"},{"location":"modulos/instmoderp/#en-el-servidor","text":"Desde el servidor podemos acceder a la ubicaci\u00f3n de los m\u00f3dulos de Odoo, que encontramos en la ruta de instalaci\u00f3n de Odoo, en la carpeta /usr/lib/python3/dist-packages/odoo/addons .","title":"En el servidor"},{"location":"modulos/instmoderp/#modulos-externos-al-erp","text":"Actualmente existen una gran variedad de m\u00f3dulos desarrollados por terceras personas, que est\u00e1n disponibles para ser instalados en Odoo. Como estos m\u00f3dulos no se encuentran en el propio Odoo, el proceso de instalaci\u00f3n es diferente al del resto de m\u00f3dulos propios. Existen repositorios desde los cuales podemos obtener estos m\u00f3dulos, sin coste adicional para la versi\u00f3n Community. Dos de los repositorios son: OCA Community Odoo Apps !!! info \"IMPORTANTE\" Podemos a\u00f1adir tantas carpetas como deseemos en el `addons_path`. Simplemente hay que usar la coma (`,`) para separarlas.","title":"M\u00f3dulos externos al ERP"},{"location":"modulos/instmoderp/#actividad","text":"!!! Question \"Instalaci\u00f3n de un m\u00f3dulo en Odoo\" 1. Tenemos una empresa que se dedica a la reparaci\u00f3n y venta de hardware y nos piden que analicemos qu\u00e9 m\u00f3dulos deber\u00edamos instalar en nuestro ERP y por qu\u00e9.","title":"\ud83d\udcdd Actividad"},{"location":"modulos/moduloserp/","text":"M\u00f3dulos de un ERP Las funciones de un ERP vienen definidas en los distintos m\u00f3dulos que podemos instalar. Un m\u00f3dulo es un software que contiene los elementos y datos necesarios para a\u00f1adir alguna funcionalidad a la aplicaci\u00f3n. Distinguimos diferentes tipos de m\u00f3dulos: M\u00f3dulos adicionales Se instalan despu\u00e9s (desde el mismo programa ERP o desde la web del ERP). M\u00f3dulo base Se carga autom\u00e1ticamente desde la instalaci\u00f3n inicial del sistema. Entre las caracter\u00edsticas m\u00e1s importantes de los m\u00f3dulos funcionales de un ERP destacaremos las siguientes: !!! info \"Caracter\u00edsticas de los ERPs\" - Instalaci\u00f3n y desinstalaci\u00f3n mediante asistentes. - Poder configurar o parametrizar los m\u00f3dulos para que se puedan adaptar al entorno de producci\u00f3n. - Incorporar niveles de seguridad: por ello algunos m\u00f3dulos solo estar\u00e1n accesibles para el administrador - Los m\u00f3dulos est\u00e1n interconectados y as\u00ed la informaci\u00f3n que se introduce se comparte entre ellos, - evitando introducirla m\u00e1s de una vez. - Posibilita la inclusi\u00f3n de comentarios y otros textos en las opciones de la aplicaci\u00f3n que implementa. - Los men\u00fas generados por los m\u00f3dulos se pueden adaptar a las necesidades de los diferentes usuarios. Tipolog\u00eda, descripci\u00f3n e interconexionado A. M\u00f3dulo Base Hay un m\u00f3dulo o conjunto de m\u00f3dulos base que son necesarios para que funcione la aplicaci\u00f3n. Tenemos un elemento base y alrededor del mismo podemos establecer otros tipos de m\u00f3dulos adicionales, pero estos no se instalan con la aplicaci\u00f3n, solo se instalan si son necesarios para el funcionamiento o la empresa. Funciones del m\u00f3dulo base: - Nos permite configurar la aplicaci\u00f3n. - Permite la gesti\u00f3n de los datos maestros. Estos datos son los elementos b\u00e1sicos para que funcione el ERP. - Permite establecer un idioma como predeterminado o importar traducciones. - Permite establecer la seguridad con la gesti\u00f3n de usuarios y los accesos a la aplicaci\u00f3n. - Permite administrar otros m\u00f3dulos. Podemos instalar nuevos m\u00f3dulos o eliminarlos de la aplicaci\u00f3n. En nuestro caso, el m\u00f3dulo base de Odoo solo incorpora dos m\u00f3dulos: - Empresas (que es una Ficha de Cliente) - Administraci\u00f3n , que permite a\u00f1adir m\u00e1s funcionalidades a la aplicaci\u00f3n con la instalaci\u00f3n de nuevos m\u00f3dulos. B. Gesti\u00f3n contable y financiera El m\u00f3dulo de Contabilidad automatiza todas aquellas operaciones que est\u00e1n relacionadas con los procesos contables de la empresa, permitiendo as\u00ed tener todos estos datos centralizados. La contabilidad financiera se relaciona con los m\u00f3dulos de Compras y Ventas , para evitar duplicidad en la informaci\u00f3n. De esta manera podemos emitir facturas a clientes o de proveedores sin necesidad de introducir los datos dos veces. El m\u00f3dulo de Contabilidad debe relacionarse tambi\u00e9n con el m\u00f3dulo de Tesorer\u00eda para mantener un control sobre el estado financiero global de la empresa. Por ejemplo, si un cliente no ha pagado una factura dentro del plazo establecido, se puede bloquear su cuenta hasta que este pago sea realizado. Funciones m\u00e1s interesantes: - La modularidad y flexibilidad es muy interesante, ya que los ERP disponen de m\u00f3dulos de contabilidad adaptados al Plan General Contable del pa\u00eds donde se implante. - Permite el idioma e introducci\u00f3n del plan del pa\u00eds donde se implante. Contabilidad anal\u00edtica / m\u00f3dulos: - Gesti\u00f3n de impuestos - Presupuestos - Facturas de clientes y proveedores - Estados financieros (Cuentas, balances, sumas y saldos) C. Compras, ventas y almac\u00e9n El m\u00f3dulo de Compras trata todas aquellas operaciones relacionadas con el proceso de compra: presupuestos de proveedores, precios, creaci\u00f3n de pedidos de compra, etc. Caracter\u00edsticas del M\u00f3dulo Compras: Seguimiento de tarifas de proveedores Gesti\u00f3n de entregas parciales del proveedor Gesti\u00f3n de reclamaciones a proveedores Generaci\u00f3n autom\u00e1tica de borradores de pedidos de compra Igual que se realiza una gesti\u00f3n de compras, tambi\u00e9n hace falta una gesti\u00f3n de las ventas de la compa\u00f1\u00eda. La forma de trabajar es similar al m\u00f3dulo de Compras, con la diferencia de que nos referimos a documentos de venta. Entre sus funcionalidades destacan las siguientes: Caracter\u00edsticas del M\u00f3dulo Ventas: Creaci\u00f3n de pedidos de venta. Revisi\u00f3n de los pedidos en sus diferentes estados. Confirmaci\u00f3n del env\u00edo. Definir formas de pago: contado, transferencia, etc., diferenciando estas por pedido y por fecha de facturaci\u00f3n. Gestionar y calcular todos los gastos generados por el env\u00edo de los pedidos. Albaranes autom\u00e1ticos desde pedidos. Un pedido equivale a un albar\u00e1n. El pedido puede dividirse en partes, cada una con su albar\u00e1n parcial (se desglosa y se unifica en la factura). Caracter\u00edsticas del M\u00f3dulo Almac\u00e9n: Caracter\u00edsticas del m\u00f3dulo: Definici\u00f3n de m\u00faltiples almacenes. Control del stock y la rotaci\u00f3n de inventario. Traspasos entre almacenes. Codificaci\u00f3n y numeraci\u00f3n de productos de forma personalizada. Definici\u00f3n de compras de un producto a diferentes proveedores. D. M\u00f3dulo de Facturaci\u00f3n Funcionalidades del m\u00f3dulo: Configuraci\u00f3n de formas de pago: contado, transferencia, etc., diferenciadas por pedido y fecha de facturaci\u00f3n. Facturas autom\u00e1ticas desde pedidos o albaranes. Generaci\u00f3n autom\u00e1tica desde el cobro o pago. Gesti\u00f3n de recibos, \u00f3rdenes de pago y transferencias. Integraci\u00f3n con extractos bancarios. Env\u00edo telem\u00e1tico de datos de remesas al banco. E. M\u00f3dulo de Gesti\u00f3n Personal Este m\u00f3dulo se encarga de todas las gestiones relacionadas con los trabajadores: Realizaci\u00f3n de n\u00f3minas. Altas y bajas de contratos. Control de horarios y d\u00edas festivos. Gesti\u00f3n del sistema de remuneraciones. Pago a empleados, incluyendo comisiones por ventas realizadas en un periodo de tiempo. Funcionalidades del m\u00f3dulo de Gesti\u00f3n de Personal Gesti\u00f3n de empleados y calendario de vacaciones. Gesti\u00f3n de contratos de empleados. Gesti\u00f3n de beneficios. Gesti\u00f3n de ausencias. Gesti\u00f3n de producci\u00f3n y rendimiento. Gesti\u00f3n de perfiles y responsabilidades. Cada uno de estos m\u00f3dulos puede ser ampliado con la instalaci\u00f3n de m\u00f3dulos adicionales. En ocasiones, la aplicaci\u00f3n no dispone de un m\u00f3dulo de RRHH como tal, de forma que la gesti\u00f3n del personal se lleva a cabo introduciendo conceptos contables relacionados, y la gesti\u00f3n de las comisiones se realiza a trav\u00e9s del m\u00f3dulo Comercial. F. Relaciones con clientes CRM ( Customer Relationship Management , o Gesti\u00f3n de las relaciones con los clientes ) es una aplicaci\u00f3n que permite centralizar en una \u00fanica base todas las interacciones entre la empresa y sus clientes. El CRM recopila toda la informaci\u00f3n de las gestiones comerciales con los clientes, manteniendo un hist\u00f3rico detallado. De esta forma, el CRM dispone de gran conocimiento sobre cada cliente y posibilita entender sus necesidades y anticiparse a ellas. Por otra parte, el CRM permite dirigir y gestionar de forma sencilla las campa\u00f1as de captaci\u00f3n y fidelizaci\u00f3n de clientes, controlando el conjunto de acciones realizadas sobre los actuales y potenciales, para poder realizar acciones concretas dirigidas al cliente adecuado en el momento adecuado. Las empresas que utilizan CRM disponen de la informaci\u00f3n necesaria para ofrecer un servicio de atenci\u00f3n al cliente diferenciado, acorde a las necesidades y expectativas actuales del mercado. Ejemplo: Openbravo incluye funcionalidad CRM dentro de los m\u00f3dulos de Ventas y Facturaci\u00f3n, pero puede integrarse en otro ERP de modo independiente, como SugarCRM . Los sistemas ERP pueden incluir funcionalidades con todas las caracter\u00edsticas del CRM, pero para poder desarrollar nuevos m\u00f3dulos es necesario adaptarse a nuevas tendencias y acceder a la instalaci\u00f3n del CRM. Funcionalidades del m\u00f3dulo CRM Datos identificativos del contacto. Segmentaci\u00f3n de contactos en funci\u00f3n de m\u00faltiples criterios. Determinaci\u00f3n del ciclo de clientes reales y potenciales. Seguimiento de oportunidades de negocio. Registro de actividades comerciales realizadas en la interacci\u00f3n cliente-empresa: Planificaci\u00f3n y ejecuci\u00f3n de campa\u00f1as de marketing. Seguimiento de resultados comerciales. Sincronizaci\u00f3n con la fuerza de ventas. Incluye herramientas de an\u00e1lisis para determinar qu\u00e9 documentos enviar en cada momento (ofertas, presupuestos), mensajes SMS, estad\u00edsticas diversas, etc. \ud83d\udcdd Actividad !!! Question \"Instalaci\u00f3n de Odoo\" 1. Investiga los diferentes m\u00f3dulos de Odoo que hemos visto y d\u00f3nde encontramos. 2. \u00bfHay alg\u00fan otro m\u00f3dulo?","title":"M\u00f3dulos de un ERP"},{"location":"modulos/moduloserp/#modulos-de-un-erp","text":"Las funciones de un ERP vienen definidas en los distintos m\u00f3dulos que podemos instalar. Un m\u00f3dulo es un software que contiene los elementos y datos necesarios para a\u00f1adir alguna funcionalidad a la aplicaci\u00f3n. Distinguimos diferentes tipos de m\u00f3dulos: M\u00f3dulos adicionales Se instalan despu\u00e9s (desde el mismo programa ERP o desde la web del ERP). M\u00f3dulo base Se carga autom\u00e1ticamente desde la instalaci\u00f3n inicial del sistema. Entre las caracter\u00edsticas m\u00e1s importantes de los m\u00f3dulos funcionales de un ERP destacaremos las siguientes: !!! info \"Caracter\u00edsticas de los ERPs\" - Instalaci\u00f3n y desinstalaci\u00f3n mediante asistentes. - Poder configurar o parametrizar los m\u00f3dulos para que se puedan adaptar al entorno de producci\u00f3n. - Incorporar niveles de seguridad: por ello algunos m\u00f3dulos solo estar\u00e1n accesibles para el administrador - Los m\u00f3dulos est\u00e1n interconectados y as\u00ed la informaci\u00f3n que se introduce se comparte entre ellos, - evitando introducirla m\u00e1s de una vez. - Posibilita la inclusi\u00f3n de comentarios y otros textos en las opciones de la aplicaci\u00f3n que implementa. - Los men\u00fas generados por los m\u00f3dulos se pueden adaptar a las necesidades de los diferentes usuarios.","title":"M\u00f3dulos de un ERP"},{"location":"modulos/moduloserp/#tipologia-descripcion-e-interconexionado","text":"","title":"Tipolog\u00eda, descripci\u00f3n e interconexionado"},{"location":"modulos/moduloserp/#a-modulo-base","text":"Hay un m\u00f3dulo o conjunto de m\u00f3dulos base que son necesarios para que funcione la aplicaci\u00f3n. Tenemos un elemento base y alrededor del mismo podemos establecer otros tipos de m\u00f3dulos adicionales, pero estos no se instalan con la aplicaci\u00f3n, solo se instalan si son necesarios para el funcionamiento o la empresa. Funciones del m\u00f3dulo base: - Nos permite configurar la aplicaci\u00f3n. - Permite la gesti\u00f3n de los datos maestros. Estos datos son los elementos b\u00e1sicos para que funcione el ERP. - Permite establecer un idioma como predeterminado o importar traducciones. - Permite establecer la seguridad con la gesti\u00f3n de usuarios y los accesos a la aplicaci\u00f3n. - Permite administrar otros m\u00f3dulos. Podemos instalar nuevos m\u00f3dulos o eliminarlos de la aplicaci\u00f3n. En nuestro caso, el m\u00f3dulo base de Odoo solo incorpora dos m\u00f3dulos: - Empresas (que es una Ficha de Cliente) - Administraci\u00f3n , que permite a\u00f1adir m\u00e1s funcionalidades a la aplicaci\u00f3n con la instalaci\u00f3n de nuevos m\u00f3dulos.","title":"A. M\u00f3dulo Base"},{"location":"modulos/moduloserp/#b-gestion-contable-y-financiera","text":"El m\u00f3dulo de Contabilidad automatiza todas aquellas operaciones que est\u00e1n relacionadas con los procesos contables de la empresa, permitiendo as\u00ed tener todos estos datos centralizados. La contabilidad financiera se relaciona con los m\u00f3dulos de Compras y Ventas , para evitar duplicidad en la informaci\u00f3n. De esta manera podemos emitir facturas a clientes o de proveedores sin necesidad de introducir los datos dos veces. El m\u00f3dulo de Contabilidad debe relacionarse tambi\u00e9n con el m\u00f3dulo de Tesorer\u00eda para mantener un control sobre el estado financiero global de la empresa. Por ejemplo, si un cliente no ha pagado una factura dentro del plazo establecido, se puede bloquear su cuenta hasta que este pago sea realizado. Funciones m\u00e1s interesantes: - La modularidad y flexibilidad es muy interesante, ya que los ERP disponen de m\u00f3dulos de contabilidad adaptados al Plan General Contable del pa\u00eds donde se implante. - Permite el idioma e introducci\u00f3n del plan del pa\u00eds donde se implante. Contabilidad anal\u00edtica / m\u00f3dulos: - Gesti\u00f3n de impuestos - Presupuestos - Facturas de clientes y proveedores - Estados financieros (Cuentas, balances, sumas y saldos)","title":"B. Gesti\u00f3n contable y financiera"},{"location":"modulos/moduloserp/#c-compras-ventas-y-almacen","text":"El m\u00f3dulo de Compras trata todas aquellas operaciones relacionadas con el proceso de compra: presupuestos de proveedores, precios, creaci\u00f3n de pedidos de compra, etc. Caracter\u00edsticas del M\u00f3dulo Compras: Seguimiento de tarifas de proveedores Gesti\u00f3n de entregas parciales del proveedor Gesti\u00f3n de reclamaciones a proveedores Generaci\u00f3n autom\u00e1tica de borradores de pedidos de compra Igual que se realiza una gesti\u00f3n de compras, tambi\u00e9n hace falta una gesti\u00f3n de las ventas de la compa\u00f1\u00eda. La forma de trabajar es similar al m\u00f3dulo de Compras, con la diferencia de que nos referimos a documentos de venta. Entre sus funcionalidades destacan las siguientes: Caracter\u00edsticas del M\u00f3dulo Ventas: Creaci\u00f3n de pedidos de venta. Revisi\u00f3n de los pedidos en sus diferentes estados. Confirmaci\u00f3n del env\u00edo. Definir formas de pago: contado, transferencia, etc., diferenciando estas por pedido y por fecha de facturaci\u00f3n. Gestionar y calcular todos los gastos generados por el env\u00edo de los pedidos. Albaranes autom\u00e1ticos desde pedidos. Un pedido equivale a un albar\u00e1n. El pedido puede dividirse en partes, cada una con su albar\u00e1n parcial (se desglosa y se unifica en la factura). Caracter\u00edsticas del M\u00f3dulo Almac\u00e9n: Caracter\u00edsticas del m\u00f3dulo: Definici\u00f3n de m\u00faltiples almacenes. Control del stock y la rotaci\u00f3n de inventario. Traspasos entre almacenes. Codificaci\u00f3n y numeraci\u00f3n de productos de forma personalizada. Definici\u00f3n de compras de un producto a diferentes proveedores.","title":"C. Compras, ventas y almac\u00e9n"},{"location":"modulos/moduloserp/#d-modulo-de-facturacion","text":"Funcionalidades del m\u00f3dulo: Configuraci\u00f3n de formas de pago: contado, transferencia, etc., diferenciadas por pedido y fecha de facturaci\u00f3n. Facturas autom\u00e1ticas desde pedidos o albaranes. Generaci\u00f3n autom\u00e1tica desde el cobro o pago. Gesti\u00f3n de recibos, \u00f3rdenes de pago y transferencias. Integraci\u00f3n con extractos bancarios. Env\u00edo telem\u00e1tico de datos de remesas al banco.","title":"D. M\u00f3dulo de Facturaci\u00f3n"},{"location":"modulos/moduloserp/#e-modulo-de-gestion-personal","text":"Este m\u00f3dulo se encarga de todas las gestiones relacionadas con los trabajadores: Realizaci\u00f3n de n\u00f3minas. Altas y bajas de contratos. Control de horarios y d\u00edas festivos. Gesti\u00f3n del sistema de remuneraciones. Pago a empleados, incluyendo comisiones por ventas realizadas en un periodo de tiempo. Funcionalidades del m\u00f3dulo de Gesti\u00f3n de Personal Gesti\u00f3n de empleados y calendario de vacaciones. Gesti\u00f3n de contratos de empleados. Gesti\u00f3n de beneficios. Gesti\u00f3n de ausencias. Gesti\u00f3n de producci\u00f3n y rendimiento. Gesti\u00f3n de perfiles y responsabilidades. Cada uno de estos m\u00f3dulos puede ser ampliado con la instalaci\u00f3n de m\u00f3dulos adicionales. En ocasiones, la aplicaci\u00f3n no dispone de un m\u00f3dulo de RRHH como tal, de forma que la gesti\u00f3n del personal se lleva a cabo introduciendo conceptos contables relacionados, y la gesti\u00f3n de las comisiones se realiza a trav\u00e9s del m\u00f3dulo Comercial.","title":"E. M\u00f3dulo de Gesti\u00f3n Personal"},{"location":"modulos/moduloserp/#f-relaciones-con-clientes","text":"CRM ( Customer Relationship Management , o Gesti\u00f3n de las relaciones con los clientes ) es una aplicaci\u00f3n que permite centralizar en una \u00fanica base todas las interacciones entre la empresa y sus clientes. El CRM recopila toda la informaci\u00f3n de las gestiones comerciales con los clientes, manteniendo un hist\u00f3rico detallado. De esta forma, el CRM dispone de gran conocimiento sobre cada cliente y posibilita entender sus necesidades y anticiparse a ellas. Por otra parte, el CRM permite dirigir y gestionar de forma sencilla las campa\u00f1as de captaci\u00f3n y fidelizaci\u00f3n de clientes, controlando el conjunto de acciones realizadas sobre los actuales y potenciales, para poder realizar acciones concretas dirigidas al cliente adecuado en el momento adecuado. Las empresas que utilizan CRM disponen de la informaci\u00f3n necesaria para ofrecer un servicio de atenci\u00f3n al cliente diferenciado, acorde a las necesidades y expectativas actuales del mercado. Ejemplo: Openbravo incluye funcionalidad CRM dentro de los m\u00f3dulos de Ventas y Facturaci\u00f3n, pero puede integrarse en otro ERP de modo independiente, como SugarCRM . Los sistemas ERP pueden incluir funcionalidades con todas las caracter\u00edsticas del CRM, pero para poder desarrollar nuevos m\u00f3dulos es necesario adaptarse a nuevas tendencias y acceder a la instalaci\u00f3n del CRM. Funcionalidades del m\u00f3dulo CRM Datos identificativos del contacto. Segmentaci\u00f3n de contactos en funci\u00f3n de m\u00faltiples criterios. Determinaci\u00f3n del ciclo de clientes reales y potenciales. Seguimiento de oportunidades de negocio. Registro de actividades comerciales realizadas en la interacci\u00f3n cliente-empresa: Planificaci\u00f3n y ejecuci\u00f3n de campa\u00f1as de marketing. Seguimiento de resultados comerciales. Sincronizaci\u00f3n con la fuerza de ventas. Incluye herramientas de an\u00e1lisis para determinar qu\u00e9 documentos enviar en cada momento (ofertas, presupuestos), mensajes SMS, estad\u00edsticas diversas, etc.","title":"F. Relaciones con clientes"},{"location":"modulos/moduloserp/#actividad","text":"!!! Question \"Instalaci\u00f3n de Odoo\" 1. Investiga los diferentes m\u00f3dulos de Odoo que hemos visto y d\u00f3nde encontramos. 2. \u00bfHay alg\u00fan otro m\u00f3dulo?","title":"\ud83d\udcdd Actividad"},{"location":"tutpython/tutpython/","text":"Python Essentials 1 \u2014 NetAcad & Documentaci\u00f3n Oficial \u00bfQu\u00e9 es Python? Python es un lenguaje de programaci\u00f3n interpretado, de alto nivel y con tipado din\u00e1mico , ampliamente utilizado por su sintaxis clara y legible. Fue creado por Guido van Rossum y publicado por primera vez en 1991. Caracter\u00edsticas principales: Sintaxis sencilla y cercana al lenguaje natural. Multiparadigma: soporta programaci\u00f3n orientada a objetos , imperativa y, en menor medida, funcional . Amplia biblioteca est\u00e1ndar. Portabilidad: corre en m\u00faltiples plataformas (Windows, macOS, Linux, etc.). Gran comunidad y abundante documentaci\u00f3n. Usos comunes: Desarrollo web (Django, Flask) Ciencia de datos y Machine Learning (Pandas, NumPy, scikit-learn) Automatizaci\u00f3n de tareas y scripting Aplicaciones de escritorio y videojuegos Internet de las cosas (IoT) M\u00e1s informaci\u00f3n: Documentaci\u00f3n oficial de Python Curso Python Essentials 1 \u2014 NetAcad Enlace: Python Essentials 1 \u2014 Cisco Networking Academy Este curso es una introducci\u00f3n al lenguaje Python, dise\u00f1ado para personas sin experiencia previa en programaci\u00f3n o con conocimientos b\u00e1sicos. Forma parte del itinerario de certificaci\u00f3n PCAP: Certified Associate in Python Programming . Contenido destacado: Introducci\u00f3n a la programaci\u00f3n y a Python. Tipos de datos b\u00e1sicos y variables. Operadores y expresiones. Estructuras de control de flujo ( if , for , while ). Funciones y m\u00f3dulos. Manejo de excepciones. Listas, cadenas y otras estructuras de datos. El curso incluye ejercicios pr\u00e1cticos y laboratorios en l\u00ednea que se realizan directamente desde la plataforma de NetAcad. Curso Python Essentials 2 \u2014 NetAcad Enlace: Python Essentials 2 \u2014 Cisco Networking Academy Este curso contin\u00faa y complementa Python Essentials 1 , introduciendo conceptos de nivel intermedio y avanzados en Python. Su objetivo es profundizar en el lenguaje y preparar al alumnado para desarrollar proyectos m\u00e1s complejos. Contenido destacado: - Programaci\u00f3n orientada a objetos (clases, herencia, encapsulaci\u00f3n). - Colecciones avanzadas (diccionarios, conjuntos). - Manejo de archivos (lectura/escritura). - M\u00f3dulos y paquetes personalizados. - Depuraci\u00f3n, pruebas unitarias y tratamiento avanzado de errores. - Herramientas de gesti\u00f3n y entornos virtuales (como venv ). Documentaci\u00f3n oficial de Python Enlace: https://docs.python.org/3/ La documentaci\u00f3n oficial de Python es la fuente principal para aprender y consultar detalles t\u00e9cnicos del lenguaje y su biblioteca est\u00e1ndar. Incluye: - Tutorial de Python : gu\u00eda paso a paso para aprender desde cero. - Referencia de la Biblioteca Est\u00e1ndar: m\u00f3dulos y funciones integradas. - Documentaci\u00f3n de la API de Python. - Gu\u00edas de estilo y mejores pr\u00e1cticas. Recursos adicionales P\u00e1gina oficial de Python Python Institute Repositorio de ejemplos en GitHub","title":"Python Essentials 1 \u2014 NetAcad &amp; Documentaci\u00f3n Oficial"},{"location":"tutpython/tutpython/#python-essentials-1-netacad-documentacion-oficial","text":"","title":"Python Essentials 1 \u2014 NetAcad &amp; Documentaci\u00f3n Oficial"},{"location":"tutpython/tutpython/#que-es-python","text":"Python es un lenguaje de programaci\u00f3n interpretado, de alto nivel y con tipado din\u00e1mico , ampliamente utilizado por su sintaxis clara y legible. Fue creado por Guido van Rossum y publicado por primera vez en 1991. Caracter\u00edsticas principales: Sintaxis sencilla y cercana al lenguaje natural. Multiparadigma: soporta programaci\u00f3n orientada a objetos , imperativa y, en menor medida, funcional . Amplia biblioteca est\u00e1ndar. Portabilidad: corre en m\u00faltiples plataformas (Windows, macOS, Linux, etc.). Gran comunidad y abundante documentaci\u00f3n. Usos comunes: Desarrollo web (Django, Flask) Ciencia de datos y Machine Learning (Pandas, NumPy, scikit-learn) Automatizaci\u00f3n de tareas y scripting Aplicaciones de escritorio y videojuegos Internet de las cosas (IoT) M\u00e1s informaci\u00f3n: Documentaci\u00f3n oficial de Python","title":"\u00bfQu\u00e9 es Python?"},{"location":"tutpython/tutpython/#curso-python-essentials-1-netacad","text":"Enlace: Python Essentials 1 \u2014 Cisco Networking Academy Este curso es una introducci\u00f3n al lenguaje Python, dise\u00f1ado para personas sin experiencia previa en programaci\u00f3n o con conocimientos b\u00e1sicos. Forma parte del itinerario de certificaci\u00f3n PCAP: Certified Associate in Python Programming . Contenido destacado: Introducci\u00f3n a la programaci\u00f3n y a Python. Tipos de datos b\u00e1sicos y variables. Operadores y expresiones. Estructuras de control de flujo ( if , for , while ). Funciones y m\u00f3dulos. Manejo de excepciones. Listas, cadenas y otras estructuras de datos. El curso incluye ejercicios pr\u00e1cticos y laboratorios en l\u00ednea que se realizan directamente desde la plataforma de NetAcad.","title":"Curso Python Essentials 1 \u2014 NetAcad"},{"location":"tutpython/tutpython/#curso-python-essentials-2-netacad","text":"Enlace: Python Essentials 2 \u2014 Cisco Networking Academy Este curso contin\u00faa y complementa Python Essentials 1 , introduciendo conceptos de nivel intermedio y avanzados en Python. Su objetivo es profundizar en el lenguaje y preparar al alumnado para desarrollar proyectos m\u00e1s complejos. Contenido destacado: - Programaci\u00f3n orientada a objetos (clases, herencia, encapsulaci\u00f3n). - Colecciones avanzadas (diccionarios, conjuntos). - Manejo de archivos (lectura/escritura). - M\u00f3dulos y paquetes personalizados. - Depuraci\u00f3n, pruebas unitarias y tratamiento avanzado de errores. - Herramientas de gesti\u00f3n y entornos virtuales (como venv ).","title":"Curso Python Essentials 2 \u2014 NetAcad"},{"location":"tutpython/tutpython/#documentacion-oficial-de-python","text":"Enlace: https://docs.python.org/3/ La documentaci\u00f3n oficial de Python es la fuente principal para aprender y consultar detalles t\u00e9cnicos del lenguaje y su biblioteca est\u00e1ndar. Incluye: - Tutorial de Python : gu\u00eda paso a paso para aprender desde cero. - Referencia de la Biblioteca Est\u00e1ndar: m\u00f3dulos y funciones integradas. - Documentaci\u00f3n de la API de Python. - Gu\u00edas de estilo y mejores pr\u00e1cticas.","title":"Documentaci\u00f3n oficial de Python"},{"location":"tutpython/tutpython/#recursos-adicionales","text":"P\u00e1gina oficial de Python Python Institute Repositorio de ejemplos en GitHub","title":"Recursos adicionales"}]}